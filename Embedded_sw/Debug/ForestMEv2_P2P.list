
ForestMEv2_P2P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c630  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012d90  0800c780  0800c780  0001c780  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f510  0801f510  00030f6c  2**0
                  CONTENTS
  4 .ARM          00000008  0801f510  0801f510  0002f510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f518  0801f518  00030f6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f518  0801f518  0002f518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f51c  0801f51c  0002f51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bb4  20000000  0801f520  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .AI_SRAM      000003ac  20000bc0  080200d4  00030bc0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000df74  20000f6c  08020480  00030f6c  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  2000eee0  08020480  0003eee0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030f6c  2**0
                  CONTENTS, READONLY
 13 .comment      00000108  00000000  00000000  00030f96  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003db12  00000000  00000000  0003109e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000870e  00000000  00000000  0006ebb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00012fdb  00000000  00000000  000772be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000018b0  00000000  00000000  0008a2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001a0d  00000000  00000000  0008bb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00022eb3  00000000  00000000  0008d55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000342ab  00000000  00000000  000b0410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cca47  00000000  00000000  000e46bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000048dc  00000000  00000000  001b1104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  001b59e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    00006d6f  00000000  00000000  001b5a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 000007a0  00000000  00000000  001bc7ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000f6c 	.word	0x20000f6c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800c750 	.word	0x0800c750

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000f70 	.word	0x20000f70
 8000174:	0800c750 	.word	0x0800c750

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_frsub>:
 8000188:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__addsf3>
 800018e:	bf00      	nop

08000190 <__aeabi_fsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000194 <__addsf3>:
 8000194:	0042      	lsls	r2, r0, #1
 8000196:	bf1f      	itttt	ne
 8000198:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800019c:	ea92 0f03 	teqne	r2, r3
 80001a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001a8:	d06a      	beq.n	8000280 <__addsf3+0xec>
 80001aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001b2:	bfc1      	itttt	gt
 80001b4:	18d2      	addgt	r2, r2, r3
 80001b6:	4041      	eorgt	r1, r0
 80001b8:	4048      	eorgt	r0, r1
 80001ba:	4041      	eorgt	r1, r0
 80001bc:	bfb8      	it	lt
 80001be:	425b      	neglt	r3, r3
 80001c0:	2b19      	cmp	r3, #25
 80001c2:	bf88      	it	hi
 80001c4:	4770      	bxhi	lr
 80001c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001d2:	bf18      	it	ne
 80001d4:	4240      	negne	r0, r0
 80001d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001e2:	bf18      	it	ne
 80001e4:	4249      	negne	r1, r1
 80001e6:	ea92 0f03 	teq	r2, r3
 80001ea:	d03f      	beq.n	800026c <__addsf3+0xd8>
 80001ec:	f1a2 0201 	sub.w	r2, r2, #1
 80001f0:	fa41 fc03 	asr.w	ip, r1, r3
 80001f4:	eb10 000c 	adds.w	r0, r0, ip
 80001f8:	f1c3 0320 	rsb	r3, r3, #32
 80001fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000200:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000204:	d502      	bpl.n	800020c <__addsf3+0x78>
 8000206:	4249      	negs	r1, r1
 8000208:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800020c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000210:	d313      	bcc.n	800023a <__addsf3+0xa6>
 8000212:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000216:	d306      	bcc.n	8000226 <__addsf3+0x92>
 8000218:	0840      	lsrs	r0, r0, #1
 800021a:	ea4f 0131 	mov.w	r1, r1, rrx
 800021e:	f102 0201 	add.w	r2, r2, #1
 8000222:	2afe      	cmp	r2, #254	; 0xfe
 8000224:	d251      	bcs.n	80002ca <__addsf3+0x136>
 8000226:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800022a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800022e:	bf08      	it	eq
 8000230:	f020 0001 	biceq.w	r0, r0, #1
 8000234:	ea40 0003 	orr.w	r0, r0, r3
 8000238:	4770      	bx	lr
 800023a:	0049      	lsls	r1, r1, #1
 800023c:	eb40 0000 	adc.w	r0, r0, r0
 8000240:	3a01      	subs	r2, #1
 8000242:	bf28      	it	cs
 8000244:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000248:	d2ed      	bcs.n	8000226 <__addsf3+0x92>
 800024a:	fab0 fc80 	clz	ip, r0
 800024e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000252:	ebb2 020c 	subs.w	r2, r2, ip
 8000256:	fa00 f00c 	lsl.w	r0, r0, ip
 800025a:	bfaa      	itet	ge
 800025c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000260:	4252      	neglt	r2, r2
 8000262:	4318      	orrge	r0, r3
 8000264:	bfbc      	itt	lt
 8000266:	40d0      	lsrlt	r0, r2
 8000268:	4318      	orrlt	r0, r3
 800026a:	4770      	bx	lr
 800026c:	f092 0f00 	teq	r2, #0
 8000270:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000274:	bf06      	itte	eq
 8000276:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800027a:	3201      	addeq	r2, #1
 800027c:	3b01      	subne	r3, #1
 800027e:	e7b5      	b.n	80001ec <__addsf3+0x58>
 8000280:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000284:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000288:	bf18      	it	ne
 800028a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800028e:	d021      	beq.n	80002d4 <__addsf3+0x140>
 8000290:	ea92 0f03 	teq	r2, r3
 8000294:	d004      	beq.n	80002a0 <__addsf3+0x10c>
 8000296:	f092 0f00 	teq	r2, #0
 800029a:	bf08      	it	eq
 800029c:	4608      	moveq	r0, r1
 800029e:	4770      	bx	lr
 80002a0:	ea90 0f01 	teq	r0, r1
 80002a4:	bf1c      	itt	ne
 80002a6:	2000      	movne	r0, #0
 80002a8:	4770      	bxne	lr
 80002aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002ae:	d104      	bne.n	80002ba <__addsf3+0x126>
 80002b0:	0040      	lsls	r0, r0, #1
 80002b2:	bf28      	it	cs
 80002b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	4770      	bx	lr
 80002ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002be:	bf3c      	itt	cc
 80002c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002c4:	4770      	bxcc	lr
 80002c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d2:	4770      	bx	lr
 80002d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002d8:	bf16      	itet	ne
 80002da:	4608      	movne	r0, r1
 80002dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002e0:	4601      	movne	r1, r0
 80002e2:	0242      	lsls	r2, r0, #9
 80002e4:	bf06      	itte	eq
 80002e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ea:	ea90 0f01 	teqeq	r0, r1
 80002ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002f2:	4770      	bx	lr

080002f4 <__aeabi_ui2f>:
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e004      	b.n	8000304 <__aeabi_i2f+0x8>
 80002fa:	bf00      	nop

080002fc <__aeabi_i2f>:
 80002fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000300:	bf48      	it	mi
 8000302:	4240      	negmi	r0, r0
 8000304:	ea5f 0c00 	movs.w	ip, r0
 8000308:	bf08      	it	eq
 800030a:	4770      	bxeq	lr
 800030c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000310:	4601      	mov	r1, r0
 8000312:	f04f 0000 	mov.w	r0, #0
 8000316:	e01c      	b.n	8000352 <__aeabi_l2f+0x2a>

08000318 <__aeabi_ul2f>:
 8000318:	ea50 0201 	orrs.w	r2, r0, r1
 800031c:	bf08      	it	eq
 800031e:	4770      	bxeq	lr
 8000320:	f04f 0300 	mov.w	r3, #0
 8000324:	e00a      	b.n	800033c <__aeabi_l2f+0x14>
 8000326:	bf00      	nop

08000328 <__aeabi_l2f>:
 8000328:	ea50 0201 	orrs.w	r2, r0, r1
 800032c:	bf08      	it	eq
 800032e:	4770      	bxeq	lr
 8000330:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000334:	d502      	bpl.n	800033c <__aeabi_l2f+0x14>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	ea5f 0c01 	movs.w	ip, r1
 8000340:	bf02      	ittt	eq
 8000342:	4684      	moveq	ip, r0
 8000344:	4601      	moveq	r1, r0
 8000346:	2000      	moveq	r0, #0
 8000348:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800034c:	bf08      	it	eq
 800034e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000352:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000356:	fabc f28c 	clz	r2, ip
 800035a:	3a08      	subs	r2, #8
 800035c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000360:	db10      	blt.n	8000384 <__aeabi_l2f+0x5c>
 8000362:	fa01 fc02 	lsl.w	ip, r1, r2
 8000366:	4463      	add	r3, ip
 8000368:	fa00 fc02 	lsl.w	ip, r0, r2
 800036c:	f1c2 0220 	rsb	r2, r2, #32
 8000370:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000374:	fa20 f202 	lsr.w	r2, r0, r2
 8000378:	eb43 0002 	adc.w	r0, r3, r2
 800037c:	bf08      	it	eq
 800037e:	f020 0001 	biceq.w	r0, r0, #1
 8000382:	4770      	bx	lr
 8000384:	f102 0220 	add.w	r2, r2, #32
 8000388:	fa01 fc02 	lsl.w	ip, r1, r2
 800038c:	f1c2 0220 	rsb	r2, r2, #32
 8000390:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000394:	fa21 f202 	lsr.w	r2, r1, r2
 8000398:	eb43 0002 	adc.w	r0, r3, r2
 800039c:	bf08      	it	eq
 800039e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_fmul>:
 80003a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003ac:	bf1e      	ittt	ne
 80003ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b2:	ea92 0f0c 	teqne	r2, ip
 80003b6:	ea93 0f0c 	teqne	r3, ip
 80003ba:	d06f      	beq.n	800049c <__aeabi_fmul+0xf8>
 80003bc:	441a      	add	r2, r3
 80003be:	ea80 0c01 	eor.w	ip, r0, r1
 80003c2:	0240      	lsls	r0, r0, #9
 80003c4:	bf18      	it	ne
 80003c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ca:	d01e      	beq.n	800040a <__aeabi_fmul+0x66>
 80003cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d8:	fba0 3101 	umull	r3, r1, r0, r1
 80003dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e4:	bf3e      	ittt	cc
 80003e6:	0049      	lslcc	r1, r1, #1
 80003e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003ec:	005b      	lslcc	r3, r3, #1
 80003ee:	ea40 0001 	orr.w	r0, r0, r1
 80003f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003f6:	2afd      	cmp	r2, #253	; 0xfd
 80003f8:	d81d      	bhi.n	8000436 <__aeabi_fmul+0x92>
 80003fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000402:	bf08      	it	eq
 8000404:	f020 0001 	biceq.w	r0, r0, #1
 8000408:	4770      	bx	lr
 800040a:	f090 0f00 	teq	r0, #0
 800040e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000412:	bf08      	it	eq
 8000414:	0249      	lsleq	r1, r1, #9
 8000416:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800041e:	3a7f      	subs	r2, #127	; 0x7f
 8000420:	bfc2      	ittt	gt
 8000422:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000426:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042a:	4770      	bxgt	lr
 800042c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	3a01      	subs	r2, #1
 8000436:	dc5d      	bgt.n	80004f4 <__aeabi_fmul+0x150>
 8000438:	f112 0f19 	cmn.w	r2, #25
 800043c:	bfdc      	itt	le
 800043e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000442:	4770      	bxle	lr
 8000444:	f1c2 0200 	rsb	r2, r2, #0
 8000448:	0041      	lsls	r1, r0, #1
 800044a:	fa21 f102 	lsr.w	r1, r1, r2
 800044e:	f1c2 0220 	rsb	r2, r2, #32
 8000452:	fa00 fc02 	lsl.w	ip, r0, r2
 8000456:	ea5f 0031 	movs.w	r0, r1, rrx
 800045a:	f140 0000 	adc.w	r0, r0, #0
 800045e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000462:	bf08      	it	eq
 8000464:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000468:	4770      	bx	lr
 800046a:	f092 0f00 	teq	r2, #0
 800046e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0040      	lsleq	r0, r0, #1
 8000476:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800047a:	3a01      	subeq	r2, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xce>
 800047e:	ea40 000c 	orr.w	r0, r0, ip
 8000482:	f093 0f00 	teq	r3, #0
 8000486:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800048a:	bf02      	ittt	eq
 800048c:	0049      	lsleq	r1, r1, #1
 800048e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000492:	3b01      	subeq	r3, #1
 8000494:	d0f9      	beq.n	800048a <__aeabi_fmul+0xe6>
 8000496:	ea41 010c 	orr.w	r1, r1, ip
 800049a:	e78f      	b.n	80003bc <__aeabi_fmul+0x18>
 800049c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	bf18      	it	ne
 80004a6:	ea93 0f0c 	teqne	r3, ip
 80004aa:	d00a      	beq.n	80004c2 <__aeabi_fmul+0x11e>
 80004ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b0:	bf18      	it	ne
 80004b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004b6:	d1d8      	bne.n	800046a <__aeabi_fmul+0xc6>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f090 0f00 	teq	r0, #0
 80004c6:	bf17      	itett	ne
 80004c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004cc:	4608      	moveq	r0, r1
 80004ce:	f091 0f00 	teqne	r1, #0
 80004d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004d6:	d014      	beq.n	8000502 <__aeabi_fmul+0x15e>
 80004d8:	ea92 0f0c 	teq	r2, ip
 80004dc:	d101      	bne.n	80004e2 <__aeabi_fmul+0x13e>
 80004de:	0242      	lsls	r2, r0, #9
 80004e0:	d10f      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004e2:	ea93 0f0c 	teq	r3, ip
 80004e6:	d103      	bne.n	80004f0 <__aeabi_fmul+0x14c>
 80004e8:	024b      	lsls	r3, r1, #9
 80004ea:	bf18      	it	ne
 80004ec:	4608      	movne	r0, r1
 80004ee:	d108      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004f0:	ea80 0001 	eor.w	r0, r0, r1
 80004f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000500:	4770      	bx	lr
 8000502:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000506:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800050a:	4770      	bx	lr

0800050c <__aeabi_fdiv>:
 800050c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000510:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000514:	bf1e      	ittt	ne
 8000516:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800051a:	ea92 0f0c 	teqne	r2, ip
 800051e:	ea93 0f0c 	teqne	r3, ip
 8000522:	d069      	beq.n	80005f8 <__aeabi_fdiv+0xec>
 8000524:	eba2 0203 	sub.w	r2, r2, r3
 8000528:	ea80 0c01 	eor.w	ip, r0, r1
 800052c:	0249      	lsls	r1, r1, #9
 800052e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000532:	d037      	beq.n	80005a4 <__aeabi_fdiv+0x98>
 8000534:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000538:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800053c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000540:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000544:	428b      	cmp	r3, r1
 8000546:	bf38      	it	cc
 8000548:	005b      	lslcc	r3, r3, #1
 800054a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800054e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000552:	428b      	cmp	r3, r1
 8000554:	bf24      	itt	cs
 8000556:	1a5b      	subcs	r3, r3, r1
 8000558:	ea40 000c 	orrcs.w	r0, r0, ip
 800055c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000560:	bf24      	itt	cs
 8000562:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000566:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800056a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800056e:	bf24      	itt	cs
 8000570:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000574:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000578:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800057c:	bf24      	itt	cs
 800057e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000582:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000586:	011b      	lsls	r3, r3, #4
 8000588:	bf18      	it	ne
 800058a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800058e:	d1e0      	bne.n	8000552 <__aeabi_fdiv+0x46>
 8000590:	2afd      	cmp	r2, #253	; 0xfd
 8000592:	f63f af50 	bhi.w	8000436 <__aeabi_fmul+0x92>
 8000596:	428b      	cmp	r3, r1
 8000598:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800059c:	bf08      	it	eq
 800059e:	f020 0001 	biceq.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005a8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005ac:	327f      	adds	r2, #127	; 0x7f
 80005ae:	bfc2      	ittt	gt
 80005b0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005b4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005b8:	4770      	bxgt	lr
 80005ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005be:	f04f 0300 	mov.w	r3, #0
 80005c2:	3a01      	subs	r2, #1
 80005c4:	e737      	b.n	8000436 <__aeabi_fmul+0x92>
 80005c6:	f092 0f00 	teq	r2, #0
 80005ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0040      	lsleq	r0, r0, #1
 80005d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005d6:	3a01      	subeq	r2, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xc2>
 80005da:	ea40 000c 	orr.w	r0, r0, ip
 80005de:	f093 0f00 	teq	r3, #0
 80005e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005e6:	bf02      	ittt	eq
 80005e8:	0049      	lsleq	r1, r1, #1
 80005ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005ee:	3b01      	subeq	r3, #1
 80005f0:	d0f9      	beq.n	80005e6 <__aeabi_fdiv+0xda>
 80005f2:	ea41 010c 	orr.w	r1, r1, ip
 80005f6:	e795      	b.n	8000524 <__aeabi_fdiv+0x18>
 80005f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005fc:	ea92 0f0c 	teq	r2, ip
 8000600:	d108      	bne.n	8000614 <__aeabi_fdiv+0x108>
 8000602:	0242      	lsls	r2, r0, #9
 8000604:	f47f af7d 	bne.w	8000502 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	f47f af70 	bne.w	80004f0 <__aeabi_fmul+0x14c>
 8000610:	4608      	mov	r0, r1
 8000612:	e776      	b.n	8000502 <__aeabi_fmul+0x15e>
 8000614:	ea93 0f0c 	teq	r3, ip
 8000618:	d104      	bne.n	8000624 <__aeabi_fdiv+0x118>
 800061a:	024b      	lsls	r3, r1, #9
 800061c:	f43f af4c 	beq.w	80004b8 <__aeabi_fmul+0x114>
 8000620:	4608      	mov	r0, r1
 8000622:	e76e      	b.n	8000502 <__aeabi_fmul+0x15e>
 8000624:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000628:	bf18      	it	ne
 800062a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800062e:	d1ca      	bne.n	80005c6 <__aeabi_fdiv+0xba>
 8000630:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000634:	f47f af5c 	bne.w	80004f0 <__aeabi_fmul+0x14c>
 8000638:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800063c:	f47f af3c 	bne.w	80004b8 <__aeabi_fmul+0x114>
 8000640:	e75f      	b.n	8000502 <__aeabi_fmul+0x15e>
 8000642:	bf00      	nop

08000644 <__gesf2>:
 8000644:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000648:	e006      	b.n	8000658 <__cmpsf2+0x4>
 800064a:	bf00      	nop

0800064c <__lesf2>:
 800064c:	f04f 0c01 	mov.w	ip, #1
 8000650:	e002      	b.n	8000658 <__cmpsf2+0x4>
 8000652:	bf00      	nop

08000654 <__cmpsf2>:
 8000654:	f04f 0c01 	mov.w	ip, #1
 8000658:	f84d cd04 	str.w	ip, [sp, #-4]!
 800065c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000660:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000664:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000668:	bf18      	it	ne
 800066a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800066e:	d011      	beq.n	8000694 <__cmpsf2+0x40>
 8000670:	b001      	add	sp, #4
 8000672:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000676:	bf18      	it	ne
 8000678:	ea90 0f01 	teqne	r0, r1
 800067c:	bf58      	it	pl
 800067e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000682:	bf88      	it	hi
 8000684:	17c8      	asrhi	r0, r1, #31
 8000686:	bf38      	it	cc
 8000688:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800068c:	bf18      	it	ne
 800068e:	f040 0001 	orrne.w	r0, r0, #1
 8000692:	4770      	bx	lr
 8000694:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000698:	d102      	bne.n	80006a0 <__cmpsf2+0x4c>
 800069a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800069e:	d105      	bne.n	80006ac <__cmpsf2+0x58>
 80006a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80006a4:	d1e4      	bne.n	8000670 <__cmpsf2+0x1c>
 80006a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80006aa:	d0e1      	beq.n	8000670 <__cmpsf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cfrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4608      	mov	r0, r1
 80006b8:	4661      	mov	r1, ip
 80006ba:	e7ff      	b.n	80006bc <__aeabi_cfcmpeq>

080006bc <__aeabi_cfcmpeq>:
 80006bc:	b50f      	push	{r0, r1, r2, r3, lr}
 80006be:	f7ff ffc9 	bl	8000654 <__cmpsf2>
 80006c2:	2800      	cmp	r0, #0
 80006c4:	bf48      	it	mi
 80006c6:	f110 0f00 	cmnmi.w	r0, #0
 80006ca:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006cc <__aeabi_fcmpeq>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff fff4 	bl	80006bc <__aeabi_cfcmpeq>
 80006d4:	bf0c      	ite	eq
 80006d6:	2001      	moveq	r0, #1
 80006d8:	2000      	movne	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmplt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffea 	bl	80006bc <__aeabi_cfcmpeq>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmple>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffe0 	bl	80006bc <__aeabi_cfcmpeq>
 80006fc:	bf94      	ite	ls
 80006fe:	2001      	movls	r0, #1
 8000700:	2000      	movhi	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_fcmpge>:
 8000708:	f84d ed08 	str.w	lr, [sp, #-8]!
 800070c:	f7ff ffd2 	bl	80006b4 <__aeabi_cfrcmple>
 8000710:	bf94      	ite	ls
 8000712:	2001      	movls	r0, #1
 8000714:	2000      	movhi	r0, #0
 8000716:	f85d fb08 	ldr.w	pc, [sp], #8
 800071a:	bf00      	nop

0800071c <__aeabi_fcmpgt>:
 800071c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000720:	f7ff ffc8 	bl	80006b4 <__aeabi_cfrcmple>
 8000724:	bf34      	ite	cc
 8000726:	2001      	movcc	r0, #1
 8000728:	2000      	movcs	r0, #0
 800072a:	f85d fb08 	ldr.w	pc, [sp], #8
 800072e:	bf00      	nop

08000730 <__aeabi_f2iz>:
 8000730:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000734:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000738:	d30f      	bcc.n	800075a <__aeabi_f2iz+0x2a>
 800073a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800073e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000742:	d90d      	bls.n	8000760 <__aeabi_f2iz+0x30>
 8000744:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000748:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000750:	fa23 f002 	lsr.w	r0, r3, r2
 8000754:	bf18      	it	ne
 8000756:	4240      	negne	r0, r0
 8000758:	4770      	bx	lr
 800075a:	f04f 0000 	mov.w	r0, #0
 800075e:	4770      	bx	lr
 8000760:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000764:	d101      	bne.n	800076a <__aeabi_f2iz+0x3a>
 8000766:	0242      	lsls	r2, r0, #9
 8000768:	d105      	bne.n	8000776 <__aeabi_f2iz+0x46>
 800076a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800076e:	bf08      	it	eq
 8000770:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000774:	4770      	bx	lr
 8000776:	f04f 0000 	mov.w	r0, #0
 800077a:	4770      	bx	lr

0800077c <__aeabi_uldivmod>:
 800077c:	b953      	cbnz	r3, 8000794 <__aeabi_uldivmod+0x18>
 800077e:	b94a      	cbnz	r2, 8000794 <__aeabi_uldivmod+0x18>
 8000780:	2900      	cmp	r1, #0
 8000782:	bf08      	it	eq
 8000784:	2800      	cmpeq	r0, #0
 8000786:	bf1c      	itt	ne
 8000788:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800078c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000790:	f000 bace 	b.w	8000d30 <__aeabi_idiv0>
 8000794:	f1ad 0c08 	sub.w	ip, sp, #8
 8000798:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800079c:	f000 f83a 	bl	8000814 <__udivmoddi4>
 80007a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a8:	b004      	add	sp, #16
 80007aa:	4770      	bx	lr

080007ac <__aeabi_f2lz>:
 80007ac:	b510      	push	{r4, lr}
 80007ae:	2100      	movs	r1, #0
 80007b0:	4604      	mov	r4, r0
 80007b2:	f7ff ff95 	bl	80006e0 <__aeabi_fcmplt>
 80007b6:	b920      	cbnz	r0, 80007c2 <__aeabi_f2lz+0x16>
 80007b8:	4620      	mov	r0, r4
 80007ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007be:	f000 b809 	b.w	80007d4 <__aeabi_f2ulz>
 80007c2:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80007c6:	f000 f805 	bl	80007d4 <__aeabi_f2ulz>
 80007ca:	4240      	negs	r0, r0
 80007cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007d0:	bd10      	pop	{r4, pc}
 80007d2:	bf00      	nop

080007d4 <__aeabi_f2ulz>:
 80007d4:	b5d0      	push	{r4, r6, r7, lr}
 80007d6:	f000 fc11 	bl	8000ffc <__aeabi_f2d>
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <__aeabi_f2ulz+0x38>)
 80007dc:	2200      	movs	r2, #0
 80007de:	4606      	mov	r6, r0
 80007e0:	460f      	mov	r7, r1
 80007e2:	f000 f97b 	bl	8000adc <__aeabi_dmul>
 80007e6:	f000 fc61 	bl	80010ac <__aeabi_d2uiz>
 80007ea:	4604      	mov	r4, r0
 80007ec:	f000 fbe4 	bl	8000fb8 <__aeabi_ui2d>
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <__aeabi_f2ulz+0x3c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f000 f972 	bl	8000adc <__aeabi_dmul>
 80007f8:	4602      	mov	r2, r0
 80007fa:	460b      	mov	r3, r1
 80007fc:	4630      	mov	r0, r6
 80007fe:	4639      	mov	r1, r7
 8000800:	f000 fa9c 	bl	8000d3c <__aeabi_dsub>
 8000804:	f000 fc52 	bl	80010ac <__aeabi_d2uiz>
 8000808:	4621      	mov	r1, r4
 800080a:	bdd0      	pop	{r4, r6, r7, pc}
 800080c:	3df00000 	.word	0x3df00000
 8000810:	41f00000 	.word	0x41f00000

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9e08      	ldr	r6, [sp, #32]
 800081a:	460d      	mov	r5, r1
 800081c:	4604      	mov	r4, r0
 800081e:	460f      	mov	r7, r1
 8000820:	2b00      	cmp	r3, #0
 8000822:	d14a      	bne.n	80008ba <__udivmoddi4+0xa6>
 8000824:	428a      	cmp	r2, r1
 8000826:	4694      	mov	ip, r2
 8000828:	d965      	bls.n	80008f6 <__udivmoddi4+0xe2>
 800082a:	fab2 f382 	clz	r3, r2
 800082e:	b143      	cbz	r3, 8000842 <__udivmoddi4+0x2e>
 8000830:	fa02 fc03 	lsl.w	ip, r2, r3
 8000834:	f1c3 0220 	rsb	r2, r3, #32
 8000838:	409f      	lsls	r7, r3
 800083a:	fa20 f202 	lsr.w	r2, r0, r2
 800083e:	4317      	orrs	r7, r2
 8000840:	409c      	lsls	r4, r3
 8000842:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000846:	fa1f f58c 	uxth.w	r5, ip
 800084a:	fbb7 f1fe 	udiv	r1, r7, lr
 800084e:	0c22      	lsrs	r2, r4, #16
 8000850:	fb0e 7711 	mls	r7, lr, r1, r7
 8000854:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000858:	fb01 f005 	mul.w	r0, r1, r5
 800085c:	4290      	cmp	r0, r2
 800085e:	d90a      	bls.n	8000876 <__udivmoddi4+0x62>
 8000860:	eb1c 0202 	adds.w	r2, ip, r2
 8000864:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000868:	f080 811b 	bcs.w	8000aa2 <__udivmoddi4+0x28e>
 800086c:	4290      	cmp	r0, r2
 800086e:	f240 8118 	bls.w	8000aa2 <__udivmoddi4+0x28e>
 8000872:	3902      	subs	r1, #2
 8000874:	4462      	add	r2, ip
 8000876:	1a12      	subs	r2, r2, r0
 8000878:	b2a4      	uxth	r4, r4
 800087a:	fbb2 f0fe 	udiv	r0, r2, lr
 800087e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000882:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000886:	fb00 f505 	mul.w	r5, r0, r5
 800088a:	42a5      	cmp	r5, r4
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x90>
 800088e:	eb1c 0404 	adds.w	r4, ip, r4
 8000892:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000896:	f080 8106 	bcs.w	8000aa6 <__udivmoddi4+0x292>
 800089a:	42a5      	cmp	r5, r4
 800089c:	f240 8103 	bls.w	8000aa6 <__udivmoddi4+0x292>
 80008a0:	4464      	add	r4, ip
 80008a2:	3802      	subs	r0, #2
 80008a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	2100      	movs	r1, #0
 80008ac:	b11e      	cbz	r6, 80008b6 <__udivmoddi4+0xa2>
 80008ae:	40dc      	lsrs	r4, r3
 80008b0:	2300      	movs	r3, #0
 80008b2:	e9c6 4300 	strd	r4, r3, [r6]
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d908      	bls.n	80008d0 <__udivmoddi4+0xbc>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	f000 80ec 	beq.w	8000a9c <__udivmoddi4+0x288>
 80008c4:	2100      	movs	r1, #0
 80008c6:	e9c6 0500 	strd	r0, r5, [r6]
 80008ca:	4608      	mov	r0, r1
 80008cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d0:	fab3 f183 	clz	r1, r3
 80008d4:	2900      	cmp	r1, #0
 80008d6:	d149      	bne.n	800096c <__udivmoddi4+0x158>
 80008d8:	42ab      	cmp	r3, r5
 80008da:	d302      	bcc.n	80008e2 <__udivmoddi4+0xce>
 80008dc:	4282      	cmp	r2, r0
 80008de:	f200 80f7 	bhi.w	8000ad0 <__udivmoddi4+0x2bc>
 80008e2:	1a84      	subs	r4, r0, r2
 80008e4:	eb65 0203 	sbc.w	r2, r5, r3
 80008e8:	2001      	movs	r0, #1
 80008ea:	4617      	mov	r7, r2
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d0e2      	beq.n	80008b6 <__udivmoddi4+0xa2>
 80008f0:	e9c6 4700 	strd	r4, r7, [r6]
 80008f4:	e7df      	b.n	80008b6 <__udivmoddi4+0xa2>
 80008f6:	b902      	cbnz	r2, 80008fa <__udivmoddi4+0xe6>
 80008f8:	deff      	udf	#255	; 0xff
 80008fa:	fab2 f382 	clz	r3, r2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f040 808f 	bne.w	8000a22 <__udivmoddi4+0x20e>
 8000904:	1a8a      	subs	r2, r1, r2
 8000906:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090a:	fa1f fe8c 	uxth.w	lr, ip
 800090e:	2101      	movs	r1, #1
 8000910:	fbb2 f5f7 	udiv	r5, r2, r7
 8000914:	fb07 2015 	mls	r0, r7, r5, r2
 8000918:	0c22      	lsrs	r2, r4, #16
 800091a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800091e:	fb0e f005 	mul.w	r0, lr, r5
 8000922:	4290      	cmp	r0, r2
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x124>
 8000926:	eb1c 0202 	adds.w	r2, ip, r2
 800092a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800092e:	d202      	bcs.n	8000936 <__udivmoddi4+0x122>
 8000930:	4290      	cmp	r0, r2
 8000932:	f200 80ca 	bhi.w	8000aca <__udivmoddi4+0x2b6>
 8000936:	4645      	mov	r5, r8
 8000938:	1a12      	subs	r2, r2, r0
 800093a:	b2a4      	uxth	r4, r4
 800093c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000940:	fb07 2210 	mls	r2, r7, r0, r2
 8000944:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000948:	fb0e fe00 	mul.w	lr, lr, r0
 800094c:	45a6      	cmp	lr, r4
 800094e:	d908      	bls.n	8000962 <__udivmoddi4+0x14e>
 8000950:	eb1c 0404 	adds.w	r4, ip, r4
 8000954:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000958:	d202      	bcs.n	8000960 <__udivmoddi4+0x14c>
 800095a:	45a6      	cmp	lr, r4
 800095c:	f200 80ba 	bhi.w	8000ad4 <__udivmoddi4+0x2c0>
 8000960:	4610      	mov	r0, r2
 8000962:	eba4 040e 	sub.w	r4, r4, lr
 8000966:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800096a:	e79f      	b.n	80008ac <__udivmoddi4+0x98>
 800096c:	f1c1 0720 	rsb	r7, r1, #32
 8000970:	408b      	lsls	r3, r1
 8000972:	fa22 fc07 	lsr.w	ip, r2, r7
 8000976:	ea4c 0c03 	orr.w	ip, ip, r3
 800097a:	fa05 f401 	lsl.w	r4, r5, r1
 800097e:	fa20 f307 	lsr.w	r3, r0, r7
 8000982:	40fd      	lsrs	r5, r7
 8000984:	4323      	orrs	r3, r4
 8000986:	fa00 f901 	lsl.w	r9, r0, r1
 800098a:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800098e:	fa1f fe8c 	uxth.w	lr, ip
 8000992:	fbb5 f8f0 	udiv	r8, r5, r0
 8000996:	0c1c      	lsrs	r4, r3, #16
 8000998:	fb00 5518 	mls	r5, r0, r8, r5
 800099c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009a0:	fb08 f50e 	mul.w	r5, r8, lr
 80009a4:	42a5      	cmp	r5, r4
 80009a6:	fa02 f201 	lsl.w	r2, r2, r1
 80009aa:	d90b      	bls.n	80009c4 <__udivmoddi4+0x1b0>
 80009ac:	eb1c 0404 	adds.w	r4, ip, r4
 80009b0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80009b4:	f080 8087 	bcs.w	8000ac6 <__udivmoddi4+0x2b2>
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	f240 8084 	bls.w	8000ac6 <__udivmoddi4+0x2b2>
 80009be:	f1a8 0802 	sub.w	r8, r8, #2
 80009c2:	4464      	add	r4, ip
 80009c4:	1b64      	subs	r4, r4, r5
 80009c6:	b29d      	uxth	r5, r3
 80009c8:	fbb4 f3f0 	udiv	r3, r4, r0
 80009cc:	fb00 4413 	mls	r4, r0, r3, r4
 80009d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009d8:	45a6      	cmp	lr, r4
 80009da:	d908      	bls.n	80009ee <__udivmoddi4+0x1da>
 80009dc:	eb1c 0404 	adds.w	r4, ip, r4
 80009e0:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80009e4:	d26b      	bcs.n	8000abe <__udivmoddi4+0x2aa>
 80009e6:	45a6      	cmp	lr, r4
 80009e8:	d969      	bls.n	8000abe <__udivmoddi4+0x2aa>
 80009ea:	3b02      	subs	r3, #2
 80009ec:	4464      	add	r4, ip
 80009ee:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80009f2:	fba0 8302 	umull	r8, r3, r0, r2
 80009f6:	eba4 040e 	sub.w	r4, r4, lr
 80009fa:	429c      	cmp	r4, r3
 80009fc:	46c6      	mov	lr, r8
 80009fe:	461d      	mov	r5, r3
 8000a00:	d355      	bcc.n	8000aae <__udivmoddi4+0x29a>
 8000a02:	d052      	beq.n	8000aaa <__udivmoddi4+0x296>
 8000a04:	b156      	cbz	r6, 8000a1c <__udivmoddi4+0x208>
 8000a06:	ebb9 030e 	subs.w	r3, r9, lr
 8000a0a:	eb64 0405 	sbc.w	r4, r4, r5
 8000a0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a12:	40cb      	lsrs	r3, r1
 8000a14:	40cc      	lsrs	r4, r1
 8000a16:	431f      	orrs	r7, r3
 8000a18:	e9c6 7400 	strd	r7, r4, [r6]
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a22:	f1c3 0120 	rsb	r1, r3, #32
 8000a26:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a2a:	fa20 f201 	lsr.w	r2, r0, r1
 8000a2e:	fa25 f101 	lsr.w	r1, r5, r1
 8000a32:	409d      	lsls	r5, r3
 8000a34:	432a      	orrs	r2, r5
 8000a36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3a:	fa1f fe8c 	uxth.w	lr, ip
 8000a3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a42:	fb07 1510 	mls	r5, r7, r0, r1
 8000a46:	0c11      	lsrs	r1, r2, #16
 8000a48:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a4c:	fb00 f50e 	mul.w	r5, r0, lr
 8000a50:	428d      	cmp	r5, r1
 8000a52:	fa04 f403 	lsl.w	r4, r4, r3
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x256>
 8000a58:	eb1c 0101 	adds.w	r1, ip, r1
 8000a5c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a60:	d22f      	bcs.n	8000ac2 <__udivmoddi4+0x2ae>
 8000a62:	428d      	cmp	r5, r1
 8000a64:	d92d      	bls.n	8000ac2 <__udivmoddi4+0x2ae>
 8000a66:	3802      	subs	r0, #2
 8000a68:	4461      	add	r1, ip
 8000a6a:	1b49      	subs	r1, r1, r5
 8000a6c:	b292      	uxth	r2, r2
 8000a6e:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a72:	fb07 1115 	mls	r1, r7, r5, r1
 8000a76:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a7a:	fb05 f10e 	mul.w	r1, r5, lr
 8000a7e:	4291      	cmp	r1, r2
 8000a80:	d908      	bls.n	8000a94 <__udivmoddi4+0x280>
 8000a82:	eb1c 0202 	adds.w	r2, ip, r2
 8000a86:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a8a:	d216      	bcs.n	8000aba <__udivmoddi4+0x2a6>
 8000a8c:	4291      	cmp	r1, r2
 8000a8e:	d914      	bls.n	8000aba <__udivmoddi4+0x2a6>
 8000a90:	3d02      	subs	r5, #2
 8000a92:	4462      	add	r2, ip
 8000a94:	1a52      	subs	r2, r2, r1
 8000a96:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a9a:	e739      	b.n	8000910 <__udivmoddi4+0xfc>
 8000a9c:	4631      	mov	r1, r6
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xa2>
 8000aa2:	4639      	mov	r1, r7
 8000aa4:	e6e7      	b.n	8000876 <__udivmoddi4+0x62>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	e6fc      	b.n	80008a4 <__udivmoddi4+0x90>
 8000aaa:	45c1      	cmp	r9, r8
 8000aac:	d2aa      	bcs.n	8000a04 <__udivmoddi4+0x1f0>
 8000aae:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ab2:	eb63 050c 	sbc.w	r5, r3, ip
 8000ab6:	3801      	subs	r0, #1
 8000ab8:	e7a4      	b.n	8000a04 <__udivmoddi4+0x1f0>
 8000aba:	4645      	mov	r5, r8
 8000abc:	e7ea      	b.n	8000a94 <__udivmoddi4+0x280>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	e795      	b.n	80009ee <__udivmoddi4+0x1da>
 8000ac2:	4640      	mov	r0, r8
 8000ac4:	e7d1      	b.n	8000a6a <__udivmoddi4+0x256>
 8000ac6:	46d0      	mov	r8, sl
 8000ac8:	e77c      	b.n	80009c4 <__udivmoddi4+0x1b0>
 8000aca:	3d02      	subs	r5, #2
 8000acc:	4462      	add	r2, ip
 8000ace:	e733      	b.n	8000938 <__udivmoddi4+0x124>
 8000ad0:	4608      	mov	r0, r1
 8000ad2:	e70b      	b.n	80008ec <__udivmoddi4+0xd8>
 8000ad4:	4464      	add	r4, ip
 8000ad6:	3802      	subs	r0, #2
 8000ad8:	e743      	b.n	8000962 <__udivmoddi4+0x14e>
 8000ada:	bf00      	nop

08000adc <__aeabi_dmul>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ae2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ae6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000aea:	bf1d      	ittte	ne
 8000aec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000af0:	ea94 0f0c 	teqne	r4, ip
 8000af4:	ea95 0f0c 	teqne	r5, ip
 8000af8:	f000 f8de 	bleq	8000cb8 <__aeabi_dmul+0x1dc>
 8000afc:	442c      	add	r4, r5
 8000afe:	ea81 0603 	eor.w	r6, r1, r3
 8000b02:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000b06:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000b0a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000b0e:	bf18      	it	ne
 8000b10:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000b14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b1c:	d038      	beq.n	8000b90 <__aeabi_dmul+0xb4>
 8000b1e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000b22:	f04f 0500 	mov.w	r5, #0
 8000b26:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000b2a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000b2e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000b32:	f04f 0600 	mov.w	r6, #0
 8000b36:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000b3a:	f09c 0f00 	teq	ip, #0
 8000b3e:	bf18      	it	ne
 8000b40:	f04e 0e01 	orrne.w	lr, lr, #1
 8000b44:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000b48:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000b4c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000b50:	d204      	bcs.n	8000b5c <__aeabi_dmul+0x80>
 8000b52:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000b56:	416d      	adcs	r5, r5
 8000b58:	eb46 0606 	adc.w	r6, r6, r6
 8000b5c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000b60:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000b64:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000b68:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000b6c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000b70:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b74:	bf88      	it	hi
 8000b76:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000b7a:	d81e      	bhi.n	8000bba <__aeabi_dmul+0xde>
 8000b7c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000b80:	bf08      	it	eq
 8000b82:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000b86:	f150 0000 	adcs.w	r0, r0, #0
 8000b8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
 8000b90:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000b94:	ea46 0101 	orr.w	r1, r6, r1
 8000b98:	ea40 0002 	orr.w	r0, r0, r2
 8000b9c:	ea81 0103 	eor.w	r1, r1, r3
 8000ba0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000ba4:	bfc2      	ittt	gt
 8000ba6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000baa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000bae:	bd70      	popgt	{r4, r5, r6, pc}
 8000bb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb4:	f04f 0e00 	mov.w	lr, #0
 8000bb8:	3c01      	subs	r4, #1
 8000bba:	f300 80ab 	bgt.w	8000d14 <__aeabi_dmul+0x238>
 8000bbe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000bc2:	bfde      	ittt	le
 8000bc4:	2000      	movle	r0, #0
 8000bc6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000bca:	bd70      	pople	{r4, r5, r6, pc}
 8000bcc:	f1c4 0400 	rsb	r4, r4, #0
 8000bd0:	3c20      	subs	r4, #32
 8000bd2:	da35      	bge.n	8000c40 <__aeabi_dmul+0x164>
 8000bd4:	340c      	adds	r4, #12
 8000bd6:	dc1b      	bgt.n	8000c10 <__aeabi_dmul+0x134>
 8000bd8:	f104 0414 	add.w	r4, r4, #20
 8000bdc:	f1c4 0520 	rsb	r5, r4, #32
 8000be0:	fa00 f305 	lsl.w	r3, r0, r5
 8000be4:	fa20 f004 	lsr.w	r0, r0, r4
 8000be8:	fa01 f205 	lsl.w	r2, r1, r5
 8000bec:	ea40 0002 	orr.w	r0, r0, r2
 8000bf0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000bf4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000bf8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000bfc:	fa21 f604 	lsr.w	r6, r1, r4
 8000c00:	eb42 0106 	adc.w	r1, r2, r6
 8000c04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c08:	bf08      	it	eq
 8000c0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c0e:	bd70      	pop	{r4, r5, r6, pc}
 8000c10:	f1c4 040c 	rsb	r4, r4, #12
 8000c14:	f1c4 0520 	rsb	r5, r4, #32
 8000c18:	fa00 f304 	lsl.w	r3, r0, r4
 8000c1c:	fa20 f005 	lsr.w	r0, r0, r5
 8000c20:	fa01 f204 	lsl.w	r2, r1, r4
 8000c24:	ea40 0002 	orr.w	r0, r0, r2
 8000c28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000c30:	f141 0100 	adc.w	r1, r1, #0
 8000c34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c38:	bf08      	it	eq
 8000c3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c3e:	bd70      	pop	{r4, r5, r6, pc}
 8000c40:	f1c4 0520 	rsb	r5, r4, #32
 8000c44:	fa00 f205 	lsl.w	r2, r0, r5
 8000c48:	ea4e 0e02 	orr.w	lr, lr, r2
 8000c4c:	fa20 f304 	lsr.w	r3, r0, r4
 8000c50:	fa01 f205 	lsl.w	r2, r1, r5
 8000c54:	ea43 0302 	orr.w	r3, r3, r2
 8000c58:	fa21 f004 	lsr.w	r0, r1, r4
 8000c5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c60:	fa21 f204 	lsr.w	r2, r1, r4
 8000c64:	ea20 0002 	bic.w	r0, r0, r2
 8000c68:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000c6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c70:	bf08      	it	eq
 8000c72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c76:	bd70      	pop	{r4, r5, r6, pc}
 8000c78:	f094 0f00 	teq	r4, #0
 8000c7c:	d10f      	bne.n	8000c9e <__aeabi_dmul+0x1c2>
 8000c7e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000c82:	0040      	lsls	r0, r0, #1
 8000c84:	eb41 0101 	adc.w	r1, r1, r1
 8000c88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c8c:	bf08      	it	eq
 8000c8e:	3c01      	subeq	r4, #1
 8000c90:	d0f7      	beq.n	8000c82 <__aeabi_dmul+0x1a6>
 8000c92:	ea41 0106 	orr.w	r1, r1, r6
 8000c96:	f095 0f00 	teq	r5, #0
 8000c9a:	bf18      	it	ne
 8000c9c:	4770      	bxne	lr
 8000c9e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000ca2:	0052      	lsls	r2, r2, #1
 8000ca4:	eb43 0303 	adc.w	r3, r3, r3
 8000ca8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000cac:	bf08      	it	eq
 8000cae:	3d01      	subeq	r5, #1
 8000cb0:	d0f7      	beq.n	8000ca2 <__aeabi_dmul+0x1c6>
 8000cb2:	ea43 0306 	orr.w	r3, r3, r6
 8000cb6:	4770      	bx	lr
 8000cb8:	ea94 0f0c 	teq	r4, ip
 8000cbc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000cc0:	bf18      	it	ne
 8000cc2:	ea95 0f0c 	teqne	r5, ip
 8000cc6:	d00c      	beq.n	8000ce2 <__aeabi_dmul+0x206>
 8000cc8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ccc:	bf18      	it	ne
 8000cce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000cd2:	d1d1      	bne.n	8000c78 <__aeabi_dmul+0x19c>
 8000cd4:	ea81 0103 	eor.w	r1, r1, r3
 8000cd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000cdc:	f04f 0000 	mov.w	r0, #0
 8000ce0:	bd70      	pop	{r4, r5, r6, pc}
 8000ce2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ce6:	bf06      	itte	eq
 8000ce8:	4610      	moveq	r0, r2
 8000cea:	4619      	moveq	r1, r3
 8000cec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000cf0:	d019      	beq.n	8000d26 <__aeabi_dmul+0x24a>
 8000cf2:	ea94 0f0c 	teq	r4, ip
 8000cf6:	d102      	bne.n	8000cfe <__aeabi_dmul+0x222>
 8000cf8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000cfc:	d113      	bne.n	8000d26 <__aeabi_dmul+0x24a>
 8000cfe:	ea95 0f0c 	teq	r5, ip
 8000d02:	d105      	bne.n	8000d10 <__aeabi_dmul+0x234>
 8000d04:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000d08:	bf1c      	itt	ne
 8000d0a:	4610      	movne	r0, r2
 8000d0c:	4619      	movne	r1, r3
 8000d0e:	d10a      	bne.n	8000d26 <__aeabi_dmul+0x24a>
 8000d10:	ea81 0103 	eor.w	r1, r1, r3
 8000d14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000d18:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000d1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000d20:	f04f 0000 	mov.w	r0, #0
 8000d24:	bd70      	pop	{r4, r5, r6, pc}
 8000d26:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000d2a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}

08000d30 <__aeabi_idiv0>:
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <__aeabi_drsub>:
 8000d34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000d38:	e002      	b.n	8000d40 <__adddf3>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_dsub>:
 8000d3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000d40 <__adddf3>:
 8000d40:	b530      	push	{r4, r5, lr}
 8000d42:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000d46:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000d4a:	ea94 0f05 	teq	r4, r5
 8000d4e:	bf08      	it	eq
 8000d50:	ea90 0f02 	teqeq	r0, r2
 8000d54:	bf1f      	itttt	ne
 8000d56:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000d5a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000d5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000d62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000d66:	f000 80e2 	beq.w	8000f2e <__adddf3+0x1ee>
 8000d6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000d6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000d72:	bfb8      	it	lt
 8000d74:	426d      	neglt	r5, r5
 8000d76:	dd0c      	ble.n	8000d92 <__adddf3+0x52>
 8000d78:	442c      	add	r4, r5
 8000d7a:	ea80 0202 	eor.w	r2, r0, r2
 8000d7e:	ea81 0303 	eor.w	r3, r1, r3
 8000d82:	ea82 0000 	eor.w	r0, r2, r0
 8000d86:	ea83 0101 	eor.w	r1, r3, r1
 8000d8a:	ea80 0202 	eor.w	r2, r0, r2
 8000d8e:	ea81 0303 	eor.w	r3, r1, r3
 8000d92:	2d36      	cmp	r5, #54	; 0x36
 8000d94:	bf88      	it	hi
 8000d96:	bd30      	pophi	{r4, r5, pc}
 8000d98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000da0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000da4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000da8:	d002      	beq.n	8000db0 <__adddf3+0x70>
 8000daa:	4240      	negs	r0, r0
 8000dac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000db4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000db8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000dbc:	d002      	beq.n	8000dc4 <__adddf3+0x84>
 8000dbe:	4252      	negs	r2, r2
 8000dc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dc4:	ea94 0f05 	teq	r4, r5
 8000dc8:	f000 80a7 	beq.w	8000f1a <__adddf3+0x1da>
 8000dcc:	f1a4 0401 	sub.w	r4, r4, #1
 8000dd0:	f1d5 0e20 	rsbs	lr, r5, #32
 8000dd4:	db0d      	blt.n	8000df2 <__adddf3+0xb2>
 8000dd6:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000dda:	fa22 f205 	lsr.w	r2, r2, r5
 8000dde:	1880      	adds	r0, r0, r2
 8000de0:	f141 0100 	adc.w	r1, r1, #0
 8000de4:	fa03 f20e 	lsl.w	r2, r3, lr
 8000de8:	1880      	adds	r0, r0, r2
 8000dea:	fa43 f305 	asr.w	r3, r3, r5
 8000dee:	4159      	adcs	r1, r3
 8000df0:	e00e      	b.n	8000e10 <__adddf3+0xd0>
 8000df2:	f1a5 0520 	sub.w	r5, r5, #32
 8000df6:	f10e 0e20 	add.w	lr, lr, #32
 8000dfa:	2a01      	cmp	r2, #1
 8000dfc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000e00:	bf28      	it	cs
 8000e02:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000e06:	fa43 f305 	asr.w	r3, r3, r5
 8000e0a:	18c0      	adds	r0, r0, r3
 8000e0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000e10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000e14:	d507      	bpl.n	8000e26 <__adddf3+0xe6>
 8000e16:	f04f 0e00 	mov.w	lr, #0
 8000e1a:	f1dc 0c00 	rsbs	ip, ip, #0
 8000e1e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000e22:	eb6e 0101 	sbc.w	r1, lr, r1
 8000e26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000e2a:	d31b      	bcc.n	8000e64 <__adddf3+0x124>
 8000e2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000e30:	d30c      	bcc.n	8000e4c <__adddf3+0x10c>
 8000e32:	0849      	lsrs	r1, r1, #1
 8000e34:	ea5f 0030 	movs.w	r0, r0, rrx
 8000e38:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000e3c:	f104 0401 	add.w	r4, r4, #1
 8000e40:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000e44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000e48:	f080 809a 	bcs.w	8000f80 <__adddf3+0x240>
 8000e4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e50:	bf08      	it	eq
 8000e52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000e56:	f150 0000 	adcs.w	r0, r0, #0
 8000e5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000e5e:	ea41 0105 	orr.w	r1, r1, r5
 8000e62:	bd30      	pop	{r4, r5, pc}
 8000e64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000e68:	4140      	adcs	r0, r0
 8000e6a:	eb41 0101 	adc.w	r1, r1, r1
 8000e6e:	3c01      	subs	r4, #1
 8000e70:	bf28      	it	cs
 8000e72:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000e76:	d2e9      	bcs.n	8000e4c <__adddf3+0x10c>
 8000e78:	f091 0f00 	teq	r1, #0
 8000e7c:	bf04      	itt	eq
 8000e7e:	4601      	moveq	r1, r0
 8000e80:	2000      	moveq	r0, #0
 8000e82:	fab1 f381 	clz	r3, r1
 8000e86:	bf08      	it	eq
 8000e88:	3320      	addeq	r3, #32
 8000e8a:	f1a3 030b 	sub.w	r3, r3, #11
 8000e8e:	f1b3 0220 	subs.w	r2, r3, #32
 8000e92:	da0c      	bge.n	8000eae <__adddf3+0x16e>
 8000e94:	320c      	adds	r2, #12
 8000e96:	dd08      	ble.n	8000eaa <__adddf3+0x16a>
 8000e98:	f102 0c14 	add.w	ip, r2, #20
 8000e9c:	f1c2 020c 	rsb	r2, r2, #12
 8000ea0:	fa01 f00c 	lsl.w	r0, r1, ip
 8000ea4:	fa21 f102 	lsr.w	r1, r1, r2
 8000ea8:	e00c      	b.n	8000ec4 <__adddf3+0x184>
 8000eaa:	f102 0214 	add.w	r2, r2, #20
 8000eae:	bfd8      	it	le
 8000eb0:	f1c2 0c20 	rsble	ip, r2, #32
 8000eb4:	fa01 f102 	lsl.w	r1, r1, r2
 8000eb8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ebc:	bfdc      	itt	le
 8000ebe:	ea41 010c 	orrle.w	r1, r1, ip
 8000ec2:	4090      	lslle	r0, r2
 8000ec4:	1ae4      	subs	r4, r4, r3
 8000ec6:	bfa2      	ittt	ge
 8000ec8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000ecc:	4329      	orrge	r1, r5
 8000ece:	bd30      	popge	{r4, r5, pc}
 8000ed0:	ea6f 0404 	mvn.w	r4, r4
 8000ed4:	3c1f      	subs	r4, #31
 8000ed6:	da1c      	bge.n	8000f12 <__adddf3+0x1d2>
 8000ed8:	340c      	adds	r4, #12
 8000eda:	dc0e      	bgt.n	8000efa <__adddf3+0x1ba>
 8000edc:	f104 0414 	add.w	r4, r4, #20
 8000ee0:	f1c4 0220 	rsb	r2, r4, #32
 8000ee4:	fa20 f004 	lsr.w	r0, r0, r4
 8000ee8:	fa01 f302 	lsl.w	r3, r1, r2
 8000eec:	ea40 0003 	orr.w	r0, r0, r3
 8000ef0:	fa21 f304 	lsr.w	r3, r1, r4
 8000ef4:	ea45 0103 	orr.w	r1, r5, r3
 8000ef8:	bd30      	pop	{r4, r5, pc}
 8000efa:	f1c4 040c 	rsb	r4, r4, #12
 8000efe:	f1c4 0220 	rsb	r2, r4, #32
 8000f02:	fa20 f002 	lsr.w	r0, r0, r2
 8000f06:	fa01 f304 	lsl.w	r3, r1, r4
 8000f0a:	ea40 0003 	orr.w	r0, r0, r3
 8000f0e:	4629      	mov	r1, r5
 8000f10:	bd30      	pop	{r4, r5, pc}
 8000f12:	fa21 f004 	lsr.w	r0, r1, r4
 8000f16:	4629      	mov	r1, r5
 8000f18:	bd30      	pop	{r4, r5, pc}
 8000f1a:	f094 0f00 	teq	r4, #0
 8000f1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000f22:	bf06      	itte	eq
 8000f24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000f28:	3401      	addeq	r4, #1
 8000f2a:	3d01      	subne	r5, #1
 8000f2c:	e74e      	b.n	8000dcc <__adddf3+0x8c>
 8000f2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000f32:	bf18      	it	ne
 8000f34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000f38:	d029      	beq.n	8000f8e <__adddf3+0x24e>
 8000f3a:	ea94 0f05 	teq	r4, r5
 8000f3e:	bf08      	it	eq
 8000f40:	ea90 0f02 	teqeq	r0, r2
 8000f44:	d005      	beq.n	8000f52 <__adddf3+0x212>
 8000f46:	ea54 0c00 	orrs.w	ip, r4, r0
 8000f4a:	bf04      	itt	eq
 8000f4c:	4619      	moveq	r1, r3
 8000f4e:	4610      	moveq	r0, r2
 8000f50:	bd30      	pop	{r4, r5, pc}
 8000f52:	ea91 0f03 	teq	r1, r3
 8000f56:	bf1e      	ittt	ne
 8000f58:	2100      	movne	r1, #0
 8000f5a:	2000      	movne	r0, #0
 8000f5c:	bd30      	popne	{r4, r5, pc}
 8000f5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000f62:	d105      	bne.n	8000f70 <__adddf3+0x230>
 8000f64:	0040      	lsls	r0, r0, #1
 8000f66:	4149      	adcs	r1, r1
 8000f68:	bf28      	it	cs
 8000f6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000f6e:	bd30      	pop	{r4, r5, pc}
 8000f70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000f74:	bf3c      	itt	cc
 8000f76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000f7a:	bd30      	popcc	{r4, r5, pc}
 8000f7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000f80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000f84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000f88:	f04f 0000 	mov.w	r0, #0
 8000f8c:	bd30      	pop	{r4, r5, pc}
 8000f8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000f92:	bf1a      	itte	ne
 8000f94:	4619      	movne	r1, r3
 8000f96:	4610      	movne	r0, r2
 8000f98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000f9c:	bf1c      	itt	ne
 8000f9e:	460b      	movne	r3, r1
 8000fa0:	4602      	movne	r2, r0
 8000fa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000fa6:	bf06      	itte	eq
 8000fa8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000fac:	ea91 0f03 	teqeq	r1, r3
 8000fb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000fb4:	bd30      	pop	{r4, r5, pc}
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_ui2d>:
 8000fb8:	f090 0f00 	teq	r0, #0
 8000fbc:	bf04      	itt	eq
 8000fbe:	2100      	moveq	r1, #0
 8000fc0:	4770      	bxeq	lr
 8000fc2:	b530      	push	{r4, r5, lr}
 8000fc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000fc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000fcc:	f04f 0500 	mov.w	r5, #0
 8000fd0:	f04f 0100 	mov.w	r1, #0
 8000fd4:	e750      	b.n	8000e78 <__adddf3+0x138>
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_i2d>:
 8000fd8:	f090 0f00 	teq	r0, #0
 8000fdc:	bf04      	itt	eq
 8000fde:	2100      	moveq	r1, #0
 8000fe0:	4770      	bxeq	lr
 8000fe2:	b530      	push	{r4, r5, lr}
 8000fe4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000fe8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000fec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000ff0:	bf48      	it	mi
 8000ff2:	4240      	negmi	r0, r0
 8000ff4:	f04f 0100 	mov.w	r1, #0
 8000ff8:	e73e      	b.n	8000e78 <__adddf3+0x138>
 8000ffa:	bf00      	nop

08000ffc <__aeabi_f2d>:
 8000ffc:	0042      	lsls	r2, r0, #1
 8000ffe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8001002:	ea4f 0131 	mov.w	r1, r1, rrx
 8001006:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800100a:	bf1f      	itttt	ne
 800100c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8001010:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8001014:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8001018:	4770      	bxne	lr
 800101a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800101e:	bf08      	it	eq
 8001020:	4770      	bxeq	lr
 8001022:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8001026:	bf04      	itt	eq
 8001028:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800102c:	4770      	bxeq	lr
 800102e:	b530      	push	{r4, r5, lr}
 8001030:	f44f 7460 	mov.w	r4, #896	; 0x380
 8001034:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001038:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800103c:	e71c      	b.n	8000e78 <__adddf3+0x138>
 800103e:	bf00      	nop

08001040 <__aeabi_ul2d>:
 8001040:	ea50 0201 	orrs.w	r2, r0, r1
 8001044:	bf08      	it	eq
 8001046:	4770      	bxeq	lr
 8001048:	b530      	push	{r4, r5, lr}
 800104a:	f04f 0500 	mov.w	r5, #0
 800104e:	e00a      	b.n	8001066 <__aeabi_l2d+0x16>

08001050 <__aeabi_l2d>:
 8001050:	ea50 0201 	orrs.w	r2, r0, r1
 8001054:	bf08      	it	eq
 8001056:	4770      	bxeq	lr
 8001058:	b530      	push	{r4, r5, lr}
 800105a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800105e:	d502      	bpl.n	8001066 <__aeabi_l2d+0x16>
 8001060:	4240      	negs	r0, r0
 8001062:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001066:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800106a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800106e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8001072:	f43f aed8 	beq.w	8000e26 <__adddf3+0xe6>
 8001076:	f04f 0203 	mov.w	r2, #3
 800107a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800107e:	bf18      	it	ne
 8001080:	3203      	addne	r2, #3
 8001082:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001086:	bf18      	it	ne
 8001088:	3203      	addne	r2, #3
 800108a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800108e:	f1c2 0320 	rsb	r3, r2, #32
 8001092:	fa00 fc03 	lsl.w	ip, r0, r3
 8001096:	fa20 f002 	lsr.w	r0, r0, r2
 800109a:	fa01 fe03 	lsl.w	lr, r1, r3
 800109e:	ea40 000e 	orr.w	r0, r0, lr
 80010a2:	fa21 f102 	lsr.w	r1, r1, r2
 80010a6:	4414      	add	r4, r2
 80010a8:	e6bd      	b.n	8000e26 <__adddf3+0xe6>
 80010aa:	bf00      	nop

080010ac <__aeabi_d2uiz>:
 80010ac:	004a      	lsls	r2, r1, #1
 80010ae:	d211      	bcs.n	80010d4 <__aeabi_d2uiz+0x28>
 80010b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80010b4:	d211      	bcs.n	80010da <__aeabi_d2uiz+0x2e>
 80010b6:	d50d      	bpl.n	80010d4 <__aeabi_d2uiz+0x28>
 80010b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80010bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80010c0:	d40e      	bmi.n	80010e0 <__aeabi_d2uiz+0x34>
 80010c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80010c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80010ce:	fa23 f002 	lsr.w	r0, r3, r2
 80010d2:	4770      	bx	lr
 80010d4:	f04f 0000 	mov.w	r0, #0
 80010d8:	4770      	bx	lr
 80010da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80010de:	d102      	bne.n	80010e6 <__aeabi_d2uiz+0x3a>
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0000 	mov.w	r0, #0
 80010ea:	4770      	bx	lr

080010ec <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80010ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80010ee:	481a      	ldr	r0, [pc, #104]	; (8001158 <MX_ADC_Init+0x6c>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80010f0:	4a1a      	ldr	r2, [pc, #104]	; (800115c <MX_ADC_Init+0x70>)
 80010f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  ADC_ChannelConfTypeDef sConfig = {0};
 80010f6:	2400      	movs	r4, #0
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80010f8:	e9c0 2300 	strd	r2, r3, [r0]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fc:	2304      	movs	r3, #4
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.NbrOfConversion = 1;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 80010fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001102:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001106:	6143      	str	r3, [r0, #20]
  hadc.Init.DMAContinuousRequests = ENABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 8001108:	2202      	movs	r2, #2
  hadc.Init.NbrOfConversion = 1;
 800110a:	2301      	movs	r3, #1
  hadc.Init.LowPowerAutoWait = DISABLE;
 800110c:	8304      	strh	r4, [r0, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800110e:	e9cd 4401 	strd	r4, r4, [sp, #4]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001112:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_3CYCLES_5;
 8001116:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 800111a:	9403      	str	r4, [sp, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800111c:	6104      	str	r4, [r0, #16]
  hadc.Init.ContinuousConvMode = DISABLE;
 800111e:	7684      	strb	r4, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8001120:	61c3      	str	r3, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001122:	f880 4020 	strb.w	r4, [r0, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001126:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800112a:	6304      	str	r4, [r0, #48]	; 0x30
  hadc.Init.OversamplingMode = DISABLE;
 800112c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001130:	64c4      	str	r4, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001132:	f002 f907 	bl	8003344 <HAL_ADC_Init>
 8001136:	b108      	cbz	r0, 800113c <MX_ADC_Init+0x50>
  {
    Error_Handler();
 8001138:	f001 fdc4 	bl	8002cc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_ADC_Init+0x74>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <MX_ADC_Init+0x6c>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001140:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001142:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001144:	e9cd 3401 	strd	r3, r4, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001148:	f002 fa4c 	bl	80035e4 <HAL_ADC_ConfigChannel>
 800114c:	b108      	cbz	r0, 8001152 <MX_ADC_Init+0x66>
  {
    Error_Handler();
 800114e:	f001 fdb9 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001152:	b004      	add	sp, #16
 8001154:	bd10      	pop	{r4, pc}
 8001156:	bf00      	nop
 8001158:	20000f88 	.word	0x20000f88
 800115c:	40012400 	.word	0x40012400
 8001160:	20000100 	.word	0x20000100

08001164 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001164:	b570      	push	{r4, r5, r6, lr}
 8001166:	b096      	sub	sp, #88	; 0x58
 8001168:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	2214      	movs	r2, #20
 800116c:	2100      	movs	r1, #0
 800116e:	a803      	add	r0, sp, #12
 8001170:	f00b fac2 	bl	800c6f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	2238      	movs	r2, #56	; 0x38
 8001176:	2100      	movs	r1, #0
 8001178:	a808      	add	r0, sp, #32
 800117a:	f00b fabd 	bl	800c6f8 <memset>
  if(adcHandle->Instance==ADC)
 800117e:	682a      	ldr	r2, [r5, #0]
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <HAL_ADC_MspInit+0xb4>)
 8001182:	429a      	cmp	r2, r3
 8001184:	d145      	bne.n	8001212 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001186:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800118a:	9308      	str	r3, [sp, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800118e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001192:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001194:	f003 fc6c 	bl	8004a70 <HAL_RCCEx_PeriphCLKConfig>
 8001198:	b108      	cbz	r0, 800119e <HAL_ADC_MspInit+0x3a>
    {
      Error_Handler();
 800119a:	f001 fd93 	bl	8002cc4 <Error_Handler>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800119e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    /**ADC GPIO Configuration
    PA12     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2600      	movs	r6, #0
 80011a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80011a6:	4c1d      	ldr	r4, [pc, #116]	; (800121c <HAL_ADC_MspInit+0xb8>)
 80011a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ac:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011b0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80011b4:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80011b6:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011ba:	f042 0201 	orr.w	r2, r2, #1
 80011be:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	9605      	str	r6, [sp, #20]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80011ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	a903      	add	r1, sp, #12
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f002 feb0 	bl	8003f40 <HAL_GPIO_Init>
    hdma_adc.Init.Request = DMA_REQUEST_ADC;
 80011e0:	490f      	ldr	r1, [pc, #60]	; (8001220 <HAL_ADC_MspInit+0xbc>)
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80011e2:	6226      	str	r6, [r4, #32]
    hdma_adc.Init.Request = DMA_REQUEST_ADC;
 80011e4:	2305      	movs	r3, #5
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011e6:	2080      	movs	r0, #128	; 0x80
    hdma_adc.Init.Request = DMA_REQUEST_ADC;
 80011e8:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f0:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80011f4:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 80011f8:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80011fa:	4620      	mov	r0, r4
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fc:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001200:	e9c4 c306 	strd	ip, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001204:	f002 fd22 	bl	8003c4c <HAL_DMA_Init>
 8001208:	b108      	cbz	r0, 800120e <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800120a:	f001 fd5b 	bl	8002cc4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800120e:	652c      	str	r4, [r5, #80]	; 0x50
 8001210:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001212:	b016      	add	sp, #88	; 0x58
 8001214:	bd70      	pop	{r4, r5, r6, pc}
 8001216:	bf00      	nop
 8001218:	40012400 	.word	0x40012400
 800121c:	20000fec 	.word	0x20000fec
 8001220:	40020008 	.word	0x40020008

08001224 <bin_search_log>:

	return MultiplyDeBruijnBitPosition[(uint32_t)(x * 0x07C4ACDDU) >> 27];
}

static const  q15_t bin_search_log(q15_t x) {
	if(x<2000){
 8001224:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8001228:	da22      	bge.n	8001270 <bin_search_log+0x4c>
	    if(x<290){
 800122a:	f5b0 7f91 	cmp.w	r0, #290	; 0x122
 800122e:	da11      	bge.n	8001254 <bin_search_log+0x30>
	        if(x<37){
 8001230:	2824      	cmp	r0, #36	; 0x24
	            return x*312;
 8001232:	b283      	uxth	r3, r0
	        if(x<37){
 8001234:	dc06      	bgt.n	8001244 <bin_search_log+0x20>
	            return x*312;
 8001236:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800123a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800123e:	00db      	lsls	r3, r3, #3
	}else{
	    if(x<8200){
	        if(x<4050){
	            return x+20686;
	        }else{
	            return (x>>1)+22711;
 8001240:	b218      	sxth	r0, r3
 8001242:	4770      	bx	lr
	            return x*24+10656;
 8001244:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001248:	f642 10a0 	movw	r0, #10656	; 0x29a0
 800124c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
	        }
	    }else{
	        if(x<14904){
	            return (x>>2)+24761;
	        }else{
	            return (x>>3)+26624;
 8001250:	b200      	sxth	r0, r0
	        }
	    }
	}
}
 8001252:	4770      	bx	lr
	        if(x<840){
 8001254:	f5b0 7f52 	cmp.w	r0, #840	; 0x348
	            return x*5+16166;
 8001258:	bfb5      	itete	lt
 800125a:	eb00 0080 	addlt.w	r0, r0, r0, lsl #2
	            return x*2+18686;
 800125e:	f500 5011 	addge.w	r0, r0, #9280	; 0x2440
	            return x*5+16166;
 8001262:	f500 507c 	addlt.w	r0, r0, #16128	; 0x3f00
	            return x*2+18686;
 8001266:	303f      	addge	r0, #63	; 0x3f
	            return x*5+16166;
 8001268:	bfb4      	ite	lt
 800126a:	3026      	addlt	r0, #38	; 0x26
	            return x*2+18686;
 800126c:	0040      	lslge	r0, r0, #1
 800126e:	e7ef      	b.n	8001250 <bin_search_log+0x2c>
	    if(x<8200){
 8001270:	f242 0307 	movw	r3, #8199	; 0x2007
 8001274:	4298      	cmp	r0, r3
 8001276:	dc0c      	bgt.n	8001292 <bin_search_log+0x6e>
	        if(x<4050){
 8001278:	f640 73d1 	movw	r3, #4049	; 0xfd1
 800127c:	4298      	cmp	r0, r3
 800127e:	dc03      	bgt.n	8001288 <bin_search_log+0x64>
	            return x+20686;
 8001280:	f500 40a1 	add.w	r0, r0, #20608	; 0x5080
 8001284:	304e      	adds	r0, #78	; 0x4e
 8001286:	e7e3      	b.n	8001250 <bin_search_log+0x2c>
	            return (x>>1)+22711;
 8001288:	f645 03b7 	movw	r3, #22711	; 0x58b7
 800128c:	eb03 0360 	add.w	r3, r3, r0, asr #1
 8001290:	e7d6      	b.n	8001240 <bin_search_log+0x1c>
	        if(x<14904){
 8001292:	f643 2337 	movw	r3, #14903	; 0x3a37
 8001296:	4298      	cmp	r0, r3
 8001298:	dc04      	bgt.n	80012a4 <bin_search_log+0x80>
	            return (x>>2)+24761;
 800129a:	f246 03b9 	movw	r3, #24761	; 0x60b9
 800129e:	eb03 03a0 	add.w	r3, r3, r0, asr #2
 80012a2:	e7cd      	b.n	8001240 <bin_search_log+0x1c>
	            return (x>>3)+26624;
 80012a4:	10c0      	asrs	r0, r0, #3
 80012a6:	f500 40d0 	add.w	r0, r0, #26624	; 0x6800
 80012aa:	e7d1      	b.n	8001250 <bin_search_log+0x2c>

080012ac <batext_AFE_init>:
{
 80012ac:	b508      	push	{r3, lr}
	if (HAL_TIM_Base_Start(&htim1) != HAL_OK) {
 80012ae:	480c      	ldr	r0, [pc, #48]	; (80012e0 <batext_AFE_init+0x34>)
 80012b0:	f004 fac0 	bl	8005834 <HAL_TIM_Base_Start>
 80012b4:	b120      	cbz	r0, 80012c0 <batext_AFE_init+0x14>
		print_now("Error while enabling timer TIM1\r\n");
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <batext_AFE_init+0x38>)
 80012b8:	f001 fbfa 	bl	8002ab0 <print_now>
		Error_Handler();
 80012bc:	f001 fd02 	bl	8002cc4 <Error_Handler>
	if (HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADCDoubleBuf, 2*ADC_BUF_SIZE) != HAL_OK) {
 80012c0:	4909      	ldr	r1, [pc, #36]	; (80012e8 <batext_AFE_init+0x3c>)
 80012c2:	480a      	ldr	r0, [pc, #40]	; (80012ec <batext_AFE_init+0x40>)
 80012c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80012c8:	f002 faf0 	bl	80038ac <HAL_ADC_Start_DMA>
 80012cc:	b130      	cbz	r0, 80012dc <batext_AFE_init+0x30>
		print_now("Error while starting the DMA\r\n");
 80012ce:	4808      	ldr	r0, [pc, #32]	; (80012f0 <batext_AFE_init+0x44>)
 80012d0:	f001 fbee 	bl	8002ab0 <print_now>
}
 80012d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 80012d8:	f001 bcf4 	b.w	8002cc4 <Error_Handler>
}
 80012dc:	bd08      	pop	{r3, pc}
 80012de:	bf00      	nop
 80012e0:	2000ec9c 	.word	0x2000ec9c
 80012e4:	0800c79c 	.word	0x0800c79c
 80012e8:	2000104e 	.word	0x2000104e
 80012ec:	20000f88 	.word	0x20000f88
 80012f0:	0800c7be 	.word	0x0800c7be

080012f4 <batext_AFE_deinit>:
{
 80012f4:	b508      	push	{r3, lr}
	if (HAL_ADC_Stop_DMA(&hadc) != HAL_OK) {
 80012f6:	480a      	ldr	r0, [pc, #40]	; (8001320 <batext_AFE_deinit+0x2c>)
 80012f8:	f002 fb64 	bl	80039c4 <HAL_ADC_Stop_DMA>
 80012fc:	b120      	cbz	r0, 8001308 <batext_AFE_deinit+0x14>
		print_now("Error while stopping the DMA\r\n");
 80012fe:	4809      	ldr	r0, [pc, #36]	; (8001324 <batext_AFE_deinit+0x30>)
 8001300:	f001 fbd6 	bl	8002ab0 <print_now>
		Error_Handler();
 8001304:	f001 fcde 	bl	8002cc4 <Error_Handler>
	if (HAL_TIM_Base_Stop(&htim1) != HAL_OK) {
 8001308:	4807      	ldr	r0, [pc, #28]	; (8001328 <batext_AFE_deinit+0x34>)
 800130a:	f004 fab5 	bl	8005878 <HAL_TIM_Base_Stop>
 800130e:	b130      	cbz	r0, 800131e <batext_AFE_deinit+0x2a>
		print_now("Error while disabling timer TIM1\r\n");
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <batext_AFE_deinit+0x38>)
 8001312:	f001 fbcd 	bl	8002ab0 <print_now>
}
 8001316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 800131a:	f001 bcd3 	b.w	8002cc4 <Error_Handler>
}
 800131e:	bd08      	pop	{r3, pc}
 8001320:	20000f88 	.word	0x20000f88
 8001324:	0800c7dd 	.word	0x0800c7dd
 8001328:	2000ec9c 	.word	0x2000ec9c
 800132c:	0800c7fc 	.word	0x0800c7fc

08001330 <batext_power_off>:
{
 8001330:	b508      	push	{r3, lr}
	batext_AFE_deinit();
 8001332:	f7ff ffdf 	bl	80012f4 <batext_AFE_deinit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	2201      	movs	r2, #1
 800133c:	2110      	movs	r1, #16
 800133e:	f002 feab 	bl	8004098 <HAL_GPIO_WritePin>
}
 8001342:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	print_now("BatExt power OFF\r\n");
 8001346:	4801      	ldr	r0, [pc, #4]	; (800134c <batext_power_off+0x1c>)
 8001348:	f001 bbb2 	b.w	8002ab0 <print_now>
 800134c:	0800c81f 	.word	0x0800c81f

08001350 <batext_choose_gain>:
{
 8001350:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, gain & 0x01);
 8001352:	f000 0201 	and.w	r2, r0, #1
{
 8001356:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, gain & 0x01);
 8001358:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800135c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001360:	f002 fe9a 	bl	8004098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (gain & 0x02) >> 1);
 8001364:	f3c4 0240 	ubfx	r2, r4, #1, #1
 8001368:	f44f 6100 	mov.w	r1, #2048	; 0x800
}
 800136c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (gain & 0x02) >> 1);
 8001370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001374:	f002 be90 	b.w	8004098 <HAL_GPIO_WritePin>

08001378 <batext_power_on>:
{
 8001378:	b508      	push	{r3, lr}
	print_now("Begin power on\r\n");
 800137a:	480e      	ldr	r0, [pc, #56]	; (80013b4 <batext_power_on+0x3c>)
 800137c:	f001 fb98 	bl	8002ab0 <print_now>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2110      	movs	r1, #16
 8001384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001388:	f002 fe86 	bl	8004098 <HAL_GPIO_WritePin>
	print_now("BatExt power ON\r\n");
 800138c:	480a      	ldr	r0, [pc, #40]	; (80013b8 <batext_power_on+0x40>)
 800138e:	f001 fb8f 	bl	8002ab0 <print_now>
	HAL_Delay(100); // for card insert cap charge
 8001392:	2064      	movs	r0, #100	; 0x64
 8001394:	f001 ffbe 	bl	8003314 <HAL_Delay>
	print_now("Init AFE\r\n");
 8001398:	4808      	ldr	r0, [pc, #32]	; (80013bc <batext_power_on+0x44>)
 800139a:	f001 fb89 	bl	8002ab0 <print_now>
	batext_AFE_init();
 800139e:	f7ff ff85 	bl	80012ac <batext_AFE_init>
	print_now("Setting AFE\r\n");
 80013a2:	4807      	ldr	r0, [pc, #28]	; (80013c0 <batext_power_on+0x48>)
 80013a4:	f001 fb84 	bl	8002ab0 <print_now>
}
 80013a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	batext_choose_gain(3);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f7ff bfcf 	b.w	8001350 <batext_choose_gain>
 80013b2:	bf00      	nop
 80013b4:	0800c832 	.word	0x0800c832
 80013b8:	0800c843 	.word	0x0800c843
 80013bc:	0800c855 	.word	0x0800c855
 80013c0:	0800c860 	.word	0x0800c860

080013c4 <print_array_q7>:
		print_now(",");
	}
	print_now("\r\n\n");
}

void print_array_q7(char* intro, q7_t* array, int length){
 80013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c6:	460e      	mov	r6, r1
 80013c8:	4615      	mov	r5, r2
	print_now(intro);
 80013ca:	f001 fb71 	bl	8002ab0 <print_now>
	print_now("\r\n");
 80013ce:	480a      	ldr	r0, [pc, #40]	; (80013f8 <print_array_q7+0x34>)
	for(int i = 0 ; i < length ; i++){
		print_int(array[i]);
		print_now(",");
 80013d0:	4f0a      	ldr	r7, [pc, #40]	; (80013fc <print_array_q7+0x38>)
	print_now("\r\n");
 80013d2:	f001 fb6d 	bl	8002ab0 <print_now>
	for(int i = 0 ; i < length ; i++){
 80013d6:	2400      	movs	r4, #0
 80013d8:	42ac      	cmp	r4, r5
 80013da:	db04      	blt.n	80013e6 <print_array_q7+0x22>
	}
	print_now("\r\n\n");
}
 80013dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	print_now("\r\n\n");
 80013e0:	4807      	ldr	r0, [pc, #28]	; (8001400 <print_array_q7+0x3c>)
 80013e2:	f001 bb65 	b.w	8002ab0 <print_now>
		print_int(array[i]);
 80013e6:	5730      	ldrsb	r0, [r6, r4]
 80013e8:	f001 fb6c 	bl	8002ac4 <print_int>
		print_now(",");
 80013ec:	4638      	mov	r0, r7
 80013ee:	f001 fb5f 	bl	8002ab0 <print_now>
	for(int i = 0 ; i < length ; i++){
 80013f2:	3401      	adds	r4, #1
 80013f4:	e7f0      	b.n	80013d8 <print_array_q7+0x14>
 80013f6:	bf00      	nop
 80013f8:	0800cff8 	.word	0x0800cff8
 80013fc:	0800c86e 	.word	0x0800c86e
 8001400:	0800c870 	.word	0x0800c870

08001404 <vec_computation>:

void vec_computation(q15_t* in, q7_t* out, uint8_t shift_val) {
 8001404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	q15_t buf     [ SAMPLE_PER_MELVEC ];
	q15_t fft_buf     [ 2 * SAMPLE_PER_MELVEC ];
	q63_t temp_vak = 0;
 8001408:	2600      	movs	r6, #0
void vec_computation(q15_t* in, q7_t* out, uint8_t shift_val) {
 800140a:	f5ad 6d42 	sub.w	sp, sp, #3104	; 0xc20
	q63_t temp_vak = 0;
 800140e:	2700      	movs	r7, #0
 8001410:	e9cd 6700 	strd	r6, r7, [sp]
	uint32_t* word_buf 		= (uint32_t*) 	buf;
	uint32_t* word_fft_buf 	= (uint32_t*) 	fft_buf;

	//Center data, scale it up and mulltiply with hamming window
	#pragma GCC unroll 8
	for(int i = 0 ; i < SAMPLE_PER_MELVEC/2 ;i++){
 8001414:	ad08      	add	r5, sp, #32
 8001416:	4fb1      	ldr	r7, [pc, #708]	; (80016dc <vec_computation+0x2d8>)
void vec_computation(q15_t* in, q7_t* out, uint8_t shift_val) {
 8001418:	460c      	mov	r4, r1
	q63_t temp_vak = 0;
 800141a:	462e      	mov	r6, r5
 800141c:	1f01      	subs	r1, r0, #4

__STATIC_FORCEINLINE uint32_t __SSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800141e:	f04f 2c08 	mov.w	ip, #134219776	; 0x8000800
 8001422:	f500 707f 	add.w	r0, r0, #1020	; 0x3fc
 8001426:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800142a:	fad3 f30c 	ssub16	r3, r3, ip
		int32_t normalizeds = (__SSUB16(word_in[i], 0x08000800)<<shift_val)&0xFFF0FFF0;
		q31_t facs = word_ham[i];
 800142e:	f857 8b04 	ldr.w	r8, [r7], #4
		int32_t normalizeds = (__SSUB16(word_in[i], 0x08000800)<<shift_val)&0xFFF0FFF0;
 8001432:	4093      	lsls	r3, r2
 8001434:	f023 130f 	bic.w	r3, r3, #983055	; 0xf000f
		q15_t term1 = (((normalizeds >> 16) *  (facs >> 16)))>>15;
 8001438:	fb18 fe33 	smultt	lr, r8, r3
		q15_t term2 = (((q15_t) normalizeds * (q15_t) facs))>>15;
 800143c:	fb13 f308 	smulbb	r3, r3, r8
		word_buf[i] = __PKHBT(term2 , term1 , 16);
 8001440:	f34e 3ecf 	sbfx	lr, lr, #15, #16
 8001444:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001448:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
	for(int i = 0 ; i < SAMPLE_PER_MELVEC/2 ;i++){
 800144c:	4288      	cmp	r0, r1
		word_buf[i] = __PKHBT(term2 , term1 , 16);
 800144e:	f846 3b04 	str.w	r3, [r6], #4
	for(int i = 0 ; i < SAMPLE_PER_MELVEC/2 ;i++){
 8001452:	d1e8      	bne.n	8001426 <vec_computation+0x22>
	print_array_q15("after mult", buf, SAMPLE_PER_MELVEC);
#endif

	//Apply FFT
	arm_rfft_instance_q15 rfft_inst;
	arm_rfft_init_q15(&rfft_inst, SAMPLE_PER_MELVEC, 0, 1);
 8001454:	2301      	movs	r3, #1
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800145c:	a802      	add	r0, sp, #8
 800145e:	f005 ff59 	bl	8007314 <arm_rfft_init_q15>
	arm_rfft_q15( &rfft_inst, buf, fft_buf);
 8001462:	4629      	mov	r1, r5
 8001464:	f50d 6284 	add.w	r2, sp, #1056	; 0x420
 8001468:	a802      	add	r0, sp, #8
 800146a:	f005 feb9 	bl	80071e0 <arm_rfft_q15>
#if DEBUG_VEC_COMP
	print_array_q15("after fft", fft_buf, SAMPLE_PER_MELVEC);
#endif

	//Complex norm + logarithm
	for(int i = MIN_INDEX_MATMUL ; i < MAX_INDEX_MATMUL; i+=4){
 800146e:	2612      	movs	r6, #18
 8001470:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
		uint32_t shifted =  (word_fft_buf[i]<<1)&0xFFFEFFFE;
 8001474:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8001476:	0040      	lsls	r0, r0, #1
 8001478:	f020 1001 	bic.w	r0, r0, #65537	; 0x10001

__STATIC_FORCEINLINE uint32_t __SMUAD  (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800147c:	fb20 f000 	smuad	r0, r0, r0
		buf[i  ] = bin_search_log(__SMUAD(shifted, shifted)>>16);
 8001480:	1400      	asrs	r0, r0, #16
 8001482:	f7ff fecf 	bl	8001224 <bin_search_log>
 8001486:	84a8      	strh	r0, [r5, #36]	; 0x24
		shifted =  (word_fft_buf[i+1]<<1)&0xFFFEFFFE;
 8001488:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800148a:	0040      	lsls	r0, r0, #1
 800148c:	f020 1001 	bic.w	r0, r0, #65537	; 0x10001
 8001490:	fb20 f000 	smuad	r0, r0, r0
		buf[i+1] = bin_search_log(__SMUAD(shifted, shifted)>>16);
 8001494:	1400      	asrs	r0, r0, #16
 8001496:	f7ff fec5 	bl	8001224 <bin_search_log>
 800149a:	84e8      	strh	r0, [r5, #38]	; 0x26
		shifted =  (word_fft_buf[i+2]<<1)&0xFFFEFFFE;
 800149c:	6d08      	ldr	r0, [r1, #80]	; 0x50
 800149e:	0040      	lsls	r0, r0, #1
 80014a0:	f020 1001 	bic.w	r0, r0, #65537	; 0x10001
 80014a4:	fb20 f000 	smuad	r0, r0, r0
		buf[i+2] = bin_search_log(__SMUAD(shifted, shifted)>>16);
 80014a8:	1400      	asrs	r0, r0, #16
 80014aa:	f7ff febb 	bl	8001224 <bin_search_log>
 80014ae:	8528      	strh	r0, [r5, #40]	; 0x28
		shifted =  (word_fft_buf[i+3]<<1)&0xFFFEFFFE;
 80014b0:	6d48      	ldr	r0, [r1, #84]	; 0x54
 80014b2:	0040      	lsls	r0, r0, #1
 80014b4:	f020 1001 	bic.w	r0, r0, #65537	; 0x10001
 80014b8:	fb20 f000 	smuad	r0, r0, r0
		buf[i+3] = bin_search_log(__SMUAD(shifted, shifted)>>16);
 80014bc:	1400      	asrs	r0, r0, #16
 80014be:	f7ff feb1 	bl	8001224 <bin_search_log>
	for(int i = MIN_INDEX_MATMUL ; i < MAX_INDEX_MATMUL; i+=4){
 80014c2:	3604      	adds	r6, #4
 80014c4:	2eb6      	cmp	r6, #182	; 0xb6
		buf[i+3] = bin_search_log(__SMUAD(shifted, shifted)>>16);
 80014c6:	8568      	strh	r0, [r5, #42]	; 0x2a
	for(int i = MIN_INDEX_MATMUL ; i < MAX_INDEX_MATMUL; i+=4){
 80014c8:	f101 0110 	add.w	r1, r1, #16
 80014cc:	f105 0508 	add.w	r5, r5, #8
 80014d0:	d1d0      	bne.n	8001474 <vec_computation+0x70>
#endif

	//Mel-scaled filtering
	#pragma GCC unroll 21
	for(int i = 0 ; i < N_MEL_BIN; i++){
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 80014d2:	4d83      	ldr	r5, [pc, #524]	; (80016e0 <vec_computation+0x2dc>)
 80014d4:	466b      	mov	r3, sp
 80014d6:	6829      	ldr	r1, [r5, #0]
 80014d8:	a811      	add	r0, sp, #68	; 0x44
 80014da:	2204      	movs	r2, #4
 80014dc:	f005 ff90 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 80014e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80014e4:	0e9b      	lsrs	r3, r3, #26
 80014e6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014ea:	7023      	strb	r3, [r4, #0]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 80014ec:	6869      	ldr	r1, [r5, #4]
 80014ee:	466b      	mov	r3, sp
 80014f0:	a812      	add	r0, sp, #72	; 0x48
 80014f2:	2205      	movs	r2, #5
 80014f4:	f005 ff84 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 80014f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80014fc:	0e9b      	lsrs	r3, r3, #26
 80014fe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001502:	7063      	strb	r3, [r4, #1]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 8001504:	68a9      	ldr	r1, [r5, #8]
 8001506:	466b      	mov	r3, sp
 8001508:	a813      	add	r0, sp, #76	; 0x4c
 800150a:	2206      	movs	r2, #6
 800150c:	f005 ff78 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 8001510:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001514:	0e9b      	lsrs	r3, r3, #26
 8001516:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800151a:	70a3      	strb	r3, [r4, #2]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 800151c:	68e9      	ldr	r1, [r5, #12]
 800151e:	466b      	mov	r3, sp
 8001520:	f10d 0052 	add.w	r0, sp, #82	; 0x52
 8001524:	2207      	movs	r2, #7
 8001526:	f005 ff6b 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 800152a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800152e:	0e9b      	lsrs	r3, r3, #26
 8001530:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001534:	70e3      	strb	r3, [r4, #3]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 8001536:	6929      	ldr	r1, [r5, #16]
 8001538:	466b      	mov	r3, sp
 800153a:	a816      	add	r0, sp, #88	; 0x58
 800153c:	2208      	movs	r2, #8
 800153e:	f005 ff5f 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 8001542:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001546:	0e9b      	lsrs	r3, r3, #26
 8001548:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800154c:	7123      	strb	r3, [r4, #4]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 800154e:	6969      	ldr	r1, [r5, #20]
 8001550:	466b      	mov	r3, sp
 8001552:	a818      	add	r0, sp, #96	; 0x60
 8001554:	2208      	movs	r2, #8
 8001556:	f005 ff53 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 800155a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800155e:	0e9b      	lsrs	r3, r3, #26
 8001560:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001564:	7163      	strb	r3, [r4, #5]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 8001566:	69a9      	ldr	r1, [r5, #24]
 8001568:	466b      	mov	r3, sp
 800156a:	a81a      	add	r0, sp, #104	; 0x68
 800156c:	2209      	movs	r2, #9
 800156e:	f005 ff47 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 8001572:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001576:	0e9b      	lsrs	r3, r3, #26
 8001578:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800157c:	71a3      	strb	r3, [r4, #6]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 800157e:	69e9      	ldr	r1, [r5, #28]
 8001580:	466b      	mov	r3, sp
 8001582:	a81c      	add	r0, sp, #112	; 0x70
 8001584:	220b      	movs	r2, #11
 8001586:	f005 ff3b 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 800158a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800158e:	0e9b      	lsrs	r3, r3, #26
 8001590:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001594:	71e3      	strb	r3, [r4, #7]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 8001596:	6a29      	ldr	r1, [r5, #32]
 8001598:	466b      	mov	r3, sp
 800159a:	f10d 007a 	add.w	r0, sp, #122	; 0x7a
 800159e:	220c      	movs	r2, #12
 80015a0:	f005 ff2e 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 80015a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80015a8:	0e9b      	lsrs	r3, r3, #26
 80015aa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015ae:	7223      	strb	r3, [r4, #8]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 80015b0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80015b2:	466b      	mov	r3, sp
 80015b4:	f10d 0086 	add.w	r0, sp, #134	; 0x86
 80015b8:	220d      	movs	r2, #13
 80015ba:	f005 ff21 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 80015be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80015c2:	0e9b      	lsrs	r3, r3, #26
 80015c4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015c8:	7263      	strb	r3, [r4, #9]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 80015ca:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80015cc:	466b      	mov	r3, sp
 80015ce:	f10d 0092 	add.w	r0, sp, #146	; 0x92
 80015d2:	220f      	movs	r2, #15
 80015d4:	f005 ff14 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 80015d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80015dc:	0e9b      	lsrs	r3, r3, #26
 80015de:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015e2:	72a3      	strb	r3, [r4, #10]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 80015e4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80015e6:	466b      	mov	r3, sp
 80015e8:	a828      	add	r0, sp, #160	; 0xa0
 80015ea:	2211      	movs	r2, #17
 80015ec:	f005 ff08 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 80015f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80015f4:	0e9b      	lsrs	r3, r3, #26
 80015f6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015fa:	72e3      	strb	r3, [r4, #11]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 80015fc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80015fe:	466b      	mov	r3, sp
 8001600:	a82c      	add	r0, sp, #176	; 0xb0
 8001602:	2213      	movs	r2, #19
 8001604:	f005 fefc 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 8001608:	e9dd 3200 	ldrd	r3, r2, [sp]
 800160c:	0e9b      	lsrs	r3, r3, #26
 800160e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001612:	7323      	strb	r3, [r4, #12]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 8001614:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001616:	466b      	mov	r3, sp
 8001618:	f10d 00c2 	add.w	r0, sp, #194	; 0xc2
 800161c:	2215      	movs	r2, #21
 800161e:	f005 feef 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 8001622:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001626:	0e9b      	lsrs	r3, r3, #26
 8001628:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800162c:	7363      	strb	r3, [r4, #13]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 800162e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8001630:	466b      	mov	r3, sp
 8001632:	f10d 00d6 	add.w	r0, sp, #214	; 0xd6
 8001636:	2218      	movs	r2, #24
 8001638:	f005 fee2 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 800163c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001640:	0e9b      	lsrs	r3, r3, #26
 8001642:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001646:	73a3      	strb	r3, [r4, #14]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 8001648:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800164a:	466b      	mov	r3, sp
 800164c:	a83b      	add	r0, sp, #236	; 0xec
 800164e:	221b      	movs	r2, #27
 8001650:	f005 fed6 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 8001654:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001658:	0e9b      	lsrs	r3, r3, #26
 800165a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800165e:	73e3      	strb	r3, [r4, #15]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 8001660:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001662:	466b      	mov	r3, sp
 8001664:	f50d 7083 	add.w	r0, sp, #262	; 0x106
 8001668:	221e      	movs	r2, #30
 800166a:	f005 fec9 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 800166e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001672:	0e9b      	lsrs	r3, r3, #26
 8001674:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001678:	7423      	strb	r3, [r4, #16]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 800167a:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800167c:	466b      	mov	r3, sp
 800167e:	f50d 7091 	add.w	r0, sp, #290	; 0x122
 8001682:	2222      	movs	r2, #34	; 0x22
 8001684:	f005 febc 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 8001688:	e9dd 3200 	ldrd	r3, r2, [sp]
 800168c:	0e9b      	lsrs	r3, r3, #26
 800168e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001692:	7463      	strb	r3, [r4, #17]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 8001694:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001696:	466b      	mov	r3, sp
 8001698:	f50d 70a1 	add.w	r0, sp, #322	; 0x142
 800169c:	2226      	movs	r2, #38	; 0x26
 800169e:	f005 feaf 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 80016a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80016a6:	0e9b      	lsrs	r3, r3, #26
 80016a8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80016ac:	74a3      	strb	r3, [r4, #18]
		arm_dot_prod_q15(buf+s_pos[i],ls[i],l_lens[i], &temp_vak);
 80016ae:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80016b0:	466b      	mov	r3, sp
 80016b2:	f50d 70b3 	add.w	r0, sp, #358	; 0x166
 80016b6:	222a      	movs	r2, #42	; 0x2a
 80016b8:	f005 fea2 	bl	8007400 <arm_dot_prod_q15>
		out[i] = (q7_t)(temp_vak>>26);
 80016bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80016c0:	0e9b      	lsrs	r3, r3, #26
 80016c2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
	}
#if PRINT_VEC || DEBUG_VEC_COMP
	print_array_q7("Melvec", out, N_MEL_BIN);
 80016c6:	4807      	ldr	r0, [pc, #28]	; (80016e4 <vec_computation+0x2e0>)
		out[i] = (q7_t)(temp_vak>>26);
 80016c8:	74e3      	strb	r3, [r4, #19]
	print_array_q7("Melvec", out, N_MEL_BIN);
 80016ca:	2214      	movs	r2, #20
 80016cc:	4621      	mov	r1, r4
 80016ce:	f7ff fe79 	bl	80013c4 <print_array_q7>
#endif
}
 80016d2:	f50d 6d42 	add.w	sp, sp, #3104	; 0xc20
 80016d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016da:	bf00      	nop
 80016dc:	0800c8ba 	.word	0x0800c8ba
 80016e0:	20000000 	.word	0x20000000
 80016e4:	0800c874 	.word	0x0800c874

080016e8 <treat_spec>:

void treat_spec(q15_t* audio_data){
 80016e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	//Compute max shift without overflow
	q15_t max_value;
	uint32_t trash;
	arm_max_q15( audio_data, (HOP_LENGTH*(N_MELVEC-1) + SAMPLE_PER_MELVEC), &max_value, &trash);
 80016ea:	f640 317e 	movw	r1, #2942	; 0xb7e
 80016ee:	ab01      	add	r3, sp, #4
 80016f0:	f10d 0202 	add.w	r2, sp, #2
void treat_spec(q15_t* audio_data){
 80016f4:	4605      	mov	r5, r0
	arm_max_q15( audio_data, (HOP_LENGTH*(N_MELVEC-1) + SAMPLE_PER_MELVEC), &max_value, &trash);
 80016f6:	f005 fd21 	bl	800713c <arm_max_q15>
	max_value =  16-log2_q15(max_value);
 80016fa:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
	return MultiplyDeBruijnBitPosition[(uint32_t)(x * 0x07C4ACDDU) >> 27];
 80016fe:	4ad7      	ldr	r2, [pc, #860]	; (8001a5c <treat_spec+0x374>)

	//Compute each vector
#pragma GCC unroll 10
	for (int i = 0 ; i < N_MELVEC ; i++){
		vec_computation(audio_data+HOP_LENGTH*i, melvec[i],max_value);
 8001700:	4cd7      	ldr	r4, [pc, #860]	; (8001a60 <treat_spec+0x378>)
	x |= x >> 1; // first round down to one less than a power of 2
 8001702:	ea43 0363 	orr.w	r3, r3, r3, asr #1
	x |= x >> 2;
 8001706:	ea43 03a3 	orr.w	r3, r3, r3, asr #2
	x |= x >> 4;
 800170a:	ea43 1323 	orr.w	r3, r3, r3, asr #4
	x |= x >> 8;
 800170e:	ea43 2323 	orr.w	r3, r3, r3, asr #8
	return MultiplyDeBruijnBitPosition[(uint32_t)(x * 0x07C4ACDDU) >> 27];
 8001712:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001716:	4353      	muls	r3, r2
 8001718:	0edb      	lsrs	r3, r3, #27
	max_value =  16-log2_q15(max_value);
 800171a:	4ad2      	ldr	r2, [pc, #840]	; (8001a64 <treat_spec+0x37c>)
		vec_computation(audio_data+HOP_LENGTH*i, melvec[i],max_value);
 800171c:	6821      	ldr	r1, [r4, #0]
	max_value =  16-log2_q15(max_value);
 800171e:	5cd2      	ldrb	r2, [r2, r3]
 8001720:	f1c2 0210 	rsb	r2, r2, #16
 8001724:	b292      	uxth	r2, r2
 8001726:	f8ad 2002 	strh.w	r2, [sp, #2]
		vec_computation(audio_data+HOP_LENGTH*i, melvec[i],max_value);
 800172a:	4628      	mov	r0, r5
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	f7ff fe69 	bl	8001404 <vec_computation>
 8001732:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8001736:	6861      	ldr	r1, [r4, #4]
 8001738:	f505 7007 	add.w	r0, r5, #540	; 0x21c
 800173c:	f7ff fe62 	bl	8001404 <vec_computation>
 8001740:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8001744:	68a1      	ldr	r1, [r4, #8]
 8001746:	f505 6087 	add.w	r0, r5, #1080	; 0x438
 800174a:	f7ff fe5b 	bl	8001404 <vec_computation>
 800174e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8001752:	68e1      	ldr	r1, [r4, #12]
 8001754:	f205 6054 	addw	r0, r5, #1620	; 0x654
 8001758:	f7ff fe54 	bl	8001404 <vec_computation>
 800175c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8001760:	6921      	ldr	r1, [r4, #16]
 8001762:	f505 6007 	add.w	r0, r5, #2160	; 0x870
 8001766:	f7ff fe4d 	bl	8001404 <vec_computation>
 800176a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800176e:	6961      	ldr	r1, [r4, #20]
 8001770:	f605 208c 	addw	r0, r5, #2700	; 0xa8c
 8001774:	f7ff fe46 	bl	8001404 <vec_computation>
 8001778:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800177c:	69a1      	ldr	r1, [r4, #24]
 800177e:	f605 40a8 	addw	r0, r5, #3240	; 0xca8
 8001782:	f7ff fe3f 	bl	8001404 <vec_computation>
 8001786:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800178a:	69e1      	ldr	r1, [r4, #28]
 800178c:	f605 60c4 	addw	r0, r5, #3780	; 0xec4
 8001790:	f7ff fe38 	bl	8001404 <vec_computation>
 8001794:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8001798:	6a21      	ldr	r1, [r4, #32]
 800179a:	f505 5087 	add.w	r0, r5, #4320	; 0x10e0
 800179e:	f7ff fe31 	bl	8001404 <vec_computation>
 80017a2:	f505 5097 	add.w	r0, r5, #4832	; 0x12e0
 80017a6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80017aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80017ac:	301c      	adds	r0, #28
 80017ae:	f7ff fe29 	bl	8001404 <vec_computation>
	//De-noise + linear function for model
#pragma GCC unroll 21
	for (int i = 0 ; i < N_MEL_BIN ; i++){
		int16_t mean = 0;
#pragma GCC unroll 10
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 80017b2:	6825      	ldr	r5, [r4, #0]
 80017b4:	6863      	ldr	r3, [r4, #4]
 80017b6:	68a1      	ldr	r1, [r4, #8]
 80017b8:	f995 2000 	ldrsb.w	r2, [r5]
 80017bc:	f993 3000 	ldrsb.w	r3, [r3]
 80017c0:	f991 1000 	ldrsb.w	r1, [r1]
 80017c4:	4413      	add	r3, r2
 80017c6:	4419      	add	r1, r3
 80017c8:	68e3      	ldr	r3, [r4, #12]
 80017ca:	f993 3000 	ldrsb.w	r3, [r3]
 80017ce:	440b      	add	r3, r1
 80017d0:	6921      	ldr	r1, [r4, #16]
 80017d2:	f991 1000 	ldrsb.w	r1, [r1]
 80017d6:	4419      	add	r1, r3
 80017d8:	6963      	ldr	r3, [r4, #20]
 80017da:	f993 3000 	ldrsb.w	r3, [r3]
 80017de:	440b      	add	r3, r1
 80017e0:	69a1      	ldr	r1, [r4, #24]
 80017e2:	f991 1000 	ldrsb.w	r1, [r1]
 80017e6:	4419      	add	r1, r3
 80017e8:	69e3      	ldr	r3, [r4, #28]
 80017ea:	f993 3000 	ldrsb.w	r3, [r3]
 80017ee:	440b      	add	r3, r1
 80017f0:	6a21      	ldr	r1, [r4, #32]
 80017f2:	f991 1000 	ldrsb.w	r1, [r1]
 80017f6:	4419      	add	r1, r3
 80017f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017fa:	f993 3000 	ldrsb.w	r3, [r3]
 80017fe:	440b      	add	r3, r1
		mean /= N_MELVEC;
 8001800:	200a      	movs	r0, #10
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 8001802:	b21b      	sxth	r3, r3
#pragma GCC unroll 10
		for (int j = 0 ; j < N_MELVEC ; j++)
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 8001804:	fb93 f3f0 	sdiv	r3, r3, r0
 8001808:	1ad2      	subs	r2, r2, r3
 800180a:	0052      	lsls	r2, r2, #1
 800180c:	3a63      	subs	r2, #99	; 0x63
 800180e:	702a      	strb	r2, [r5, #0]
 8001810:	6861      	ldr	r1, [r4, #4]
 8001812:	f991 2000 	ldrsb.w	r2, [r1]
 8001816:	1ad2      	subs	r2, r2, r3
 8001818:	0052      	lsls	r2, r2, #1
 800181a:	3a63      	subs	r2, #99	; 0x63
 800181c:	700a      	strb	r2, [r1, #0]
 800181e:	68a1      	ldr	r1, [r4, #8]
 8001820:	f991 2000 	ldrsb.w	r2, [r1]
 8001824:	1ad2      	subs	r2, r2, r3
 8001826:	0052      	lsls	r2, r2, #1
 8001828:	3a63      	subs	r2, #99	; 0x63
 800182a:	700a      	strb	r2, [r1, #0]
 800182c:	68e1      	ldr	r1, [r4, #12]
 800182e:	f991 2000 	ldrsb.w	r2, [r1]
 8001832:	1ad2      	subs	r2, r2, r3
 8001834:	0052      	lsls	r2, r2, #1
 8001836:	3a63      	subs	r2, #99	; 0x63
 8001838:	700a      	strb	r2, [r1, #0]
 800183a:	6921      	ldr	r1, [r4, #16]
 800183c:	f991 2000 	ldrsb.w	r2, [r1]
 8001840:	1ad2      	subs	r2, r2, r3
 8001842:	0052      	lsls	r2, r2, #1
 8001844:	3a63      	subs	r2, #99	; 0x63
 8001846:	700a      	strb	r2, [r1, #0]
 8001848:	6961      	ldr	r1, [r4, #20]
 800184a:	f991 2000 	ldrsb.w	r2, [r1]
 800184e:	1ad2      	subs	r2, r2, r3
 8001850:	0052      	lsls	r2, r2, #1
 8001852:	3a63      	subs	r2, #99	; 0x63
 8001854:	700a      	strb	r2, [r1, #0]
 8001856:	69a1      	ldr	r1, [r4, #24]
 8001858:	f991 2000 	ldrsb.w	r2, [r1]
 800185c:	1ad2      	subs	r2, r2, r3
 800185e:	0052      	lsls	r2, r2, #1
 8001860:	3a63      	subs	r2, #99	; 0x63
 8001862:	700a      	strb	r2, [r1, #0]
 8001864:	69e1      	ldr	r1, [r4, #28]
 8001866:	f991 2000 	ldrsb.w	r2, [r1]
 800186a:	1ad2      	subs	r2, r2, r3
 800186c:	0052      	lsls	r2, r2, #1
 800186e:	3a63      	subs	r2, #99	; 0x63
 8001870:	700a      	strb	r2, [r1, #0]
 8001872:	6a21      	ldr	r1, [r4, #32]
 8001874:	f991 2000 	ldrsb.w	r2, [r1]
 8001878:	1ad2      	subs	r2, r2, r3
 800187a:	0052      	lsls	r2, r2, #1
 800187c:	3a63      	subs	r2, #99	; 0x63
 800187e:	700a      	strb	r2, [r1, #0]
 8001880:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001882:	f991 2000 	ldrsb.w	r2, [r1]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	3b63      	subs	r3, #99	; 0x63
 800188c:	700b      	strb	r3, [r1, #0]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 800188e:	6825      	ldr	r5, [r4, #0]
 8001890:	6863      	ldr	r3, [r4, #4]
 8001892:	68a1      	ldr	r1, [r4, #8]
 8001894:	f995 2001 	ldrsb.w	r2, [r5, #1]
 8001898:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800189c:	f991 1001 	ldrsb.w	r1, [r1, #1]
 80018a0:	4413      	add	r3, r2
 80018a2:	4419      	add	r1, r3
 80018a4:	68e3      	ldr	r3, [r4, #12]
 80018a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80018aa:	440b      	add	r3, r1
 80018ac:	6921      	ldr	r1, [r4, #16]
 80018ae:	f991 1001 	ldrsb.w	r1, [r1, #1]
 80018b2:	4419      	add	r1, r3
 80018b4:	6963      	ldr	r3, [r4, #20]
 80018b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80018ba:	440b      	add	r3, r1
 80018bc:	69a1      	ldr	r1, [r4, #24]
 80018be:	f991 1001 	ldrsb.w	r1, [r1, #1]
 80018c2:	4419      	add	r1, r3
 80018c4:	69e3      	ldr	r3, [r4, #28]
 80018c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80018ca:	440b      	add	r3, r1
 80018cc:	6a21      	ldr	r1, [r4, #32]
 80018ce:	f991 1001 	ldrsb.w	r1, [r1, #1]
 80018d2:	4419      	add	r1, r3
 80018d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80018da:	440b      	add	r3, r1
 80018dc:	b21b      	sxth	r3, r3
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 80018de:	fb93 f3f0 	sdiv	r3, r3, r0
 80018e2:	1ad2      	subs	r2, r2, r3
 80018e4:	0052      	lsls	r2, r2, #1
 80018e6:	3a63      	subs	r2, #99	; 0x63
 80018e8:	706a      	strb	r2, [r5, #1]
 80018ea:	6861      	ldr	r1, [r4, #4]
 80018ec:	f991 2001 	ldrsb.w	r2, [r1, #1]
 80018f0:	1ad2      	subs	r2, r2, r3
 80018f2:	0052      	lsls	r2, r2, #1
 80018f4:	3a63      	subs	r2, #99	; 0x63
 80018f6:	704a      	strb	r2, [r1, #1]
 80018f8:	68a1      	ldr	r1, [r4, #8]
 80018fa:	f991 2001 	ldrsb.w	r2, [r1, #1]
 80018fe:	1ad2      	subs	r2, r2, r3
 8001900:	0052      	lsls	r2, r2, #1
 8001902:	3a63      	subs	r2, #99	; 0x63
 8001904:	704a      	strb	r2, [r1, #1]
 8001906:	68e1      	ldr	r1, [r4, #12]
 8001908:	f991 2001 	ldrsb.w	r2, [r1, #1]
 800190c:	1ad2      	subs	r2, r2, r3
 800190e:	0052      	lsls	r2, r2, #1
 8001910:	3a63      	subs	r2, #99	; 0x63
 8001912:	704a      	strb	r2, [r1, #1]
 8001914:	6921      	ldr	r1, [r4, #16]
 8001916:	f991 2001 	ldrsb.w	r2, [r1, #1]
 800191a:	1ad2      	subs	r2, r2, r3
 800191c:	0052      	lsls	r2, r2, #1
 800191e:	3a63      	subs	r2, #99	; 0x63
 8001920:	704a      	strb	r2, [r1, #1]
 8001922:	6961      	ldr	r1, [r4, #20]
 8001924:	f991 2001 	ldrsb.w	r2, [r1, #1]
 8001928:	1ad2      	subs	r2, r2, r3
 800192a:	0052      	lsls	r2, r2, #1
 800192c:	3a63      	subs	r2, #99	; 0x63
 800192e:	704a      	strb	r2, [r1, #1]
 8001930:	69a1      	ldr	r1, [r4, #24]
 8001932:	f991 2001 	ldrsb.w	r2, [r1, #1]
 8001936:	1ad2      	subs	r2, r2, r3
 8001938:	0052      	lsls	r2, r2, #1
 800193a:	3a63      	subs	r2, #99	; 0x63
 800193c:	704a      	strb	r2, [r1, #1]
 800193e:	69e1      	ldr	r1, [r4, #28]
 8001940:	f991 2001 	ldrsb.w	r2, [r1, #1]
 8001944:	1ad2      	subs	r2, r2, r3
 8001946:	0052      	lsls	r2, r2, #1
 8001948:	3a63      	subs	r2, #99	; 0x63
 800194a:	704a      	strb	r2, [r1, #1]
 800194c:	6a21      	ldr	r1, [r4, #32]
 800194e:	f991 2001 	ldrsb.w	r2, [r1, #1]
 8001952:	1ad2      	subs	r2, r2, r3
 8001954:	0052      	lsls	r2, r2, #1
 8001956:	3a63      	subs	r2, #99	; 0x63
 8001958:	704a      	strb	r2, [r1, #1]
 800195a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800195c:	f991 2001 	ldrsb.w	r2, [r1, #1]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	3b63      	subs	r3, #99	; 0x63
 8001966:	704b      	strb	r3, [r1, #1]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 8001968:	6825      	ldr	r5, [r4, #0]
 800196a:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800196e:	6863      	ldr	r3, [r4, #4]
 8001970:	68a1      	ldr	r1, [r4, #8]
 8001972:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001976:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800197a:	4413      	add	r3, r2
 800197c:	4419      	add	r1, r3
 800197e:	68e3      	ldr	r3, [r4, #12]
 8001980:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001984:	440b      	add	r3, r1
 8001986:	6921      	ldr	r1, [r4, #16]
 8001988:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800198c:	4419      	add	r1, r3
 800198e:	6963      	ldr	r3, [r4, #20]
 8001990:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001994:	440b      	add	r3, r1
 8001996:	69a1      	ldr	r1, [r4, #24]
 8001998:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800199c:	4419      	add	r1, r3
 800199e:	69e3      	ldr	r3, [r4, #28]
 80019a0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80019a4:	440b      	add	r3, r1
 80019a6:	6a21      	ldr	r1, [r4, #32]
 80019a8:	f991 1002 	ldrsb.w	r1, [r1, #2]
 80019ac:	4419      	add	r1, r3
 80019ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019b0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80019b4:	440b      	add	r3, r1
 80019b6:	b21b      	sxth	r3, r3
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 80019b8:	fb93 f3f0 	sdiv	r3, r3, r0
 80019bc:	1ad2      	subs	r2, r2, r3
 80019be:	0052      	lsls	r2, r2, #1
 80019c0:	3a63      	subs	r2, #99	; 0x63
 80019c2:	70aa      	strb	r2, [r5, #2]
 80019c4:	6861      	ldr	r1, [r4, #4]
 80019c6:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80019ca:	1ad2      	subs	r2, r2, r3
 80019cc:	0052      	lsls	r2, r2, #1
 80019ce:	3a63      	subs	r2, #99	; 0x63
 80019d0:	708a      	strb	r2, [r1, #2]
 80019d2:	68a1      	ldr	r1, [r4, #8]
 80019d4:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80019d8:	1ad2      	subs	r2, r2, r3
 80019da:	0052      	lsls	r2, r2, #1
 80019dc:	3a63      	subs	r2, #99	; 0x63
 80019de:	708a      	strb	r2, [r1, #2]
 80019e0:	68e1      	ldr	r1, [r4, #12]
 80019e2:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80019e6:	1ad2      	subs	r2, r2, r3
 80019e8:	0052      	lsls	r2, r2, #1
 80019ea:	3a63      	subs	r2, #99	; 0x63
 80019ec:	708a      	strb	r2, [r1, #2]
 80019ee:	6921      	ldr	r1, [r4, #16]
 80019f0:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80019f4:	1ad2      	subs	r2, r2, r3
 80019f6:	0052      	lsls	r2, r2, #1
 80019f8:	3a63      	subs	r2, #99	; 0x63
 80019fa:	708a      	strb	r2, [r1, #2]
 80019fc:	6961      	ldr	r1, [r4, #20]
 80019fe:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0052      	lsls	r2, r2, #1
 8001a06:	3a63      	subs	r2, #99	; 0x63
 8001a08:	708a      	strb	r2, [r1, #2]
 8001a0a:	69a1      	ldr	r1, [r4, #24]
 8001a0c:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8001a10:	1ad2      	subs	r2, r2, r3
 8001a12:	0052      	lsls	r2, r2, #1
 8001a14:	3a63      	subs	r2, #99	; 0x63
 8001a16:	708a      	strb	r2, [r1, #2]
 8001a18:	69e1      	ldr	r1, [r4, #28]
 8001a1a:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8001a1e:	1ad2      	subs	r2, r2, r3
 8001a20:	0052      	lsls	r2, r2, #1
 8001a22:	3a63      	subs	r2, #99	; 0x63
 8001a24:	708a      	strb	r2, [r1, #2]
 8001a26:	6a21      	ldr	r1, [r4, #32]
 8001a28:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8001a2c:	1ad2      	subs	r2, r2, r3
 8001a2e:	0052      	lsls	r2, r2, #1
 8001a30:	3a63      	subs	r2, #99	; 0x63
 8001a32:	708a      	strb	r2, [r1, #2]
 8001a34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a36:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	3b63      	subs	r3, #99	; 0x63
 8001a40:	708b      	strb	r3, [r1, #2]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 8001a42:	6825      	ldr	r5, [r4, #0]
 8001a44:	6863      	ldr	r3, [r4, #4]
 8001a46:	68a1      	ldr	r1, [r4, #8]
 8001a48:	f995 2003 	ldrsb.w	r2, [r5, #3]
 8001a4c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001a50:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8001a54:	4413      	add	r3, r2
 8001a56:	4419      	add	r1, r3
 8001a58:	e006      	b.n	8001a68 <treat_spec+0x380>
 8001a5a:	bf00      	nop
 8001a5c:	07c4acdd 	.word	0x07c4acdd
 8001a60:	20000050 	.word	0x20000050
 8001a64:	0800c899 	.word	0x0800c899
 8001a68:	68e3      	ldr	r3, [r4, #12]
 8001a6a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001a6e:	440b      	add	r3, r1
 8001a70:	6921      	ldr	r1, [r4, #16]
 8001a72:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8001a76:	4419      	add	r1, r3
 8001a78:	6963      	ldr	r3, [r4, #20]
 8001a7a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001a7e:	440b      	add	r3, r1
 8001a80:	69a1      	ldr	r1, [r4, #24]
 8001a82:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8001a86:	4419      	add	r1, r3
 8001a88:	69e3      	ldr	r3, [r4, #28]
 8001a8a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001a8e:	440b      	add	r3, r1
 8001a90:	6a21      	ldr	r1, [r4, #32]
 8001a92:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8001a96:	4419      	add	r1, r3
 8001a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a9a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001a9e:	440b      	add	r3, r1
 8001aa0:	b21b      	sxth	r3, r3
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 8001aa2:	fb93 f3f0 	sdiv	r3, r3, r0
 8001aa6:	1ad2      	subs	r2, r2, r3
 8001aa8:	0052      	lsls	r2, r2, #1
 8001aaa:	3a63      	subs	r2, #99	; 0x63
 8001aac:	70ea      	strb	r2, [r5, #3]
 8001aae:	6861      	ldr	r1, [r4, #4]
 8001ab0:	f991 2003 	ldrsb.w	r2, [r1, #3]
 8001ab4:	1ad2      	subs	r2, r2, r3
 8001ab6:	0052      	lsls	r2, r2, #1
 8001ab8:	3a63      	subs	r2, #99	; 0x63
 8001aba:	70ca      	strb	r2, [r1, #3]
 8001abc:	68a1      	ldr	r1, [r4, #8]
 8001abe:	f991 2003 	ldrsb.w	r2, [r1, #3]
 8001ac2:	1ad2      	subs	r2, r2, r3
 8001ac4:	0052      	lsls	r2, r2, #1
 8001ac6:	3a63      	subs	r2, #99	; 0x63
 8001ac8:	70ca      	strb	r2, [r1, #3]
 8001aca:	68e1      	ldr	r1, [r4, #12]
 8001acc:	f991 2003 	ldrsb.w	r2, [r1, #3]
 8001ad0:	1ad2      	subs	r2, r2, r3
 8001ad2:	0052      	lsls	r2, r2, #1
 8001ad4:	3a63      	subs	r2, #99	; 0x63
 8001ad6:	70ca      	strb	r2, [r1, #3]
 8001ad8:	6921      	ldr	r1, [r4, #16]
 8001ada:	f991 2003 	ldrsb.w	r2, [r1, #3]
 8001ade:	1ad2      	subs	r2, r2, r3
 8001ae0:	0052      	lsls	r2, r2, #1
 8001ae2:	3a63      	subs	r2, #99	; 0x63
 8001ae4:	70ca      	strb	r2, [r1, #3]
 8001ae6:	6961      	ldr	r1, [r4, #20]
 8001ae8:	f991 2003 	ldrsb.w	r2, [r1, #3]
 8001aec:	1ad2      	subs	r2, r2, r3
 8001aee:	0052      	lsls	r2, r2, #1
 8001af0:	3a63      	subs	r2, #99	; 0x63
 8001af2:	70ca      	strb	r2, [r1, #3]
 8001af4:	69a1      	ldr	r1, [r4, #24]
 8001af6:	f991 2003 	ldrsb.w	r2, [r1, #3]
 8001afa:	1ad2      	subs	r2, r2, r3
 8001afc:	0052      	lsls	r2, r2, #1
 8001afe:	3a63      	subs	r2, #99	; 0x63
 8001b00:	70ca      	strb	r2, [r1, #3]
 8001b02:	69e1      	ldr	r1, [r4, #28]
 8001b04:	f991 2003 	ldrsb.w	r2, [r1, #3]
 8001b08:	1ad2      	subs	r2, r2, r3
 8001b0a:	0052      	lsls	r2, r2, #1
 8001b0c:	3a63      	subs	r2, #99	; 0x63
 8001b0e:	70ca      	strb	r2, [r1, #3]
 8001b10:	6a21      	ldr	r1, [r4, #32]
 8001b12:	f991 2003 	ldrsb.w	r2, [r1, #3]
 8001b16:	1ad2      	subs	r2, r2, r3
 8001b18:	0052      	lsls	r2, r2, #1
 8001b1a:	3a63      	subs	r2, #99	; 0x63
 8001b1c:	70ca      	strb	r2, [r1, #3]
 8001b1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b20:	f991 2003 	ldrsb.w	r2, [r1, #3]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	3b63      	subs	r3, #99	; 0x63
 8001b2a:	70cb      	strb	r3, [r1, #3]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 8001b2c:	6821      	ldr	r1, [r4, #0]
 8001b2e:	f991 2004 	ldrsb.w	r2, [r1, #4]
 8001b32:	6863      	ldr	r3, [r4, #4]
 8001b34:	68a5      	ldr	r5, [r4, #8]
 8001b36:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001b3a:	f995 5004 	ldrsb.w	r5, [r5, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	441d      	add	r5, r3
 8001b42:	68e3      	ldr	r3, [r4, #12]
 8001b44:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001b48:	442b      	add	r3, r5
 8001b4a:	6925      	ldr	r5, [r4, #16]
 8001b4c:	f995 5004 	ldrsb.w	r5, [r5, #4]
 8001b50:	441d      	add	r5, r3
 8001b52:	6963      	ldr	r3, [r4, #20]
 8001b54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001b58:	442b      	add	r3, r5
 8001b5a:	69a5      	ldr	r5, [r4, #24]
 8001b5c:	f995 5004 	ldrsb.w	r5, [r5, #4]
 8001b60:	441d      	add	r5, r3
 8001b62:	69e3      	ldr	r3, [r4, #28]
 8001b64:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001b68:	442b      	add	r3, r5
 8001b6a:	6a25      	ldr	r5, [r4, #32]
 8001b6c:	f995 5004 	ldrsb.w	r5, [r5, #4]
 8001b70:	441d      	add	r5, r3
 8001b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b74:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001b78:	442b      	add	r3, r5
 8001b7a:	b21b      	sxth	r3, r3
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 8001b7c:	fb93 f3f0 	sdiv	r3, r3, r0
 8001b80:	1ad2      	subs	r2, r2, r3
 8001b82:	0052      	lsls	r2, r2, #1
 8001b84:	3a63      	subs	r2, #99	; 0x63
 8001b86:	710a      	strb	r2, [r1, #4]
 8001b88:	6865      	ldr	r5, [r4, #4]
 8001b8a:	f995 2004 	ldrsb.w	r2, [r5, #4]
 8001b8e:	1ad2      	subs	r2, r2, r3
 8001b90:	0052      	lsls	r2, r2, #1
 8001b92:	3a63      	subs	r2, #99	; 0x63
 8001b94:	712a      	strb	r2, [r5, #4]
 8001b96:	68a5      	ldr	r5, [r4, #8]
 8001b98:	f995 2004 	ldrsb.w	r2, [r5, #4]
 8001b9c:	1ad2      	subs	r2, r2, r3
 8001b9e:	0052      	lsls	r2, r2, #1
 8001ba0:	3a63      	subs	r2, #99	; 0x63
 8001ba2:	712a      	strb	r2, [r5, #4]
 8001ba4:	68e5      	ldr	r5, [r4, #12]
 8001ba6:	f995 2004 	ldrsb.w	r2, [r5, #4]
 8001baa:	1ad2      	subs	r2, r2, r3
 8001bac:	0052      	lsls	r2, r2, #1
 8001bae:	3a63      	subs	r2, #99	; 0x63
 8001bb0:	712a      	strb	r2, [r5, #4]
 8001bb2:	6925      	ldr	r5, [r4, #16]
 8001bb4:	f995 2004 	ldrsb.w	r2, [r5, #4]
 8001bb8:	1ad2      	subs	r2, r2, r3
 8001bba:	0052      	lsls	r2, r2, #1
 8001bbc:	3a63      	subs	r2, #99	; 0x63
 8001bbe:	712a      	strb	r2, [r5, #4]
 8001bc0:	6965      	ldr	r5, [r4, #20]
 8001bc2:	f995 2004 	ldrsb.w	r2, [r5, #4]
 8001bc6:	1ad2      	subs	r2, r2, r3
 8001bc8:	0052      	lsls	r2, r2, #1
 8001bca:	3a63      	subs	r2, #99	; 0x63
 8001bcc:	712a      	strb	r2, [r5, #4]
 8001bce:	69a5      	ldr	r5, [r4, #24]
 8001bd0:	f995 2004 	ldrsb.w	r2, [r5, #4]
 8001bd4:	1ad2      	subs	r2, r2, r3
 8001bd6:	0052      	lsls	r2, r2, #1
 8001bd8:	3a63      	subs	r2, #99	; 0x63
 8001bda:	712a      	strb	r2, [r5, #4]
 8001bdc:	69e5      	ldr	r5, [r4, #28]
 8001bde:	f995 2004 	ldrsb.w	r2, [r5, #4]
 8001be2:	1ad2      	subs	r2, r2, r3
 8001be4:	0052      	lsls	r2, r2, #1
 8001be6:	3a63      	subs	r2, #99	; 0x63
 8001be8:	712a      	strb	r2, [r5, #4]
 8001bea:	6a25      	ldr	r5, [r4, #32]
 8001bec:	f995 2004 	ldrsb.w	r2, [r5, #4]
 8001bf0:	1ad2      	subs	r2, r2, r3
 8001bf2:	0052      	lsls	r2, r2, #1
 8001bf4:	3a63      	subs	r2, #99	; 0x63
 8001bf6:	712a      	strb	r2, [r5, #4]
 8001bf8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001bfa:	f995 2004 	ldrsb.w	r2, [r5, #4]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	3b63      	subs	r3, #99	; 0x63
 8001c04:	712b      	strb	r3, [r5, #4]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 8001c06:	6863      	ldr	r3, [r4, #4]
 8001c08:	68a5      	ldr	r5, [r4, #8]
 8001c0a:	f991 2005 	ldrsb.w	r2, [r1, #5]
 8001c0e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001c12:	f995 5005 	ldrsb.w	r5, [r5, #5]
 8001c16:	4413      	add	r3, r2
 8001c18:	441d      	add	r5, r3
 8001c1a:	68e3      	ldr	r3, [r4, #12]
 8001c1c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001c20:	442b      	add	r3, r5
 8001c22:	6925      	ldr	r5, [r4, #16]
 8001c24:	f995 5005 	ldrsb.w	r5, [r5, #5]
 8001c28:	441d      	add	r5, r3
 8001c2a:	6963      	ldr	r3, [r4, #20]
 8001c2c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001c30:	442b      	add	r3, r5
 8001c32:	69a5      	ldr	r5, [r4, #24]
 8001c34:	f995 5005 	ldrsb.w	r5, [r5, #5]
 8001c38:	441d      	add	r5, r3
 8001c3a:	69e3      	ldr	r3, [r4, #28]
 8001c3c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001c40:	442b      	add	r3, r5
 8001c42:	6a25      	ldr	r5, [r4, #32]
 8001c44:	f995 5005 	ldrsb.w	r5, [r5, #5]
 8001c48:	441d      	add	r5, r3
 8001c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c4c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001c50:	442b      	add	r3, r5
 8001c52:	b21b      	sxth	r3, r3
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 8001c54:	fb93 f3f0 	sdiv	r3, r3, r0
 8001c58:	1ad2      	subs	r2, r2, r3
 8001c5a:	0052      	lsls	r2, r2, #1
 8001c5c:	3a63      	subs	r2, #99	; 0x63
 8001c5e:	714a      	strb	r2, [r1, #5]
 8001c60:	6865      	ldr	r5, [r4, #4]
 8001c62:	f995 2005 	ldrsb.w	r2, [r5, #5]
 8001c66:	1ad2      	subs	r2, r2, r3
 8001c68:	0052      	lsls	r2, r2, #1
 8001c6a:	3a63      	subs	r2, #99	; 0x63
 8001c6c:	716a      	strb	r2, [r5, #5]
 8001c6e:	68a5      	ldr	r5, [r4, #8]
 8001c70:	f995 2005 	ldrsb.w	r2, [r5, #5]
 8001c74:	1ad2      	subs	r2, r2, r3
 8001c76:	0052      	lsls	r2, r2, #1
 8001c78:	3a63      	subs	r2, #99	; 0x63
 8001c7a:	716a      	strb	r2, [r5, #5]
 8001c7c:	68e5      	ldr	r5, [r4, #12]
 8001c7e:	f995 2005 	ldrsb.w	r2, [r5, #5]
 8001c82:	1ad2      	subs	r2, r2, r3
 8001c84:	0052      	lsls	r2, r2, #1
 8001c86:	3a63      	subs	r2, #99	; 0x63
 8001c88:	716a      	strb	r2, [r5, #5]
 8001c8a:	6925      	ldr	r5, [r4, #16]
 8001c8c:	f995 2005 	ldrsb.w	r2, [r5, #5]
 8001c90:	1ad2      	subs	r2, r2, r3
 8001c92:	0052      	lsls	r2, r2, #1
 8001c94:	3a63      	subs	r2, #99	; 0x63
 8001c96:	716a      	strb	r2, [r5, #5]
 8001c98:	6965      	ldr	r5, [r4, #20]
 8001c9a:	f995 2005 	ldrsb.w	r2, [r5, #5]
 8001c9e:	1ad2      	subs	r2, r2, r3
 8001ca0:	0052      	lsls	r2, r2, #1
 8001ca2:	3a63      	subs	r2, #99	; 0x63
 8001ca4:	716a      	strb	r2, [r5, #5]
 8001ca6:	69a5      	ldr	r5, [r4, #24]
 8001ca8:	f995 2005 	ldrsb.w	r2, [r5, #5]
 8001cac:	1ad2      	subs	r2, r2, r3
 8001cae:	0052      	lsls	r2, r2, #1
 8001cb0:	3a63      	subs	r2, #99	; 0x63
 8001cb2:	716a      	strb	r2, [r5, #5]
 8001cb4:	69e5      	ldr	r5, [r4, #28]
 8001cb6:	f995 2005 	ldrsb.w	r2, [r5, #5]
 8001cba:	1ad2      	subs	r2, r2, r3
 8001cbc:	0052      	lsls	r2, r2, #1
 8001cbe:	3a63      	subs	r2, #99	; 0x63
 8001cc0:	716a      	strb	r2, [r5, #5]
 8001cc2:	6a25      	ldr	r5, [r4, #32]
 8001cc4:	f995 2005 	ldrsb.w	r2, [r5, #5]
 8001cc8:	1ad2      	subs	r2, r2, r3
 8001cca:	0052      	lsls	r2, r2, #1
 8001ccc:	3a63      	subs	r2, #99	; 0x63
 8001cce:	716a      	strb	r2, [r5, #5]
 8001cd0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001cd2:	f995 2005 	ldrsb.w	r2, [r5, #5]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	3b63      	subs	r3, #99	; 0x63
 8001cdc:	716b      	strb	r3, [r5, #5]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 8001cde:	6863      	ldr	r3, [r4, #4]
 8001ce0:	f991 2006 	ldrsb.w	r2, [r1, #6]
 8001ce4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001ce8:	68a5      	ldr	r5, [r4, #8]
 8001cea:	f995 5006 	ldrsb.w	r5, [r5, #6]
 8001cee:	4413      	add	r3, r2
 8001cf0:	441d      	add	r5, r3
 8001cf2:	68e3      	ldr	r3, [r4, #12]
 8001cf4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001cf8:	442b      	add	r3, r5
 8001cfa:	6925      	ldr	r5, [r4, #16]
 8001cfc:	f995 5006 	ldrsb.w	r5, [r5, #6]
 8001d00:	441d      	add	r5, r3
 8001d02:	6963      	ldr	r3, [r4, #20]
 8001d04:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001d08:	442b      	add	r3, r5
 8001d0a:	69a5      	ldr	r5, [r4, #24]
 8001d0c:	f995 5006 	ldrsb.w	r5, [r5, #6]
 8001d10:	441d      	add	r5, r3
 8001d12:	69e3      	ldr	r3, [r4, #28]
 8001d14:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001d18:	442b      	add	r3, r5
 8001d1a:	6a25      	ldr	r5, [r4, #32]
 8001d1c:	f995 5006 	ldrsb.w	r5, [r5, #6]
 8001d20:	441d      	add	r5, r3
 8001d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d24:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001d28:	442b      	add	r3, r5
 8001d2a:	b21b      	sxth	r3, r3
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 8001d2c:	fb93 f3f0 	sdiv	r3, r3, r0
 8001d30:	1ad2      	subs	r2, r2, r3
 8001d32:	0052      	lsls	r2, r2, #1
 8001d34:	3a63      	subs	r2, #99	; 0x63
 8001d36:	718a      	strb	r2, [r1, #6]
 8001d38:	6865      	ldr	r5, [r4, #4]
 8001d3a:	f995 2006 	ldrsb.w	r2, [r5, #6]
 8001d3e:	1ad2      	subs	r2, r2, r3
 8001d40:	0052      	lsls	r2, r2, #1
 8001d42:	3a63      	subs	r2, #99	; 0x63
 8001d44:	71aa      	strb	r2, [r5, #6]
 8001d46:	68a5      	ldr	r5, [r4, #8]
 8001d48:	f995 2006 	ldrsb.w	r2, [r5, #6]
 8001d4c:	1ad2      	subs	r2, r2, r3
 8001d4e:	0052      	lsls	r2, r2, #1
 8001d50:	3a63      	subs	r2, #99	; 0x63
 8001d52:	71aa      	strb	r2, [r5, #6]
 8001d54:	68e5      	ldr	r5, [r4, #12]
 8001d56:	f995 2006 	ldrsb.w	r2, [r5, #6]
 8001d5a:	1ad2      	subs	r2, r2, r3
 8001d5c:	0052      	lsls	r2, r2, #1
 8001d5e:	3a63      	subs	r2, #99	; 0x63
 8001d60:	71aa      	strb	r2, [r5, #6]
 8001d62:	6925      	ldr	r5, [r4, #16]
 8001d64:	f995 2006 	ldrsb.w	r2, [r5, #6]
 8001d68:	1ad2      	subs	r2, r2, r3
 8001d6a:	0052      	lsls	r2, r2, #1
 8001d6c:	3a63      	subs	r2, #99	; 0x63
 8001d6e:	71aa      	strb	r2, [r5, #6]
 8001d70:	6965      	ldr	r5, [r4, #20]
 8001d72:	f995 2006 	ldrsb.w	r2, [r5, #6]
 8001d76:	1ad2      	subs	r2, r2, r3
 8001d78:	0052      	lsls	r2, r2, #1
 8001d7a:	3a63      	subs	r2, #99	; 0x63
 8001d7c:	71aa      	strb	r2, [r5, #6]
 8001d7e:	69a5      	ldr	r5, [r4, #24]
 8001d80:	f995 2006 	ldrsb.w	r2, [r5, #6]
 8001d84:	1ad2      	subs	r2, r2, r3
 8001d86:	0052      	lsls	r2, r2, #1
 8001d88:	3a63      	subs	r2, #99	; 0x63
 8001d8a:	71aa      	strb	r2, [r5, #6]
 8001d8c:	69e5      	ldr	r5, [r4, #28]
 8001d8e:	f995 2006 	ldrsb.w	r2, [r5, #6]
 8001d92:	1ad2      	subs	r2, r2, r3
 8001d94:	0052      	lsls	r2, r2, #1
 8001d96:	3a63      	subs	r2, #99	; 0x63
 8001d98:	71aa      	strb	r2, [r5, #6]
 8001d9a:	6a25      	ldr	r5, [r4, #32]
 8001d9c:	f995 2006 	ldrsb.w	r2, [r5, #6]
 8001da0:	1ad2      	subs	r2, r2, r3
 8001da2:	0052      	lsls	r2, r2, #1
 8001da4:	3a63      	subs	r2, #99	; 0x63
 8001da6:	71aa      	strb	r2, [r5, #6]
 8001da8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001daa:	f995 2006 	ldrsb.w	r2, [r5, #6]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	3b63      	subs	r3, #99	; 0x63
 8001db4:	71ab      	strb	r3, [r5, #6]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 8001db6:	6863      	ldr	r3, [r4, #4]
 8001db8:	68a5      	ldr	r5, [r4, #8]
 8001dba:	f991 2007 	ldrsb.w	r2, [r1, #7]
 8001dbe:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001dc2:	f995 5007 	ldrsb.w	r5, [r5, #7]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	441d      	add	r5, r3
 8001dca:	68e3      	ldr	r3, [r4, #12]
 8001dcc:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001dd0:	442b      	add	r3, r5
 8001dd2:	6925      	ldr	r5, [r4, #16]
 8001dd4:	f995 5007 	ldrsb.w	r5, [r5, #7]
 8001dd8:	441d      	add	r5, r3
 8001dda:	6963      	ldr	r3, [r4, #20]
 8001ddc:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001de0:	442b      	add	r3, r5
 8001de2:	69a5      	ldr	r5, [r4, #24]
 8001de4:	f995 5007 	ldrsb.w	r5, [r5, #7]
 8001de8:	441d      	add	r5, r3
 8001dea:	69e3      	ldr	r3, [r4, #28]
 8001dec:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001df0:	442b      	add	r3, r5
 8001df2:	6a25      	ldr	r5, [r4, #32]
 8001df4:	f995 5007 	ldrsb.w	r5, [r5, #7]
 8001df8:	441d      	add	r5, r3
 8001dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dfc:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001e00:	442b      	add	r3, r5
 8001e02:	b21b      	sxth	r3, r3
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 8001e04:	fb93 f3f0 	sdiv	r3, r3, r0
 8001e08:	1ad2      	subs	r2, r2, r3
 8001e0a:	0052      	lsls	r2, r2, #1
 8001e0c:	3a63      	subs	r2, #99	; 0x63
 8001e0e:	71ca      	strb	r2, [r1, #7]
 8001e10:	6865      	ldr	r5, [r4, #4]
 8001e12:	f995 2007 	ldrsb.w	r2, [r5, #7]
 8001e16:	1ad2      	subs	r2, r2, r3
 8001e18:	0052      	lsls	r2, r2, #1
 8001e1a:	3a63      	subs	r2, #99	; 0x63
 8001e1c:	71ea      	strb	r2, [r5, #7]
 8001e1e:	68a5      	ldr	r5, [r4, #8]
 8001e20:	f995 2007 	ldrsb.w	r2, [r5, #7]
 8001e24:	1ad2      	subs	r2, r2, r3
 8001e26:	0052      	lsls	r2, r2, #1
 8001e28:	3a63      	subs	r2, #99	; 0x63
 8001e2a:	71ea      	strb	r2, [r5, #7]
 8001e2c:	68e5      	ldr	r5, [r4, #12]
 8001e2e:	f995 2007 	ldrsb.w	r2, [r5, #7]
 8001e32:	1ad2      	subs	r2, r2, r3
 8001e34:	0052      	lsls	r2, r2, #1
 8001e36:	3a63      	subs	r2, #99	; 0x63
 8001e38:	71ea      	strb	r2, [r5, #7]
 8001e3a:	6925      	ldr	r5, [r4, #16]
 8001e3c:	f995 2007 	ldrsb.w	r2, [r5, #7]
 8001e40:	1ad2      	subs	r2, r2, r3
 8001e42:	0052      	lsls	r2, r2, #1
 8001e44:	3a63      	subs	r2, #99	; 0x63
 8001e46:	71ea      	strb	r2, [r5, #7]
 8001e48:	6965      	ldr	r5, [r4, #20]
 8001e4a:	f995 2007 	ldrsb.w	r2, [r5, #7]
 8001e4e:	1ad2      	subs	r2, r2, r3
 8001e50:	0052      	lsls	r2, r2, #1
 8001e52:	3a63      	subs	r2, #99	; 0x63
 8001e54:	71ea      	strb	r2, [r5, #7]
 8001e56:	69a5      	ldr	r5, [r4, #24]
 8001e58:	f995 2007 	ldrsb.w	r2, [r5, #7]
 8001e5c:	1ad2      	subs	r2, r2, r3
 8001e5e:	0052      	lsls	r2, r2, #1
 8001e60:	3a63      	subs	r2, #99	; 0x63
 8001e62:	71ea      	strb	r2, [r5, #7]
 8001e64:	69e5      	ldr	r5, [r4, #28]
 8001e66:	f995 2007 	ldrsb.w	r2, [r5, #7]
 8001e6a:	1ad2      	subs	r2, r2, r3
 8001e6c:	0052      	lsls	r2, r2, #1
 8001e6e:	3a63      	subs	r2, #99	; 0x63
 8001e70:	71ea      	strb	r2, [r5, #7]
 8001e72:	6a25      	ldr	r5, [r4, #32]
 8001e74:	f995 2007 	ldrsb.w	r2, [r5, #7]
 8001e78:	1ad2      	subs	r2, r2, r3
 8001e7a:	0052      	lsls	r2, r2, #1
 8001e7c:	3a63      	subs	r2, #99	; 0x63
 8001e7e:	71ea      	strb	r2, [r5, #7]
 8001e80:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001e82:	f995 2007 	ldrsb.w	r2, [r5, #7]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	3b63      	subs	r3, #99	; 0x63
 8001e8c:	71eb      	strb	r3, [r5, #7]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 8001e8e:	6862      	ldr	r2, [r4, #4]
 8001e90:	68a6      	ldr	r6, [r4, #8]
 8001e92:	f991 5008 	ldrsb.w	r5, [r1, #8]
 8001e96:	f992 3008 	ldrsb.w	r3, [r2, #8]
 8001e9a:	f996 6008 	ldrsb.w	r6, [r6, #8]
 8001e9e:	442b      	add	r3, r5
 8001ea0:	441e      	add	r6, r3
 8001ea2:	68e3      	ldr	r3, [r4, #12]
 8001ea4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ea8:	4433      	add	r3, r6
 8001eaa:	6926      	ldr	r6, [r4, #16]
 8001eac:	f996 6008 	ldrsb.w	r6, [r6, #8]
 8001eb0:	441e      	add	r6, r3
 8001eb2:	6963      	ldr	r3, [r4, #20]
 8001eb4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001eb8:	4433      	add	r3, r6
 8001eba:	69a6      	ldr	r6, [r4, #24]
 8001ebc:	f996 6008 	ldrsb.w	r6, [r6, #8]
 8001ec0:	441e      	add	r6, r3
 8001ec2:	69e3      	ldr	r3, [r4, #28]
 8001ec4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ec8:	4433      	add	r3, r6
 8001eca:	6a26      	ldr	r6, [r4, #32]
 8001ecc:	f996 6008 	ldrsb.w	r6, [r6, #8]
 8001ed0:	441e      	add	r6, r3
 8001ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ed4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ed8:	4433      	add	r3, r6
 8001eda:	b21b      	sxth	r3, r3
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 8001edc:	fb93 f3f0 	sdiv	r3, r3, r0
 8001ee0:	1aed      	subs	r5, r5, r3
 8001ee2:	006d      	lsls	r5, r5, #1
 8001ee4:	3d63      	subs	r5, #99	; 0x63
 8001ee6:	720d      	strb	r5, [r1, #8]
 8001ee8:	f992 5008 	ldrsb.w	r5, [r2, #8]
 8001eec:	1aed      	subs	r5, r5, r3
 8001eee:	006d      	lsls	r5, r5, #1
 8001ef0:	3d63      	subs	r5, #99	; 0x63
 8001ef2:	7215      	strb	r5, [r2, #8]
 8001ef4:	68a6      	ldr	r6, [r4, #8]
 8001ef6:	f996 5008 	ldrsb.w	r5, [r6, #8]
 8001efa:	1aed      	subs	r5, r5, r3
 8001efc:	006d      	lsls	r5, r5, #1
 8001efe:	3d63      	subs	r5, #99	; 0x63
 8001f00:	7235      	strb	r5, [r6, #8]
 8001f02:	68e6      	ldr	r6, [r4, #12]
 8001f04:	f996 5008 	ldrsb.w	r5, [r6, #8]
 8001f08:	1aed      	subs	r5, r5, r3
 8001f0a:	006d      	lsls	r5, r5, #1
 8001f0c:	3d63      	subs	r5, #99	; 0x63
 8001f0e:	7235      	strb	r5, [r6, #8]
 8001f10:	6926      	ldr	r6, [r4, #16]
 8001f12:	f996 5008 	ldrsb.w	r5, [r6, #8]
 8001f16:	1aed      	subs	r5, r5, r3
 8001f18:	006d      	lsls	r5, r5, #1
 8001f1a:	3d63      	subs	r5, #99	; 0x63
 8001f1c:	7235      	strb	r5, [r6, #8]
 8001f1e:	6966      	ldr	r6, [r4, #20]
 8001f20:	f996 5008 	ldrsb.w	r5, [r6, #8]
 8001f24:	1aed      	subs	r5, r5, r3
 8001f26:	006d      	lsls	r5, r5, #1
 8001f28:	3d63      	subs	r5, #99	; 0x63
 8001f2a:	7235      	strb	r5, [r6, #8]
 8001f2c:	69a6      	ldr	r6, [r4, #24]
 8001f2e:	f996 5008 	ldrsb.w	r5, [r6, #8]
 8001f32:	1aed      	subs	r5, r5, r3
 8001f34:	006d      	lsls	r5, r5, #1
 8001f36:	3d63      	subs	r5, #99	; 0x63
 8001f38:	7235      	strb	r5, [r6, #8]
 8001f3a:	69e6      	ldr	r6, [r4, #28]
 8001f3c:	f996 5008 	ldrsb.w	r5, [r6, #8]
 8001f40:	1aed      	subs	r5, r5, r3
 8001f42:	006d      	lsls	r5, r5, #1
 8001f44:	3d63      	subs	r5, #99	; 0x63
 8001f46:	7235      	strb	r5, [r6, #8]
 8001f48:	6a26      	ldr	r6, [r4, #32]
 8001f4a:	f996 5008 	ldrsb.w	r5, [r6, #8]
 8001f4e:	1aed      	subs	r5, r5, r3
 8001f50:	006d      	lsls	r5, r5, #1
 8001f52:	3d63      	subs	r5, #99	; 0x63
 8001f54:	7235      	strb	r5, [r6, #8]
 8001f56:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8001f58:	f996 5008 	ldrsb.w	r5, [r6, #8]
 8001f5c:	1aeb      	subs	r3, r5, r3
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	3b63      	subs	r3, #99	; 0x63
 8001f62:	7233      	strb	r3, [r6, #8]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 8001f64:	68a6      	ldr	r6, [r4, #8]
 8001f66:	f991 5009 	ldrsb.w	r5, [r1, #9]
 8001f6a:	f992 3009 	ldrsb.w	r3, [r2, #9]
 8001f6e:	f996 6009 	ldrsb.w	r6, [r6, #9]
 8001f72:	442b      	add	r3, r5
 8001f74:	441e      	add	r6, r3
 8001f76:	68e3      	ldr	r3, [r4, #12]
 8001f78:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001f7c:	4433      	add	r3, r6
 8001f7e:	6926      	ldr	r6, [r4, #16]
 8001f80:	f996 6009 	ldrsb.w	r6, [r6, #9]
 8001f84:	441e      	add	r6, r3
 8001f86:	6963      	ldr	r3, [r4, #20]
 8001f88:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001f8c:	4433      	add	r3, r6
 8001f8e:	69a6      	ldr	r6, [r4, #24]
 8001f90:	f996 6009 	ldrsb.w	r6, [r6, #9]
 8001f94:	441e      	add	r6, r3
 8001f96:	69e3      	ldr	r3, [r4, #28]
 8001f98:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001f9c:	4433      	add	r3, r6
 8001f9e:	6a26      	ldr	r6, [r4, #32]
 8001fa0:	f996 6009 	ldrsb.w	r6, [r6, #9]
 8001fa4:	441e      	add	r6, r3
 8001fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fa8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001fac:	4433      	add	r3, r6
 8001fae:	b21b      	sxth	r3, r3
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 8001fb0:	fb93 f3f0 	sdiv	r3, r3, r0
 8001fb4:	1aed      	subs	r5, r5, r3
 8001fb6:	006d      	lsls	r5, r5, #1
 8001fb8:	3d63      	subs	r5, #99	; 0x63
 8001fba:	724d      	strb	r5, [r1, #9]
 8001fbc:	f992 5009 	ldrsb.w	r5, [r2, #9]
 8001fc0:	1aed      	subs	r5, r5, r3
 8001fc2:	006d      	lsls	r5, r5, #1
 8001fc4:	3d63      	subs	r5, #99	; 0x63
 8001fc6:	7255      	strb	r5, [r2, #9]
 8001fc8:	68a6      	ldr	r6, [r4, #8]
 8001fca:	f996 5009 	ldrsb.w	r5, [r6, #9]
 8001fce:	1aed      	subs	r5, r5, r3
 8001fd0:	006d      	lsls	r5, r5, #1
 8001fd2:	3d63      	subs	r5, #99	; 0x63
 8001fd4:	7275      	strb	r5, [r6, #9]
 8001fd6:	68e6      	ldr	r6, [r4, #12]
 8001fd8:	f996 5009 	ldrsb.w	r5, [r6, #9]
 8001fdc:	1aed      	subs	r5, r5, r3
 8001fde:	006d      	lsls	r5, r5, #1
 8001fe0:	3d63      	subs	r5, #99	; 0x63
 8001fe2:	7275      	strb	r5, [r6, #9]
 8001fe4:	6926      	ldr	r6, [r4, #16]
 8001fe6:	f996 5009 	ldrsb.w	r5, [r6, #9]
 8001fea:	1aed      	subs	r5, r5, r3
 8001fec:	006d      	lsls	r5, r5, #1
 8001fee:	3d63      	subs	r5, #99	; 0x63
 8001ff0:	7275      	strb	r5, [r6, #9]
 8001ff2:	6966      	ldr	r6, [r4, #20]
 8001ff4:	f996 5009 	ldrsb.w	r5, [r6, #9]
 8001ff8:	1aed      	subs	r5, r5, r3
 8001ffa:	006d      	lsls	r5, r5, #1
 8001ffc:	3d63      	subs	r5, #99	; 0x63
 8001ffe:	7275      	strb	r5, [r6, #9]
 8002000:	69a6      	ldr	r6, [r4, #24]
 8002002:	f996 5009 	ldrsb.w	r5, [r6, #9]
 8002006:	1aed      	subs	r5, r5, r3
 8002008:	006d      	lsls	r5, r5, #1
 800200a:	3d63      	subs	r5, #99	; 0x63
 800200c:	7275      	strb	r5, [r6, #9]
 800200e:	69e6      	ldr	r6, [r4, #28]
 8002010:	f996 5009 	ldrsb.w	r5, [r6, #9]
 8002014:	1aed      	subs	r5, r5, r3
 8002016:	006d      	lsls	r5, r5, #1
 8002018:	3d63      	subs	r5, #99	; 0x63
 800201a:	7275      	strb	r5, [r6, #9]
 800201c:	6a26      	ldr	r6, [r4, #32]
 800201e:	f996 5009 	ldrsb.w	r5, [r6, #9]
 8002022:	1aed      	subs	r5, r5, r3
 8002024:	006d      	lsls	r5, r5, #1
 8002026:	3d63      	subs	r5, #99	; 0x63
 8002028:	7275      	strb	r5, [r6, #9]
 800202a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800202c:	f996 5009 	ldrsb.w	r5, [r6, #9]
 8002030:	1aeb      	subs	r3, r5, r3
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	3b63      	subs	r3, #99	; 0x63
 8002036:	7273      	strb	r3, [r6, #9]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 8002038:	68a6      	ldr	r6, [r4, #8]
 800203a:	f991 500a 	ldrsb.w	r5, [r1, #10]
 800203e:	f992 300a 	ldrsb.w	r3, [r2, #10]
 8002042:	f996 600a 	ldrsb.w	r6, [r6, #10]
 8002046:	442b      	add	r3, r5
 8002048:	441e      	add	r6, r3
 800204a:	68e3      	ldr	r3, [r4, #12]
 800204c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002050:	4433      	add	r3, r6
 8002052:	6926      	ldr	r6, [r4, #16]
 8002054:	f996 600a 	ldrsb.w	r6, [r6, #10]
 8002058:	441e      	add	r6, r3
 800205a:	6963      	ldr	r3, [r4, #20]
 800205c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002060:	4433      	add	r3, r6
 8002062:	69a6      	ldr	r6, [r4, #24]
 8002064:	f996 600a 	ldrsb.w	r6, [r6, #10]
 8002068:	441e      	add	r6, r3
 800206a:	69e3      	ldr	r3, [r4, #28]
 800206c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002070:	4433      	add	r3, r6
 8002072:	6a26      	ldr	r6, [r4, #32]
 8002074:	f996 600a 	ldrsb.w	r6, [r6, #10]
 8002078:	441e      	add	r6, r3
 800207a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800207c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002080:	4433      	add	r3, r6
 8002082:	b21b      	sxth	r3, r3
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 8002084:	fb93 f3f0 	sdiv	r3, r3, r0
 8002088:	1aed      	subs	r5, r5, r3
 800208a:	006d      	lsls	r5, r5, #1
 800208c:	3d63      	subs	r5, #99	; 0x63
 800208e:	728d      	strb	r5, [r1, #10]
 8002090:	f992 500a 	ldrsb.w	r5, [r2, #10]
 8002094:	1aed      	subs	r5, r5, r3
 8002096:	006d      	lsls	r5, r5, #1
 8002098:	3d63      	subs	r5, #99	; 0x63
 800209a:	7295      	strb	r5, [r2, #10]
 800209c:	68a6      	ldr	r6, [r4, #8]
 800209e:	f996 500a 	ldrsb.w	r5, [r6, #10]
 80020a2:	1aed      	subs	r5, r5, r3
 80020a4:	006d      	lsls	r5, r5, #1
 80020a6:	3d63      	subs	r5, #99	; 0x63
 80020a8:	72b5      	strb	r5, [r6, #10]
 80020aa:	68e6      	ldr	r6, [r4, #12]
 80020ac:	f996 500a 	ldrsb.w	r5, [r6, #10]
 80020b0:	1aed      	subs	r5, r5, r3
 80020b2:	006d      	lsls	r5, r5, #1
 80020b4:	3d63      	subs	r5, #99	; 0x63
 80020b6:	72b5      	strb	r5, [r6, #10]
 80020b8:	6926      	ldr	r6, [r4, #16]
 80020ba:	f996 500a 	ldrsb.w	r5, [r6, #10]
 80020be:	1aed      	subs	r5, r5, r3
 80020c0:	006d      	lsls	r5, r5, #1
 80020c2:	3d63      	subs	r5, #99	; 0x63
 80020c4:	72b5      	strb	r5, [r6, #10]
 80020c6:	6966      	ldr	r6, [r4, #20]
 80020c8:	f996 500a 	ldrsb.w	r5, [r6, #10]
 80020cc:	1aed      	subs	r5, r5, r3
 80020ce:	006d      	lsls	r5, r5, #1
 80020d0:	3d63      	subs	r5, #99	; 0x63
 80020d2:	72b5      	strb	r5, [r6, #10]
 80020d4:	69a6      	ldr	r6, [r4, #24]
 80020d6:	f996 500a 	ldrsb.w	r5, [r6, #10]
 80020da:	1aed      	subs	r5, r5, r3
 80020dc:	006d      	lsls	r5, r5, #1
 80020de:	3d63      	subs	r5, #99	; 0x63
 80020e0:	72b5      	strb	r5, [r6, #10]
 80020e2:	69e6      	ldr	r6, [r4, #28]
 80020e4:	f996 500a 	ldrsb.w	r5, [r6, #10]
 80020e8:	1aed      	subs	r5, r5, r3
 80020ea:	006d      	lsls	r5, r5, #1
 80020ec:	3d63      	subs	r5, #99	; 0x63
 80020ee:	72b5      	strb	r5, [r6, #10]
 80020f0:	6a26      	ldr	r6, [r4, #32]
 80020f2:	f996 500a 	ldrsb.w	r5, [r6, #10]
 80020f6:	1aed      	subs	r5, r5, r3
 80020f8:	006d      	lsls	r5, r5, #1
 80020fa:	3d63      	subs	r5, #99	; 0x63
 80020fc:	72b5      	strb	r5, [r6, #10]
 80020fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002100:	f996 500a 	ldrsb.w	r5, [r6, #10]
 8002104:	1aeb      	subs	r3, r5, r3
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	3b63      	subs	r3, #99	; 0x63
 800210a:	72b3      	strb	r3, [r6, #10]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 800210c:	68a6      	ldr	r6, [r4, #8]
 800210e:	f991 500b 	ldrsb.w	r5, [r1, #11]
 8002112:	f992 300b 	ldrsb.w	r3, [r2, #11]
 8002116:	f996 600b 	ldrsb.w	r6, [r6, #11]
 800211a:	442b      	add	r3, r5
 800211c:	441e      	add	r6, r3
 800211e:	68e3      	ldr	r3, [r4, #12]
 8002120:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8002124:	4433      	add	r3, r6
 8002126:	6926      	ldr	r6, [r4, #16]
 8002128:	f996 600b 	ldrsb.w	r6, [r6, #11]
 800212c:	441e      	add	r6, r3
 800212e:	6963      	ldr	r3, [r4, #20]
 8002130:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8002134:	4433      	add	r3, r6
 8002136:	69a6      	ldr	r6, [r4, #24]
 8002138:	f996 600b 	ldrsb.w	r6, [r6, #11]
 800213c:	441e      	add	r6, r3
 800213e:	69e3      	ldr	r3, [r4, #28]
 8002140:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8002144:	4433      	add	r3, r6
 8002146:	6a26      	ldr	r6, [r4, #32]
 8002148:	f996 600b 	ldrsb.w	r6, [r6, #11]
 800214c:	441e      	add	r6, r3
 800214e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002150:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8002154:	4433      	add	r3, r6
 8002156:	b21b      	sxth	r3, r3
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 8002158:	fb93 f3f0 	sdiv	r3, r3, r0
 800215c:	1aed      	subs	r5, r5, r3
 800215e:	006d      	lsls	r5, r5, #1
 8002160:	3d63      	subs	r5, #99	; 0x63
 8002162:	72cd      	strb	r5, [r1, #11]
 8002164:	f992 000b 	ldrsb.w	r0, [r2, #11]
 8002168:	1ac0      	subs	r0, r0, r3
 800216a:	0040      	lsls	r0, r0, #1
 800216c:	3863      	subs	r0, #99	; 0x63
 800216e:	72d0      	strb	r0, [r2, #11]
 8002170:	68a5      	ldr	r5, [r4, #8]
 8002172:	f995 000b 	ldrsb.w	r0, [r5, #11]
 8002176:	1ac0      	subs	r0, r0, r3
 8002178:	0040      	lsls	r0, r0, #1
 800217a:	3863      	subs	r0, #99	; 0x63
 800217c:	72e8      	strb	r0, [r5, #11]
 800217e:	68e5      	ldr	r5, [r4, #12]
 8002180:	f995 000b 	ldrsb.w	r0, [r5, #11]
 8002184:	1ac0      	subs	r0, r0, r3
 8002186:	0040      	lsls	r0, r0, #1
 8002188:	3863      	subs	r0, #99	; 0x63
 800218a:	72e8      	strb	r0, [r5, #11]
 800218c:	6925      	ldr	r5, [r4, #16]
 800218e:	f995 000b 	ldrsb.w	r0, [r5, #11]
 8002192:	1ac0      	subs	r0, r0, r3
 8002194:	0040      	lsls	r0, r0, #1
 8002196:	3863      	subs	r0, #99	; 0x63
 8002198:	72e8      	strb	r0, [r5, #11]
 800219a:	6965      	ldr	r5, [r4, #20]
 800219c:	f995 000b 	ldrsb.w	r0, [r5, #11]
 80021a0:	1ac0      	subs	r0, r0, r3
 80021a2:	0040      	lsls	r0, r0, #1
 80021a4:	3863      	subs	r0, #99	; 0x63
 80021a6:	72e8      	strb	r0, [r5, #11]
 80021a8:	69a5      	ldr	r5, [r4, #24]
 80021aa:	f995 000b 	ldrsb.w	r0, [r5, #11]
 80021ae:	1ac0      	subs	r0, r0, r3
 80021b0:	0040      	lsls	r0, r0, #1
 80021b2:	3863      	subs	r0, #99	; 0x63
 80021b4:	72e8      	strb	r0, [r5, #11]
 80021b6:	69e5      	ldr	r5, [r4, #28]
 80021b8:	f995 000b 	ldrsb.w	r0, [r5, #11]
 80021bc:	1ac0      	subs	r0, r0, r3
 80021be:	0040      	lsls	r0, r0, #1
 80021c0:	3863      	subs	r0, #99	; 0x63
 80021c2:	72e8      	strb	r0, [r5, #11]
 80021c4:	6a25      	ldr	r5, [r4, #32]
 80021c6:	f995 000b 	ldrsb.w	r0, [r5, #11]
 80021ca:	1ac0      	subs	r0, r0, r3
 80021cc:	0040      	lsls	r0, r0, #1
 80021ce:	3863      	subs	r0, #99	; 0x63
 80021d0:	72e8      	strb	r0, [r5, #11]
 80021d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80021d4:	f995 000b 	ldrsb.w	r0, [r5, #11]
 80021d8:	1ac3      	subs	r3, r0, r3
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	3b63      	subs	r3, #99	; 0x63
 80021de:	72eb      	strb	r3, [r5, #11]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 80021e0:	68a0      	ldr	r0, [r4, #8]
 80021e2:	f991 500c 	ldrsb.w	r5, [r1, #12]
 80021e6:	f992 600c 	ldrsb.w	r6, [r2, #12]
 80021ea:	68e4      	ldr	r4, [r4, #12]
 80021ec:	f990 300c 	ldrsb.w	r3, [r0, #12]
 80021f0:	f994 400c 	ldrsb.w	r4, [r4, #12]
 80021f4:	442e      	add	r6, r5
 80021f6:	4433      	add	r3, r6
 80021f8:	441c      	add	r4, r3
 80021fa:	4bdd      	ldr	r3, [pc, #884]	; (8002570 <treat_spec+0xe88>)
 80021fc:	691e      	ldr	r6, [r3, #16]
 80021fe:	f996 600c 	ldrsb.w	r6, [r6, #12]
 8002202:	4426      	add	r6, r4
 8002204:	695c      	ldr	r4, [r3, #20]
 8002206:	f994 400c 	ldrsb.w	r4, [r4, #12]
 800220a:	4434      	add	r4, r6
 800220c:	699e      	ldr	r6, [r3, #24]
 800220e:	f996 600c 	ldrsb.w	r6, [r6, #12]
 8002212:	4426      	add	r6, r4
 8002214:	69dc      	ldr	r4, [r3, #28]
 8002216:	f994 400c 	ldrsb.w	r4, [r4, #12]
 800221a:	4434      	add	r4, r6
 800221c:	6a1e      	ldr	r6, [r3, #32]
 800221e:	f996 600c 	ldrsb.w	r6, [r6, #12]
 8002222:	4426      	add	r6, r4
 8002224:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002226:	f994 400c 	ldrsb.w	r4, [r4, #12]
 800222a:	4434      	add	r4, r6
		mean /= N_MELVEC;
 800222c:	270a      	movs	r7, #10
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 800222e:	b224      	sxth	r4, r4
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 8002230:	fb94 f4f7 	sdiv	r4, r4, r7
 8002234:	1b2d      	subs	r5, r5, r4
 8002236:	006d      	lsls	r5, r5, #1
 8002238:	3d63      	subs	r5, #99	; 0x63
 800223a:	730d      	strb	r5, [r1, #12]
 800223c:	f992 500c 	ldrsb.w	r5, [r2, #12]
 8002240:	1b2d      	subs	r5, r5, r4
 8002242:	006d      	lsls	r5, r5, #1
 8002244:	3d63      	subs	r5, #99	; 0x63
 8002246:	7315      	strb	r5, [r2, #12]
 8002248:	f990 500c 	ldrsb.w	r5, [r0, #12]
 800224c:	1b2d      	subs	r5, r5, r4
 800224e:	006d      	lsls	r5, r5, #1
 8002250:	3d63      	subs	r5, #99	; 0x63
 8002252:	7305      	strb	r5, [r0, #12]
 8002254:	68de      	ldr	r6, [r3, #12]
 8002256:	f996 500c 	ldrsb.w	r5, [r6, #12]
 800225a:	1b2d      	subs	r5, r5, r4
 800225c:	006d      	lsls	r5, r5, #1
 800225e:	3d63      	subs	r5, #99	; 0x63
 8002260:	7335      	strb	r5, [r6, #12]
 8002262:	691e      	ldr	r6, [r3, #16]
 8002264:	f996 500c 	ldrsb.w	r5, [r6, #12]
 8002268:	1b2d      	subs	r5, r5, r4
 800226a:	006d      	lsls	r5, r5, #1
 800226c:	3d63      	subs	r5, #99	; 0x63
 800226e:	7335      	strb	r5, [r6, #12]
 8002270:	695e      	ldr	r6, [r3, #20]
 8002272:	f996 500c 	ldrsb.w	r5, [r6, #12]
 8002276:	1b2d      	subs	r5, r5, r4
 8002278:	006d      	lsls	r5, r5, #1
 800227a:	3d63      	subs	r5, #99	; 0x63
 800227c:	7335      	strb	r5, [r6, #12]
 800227e:	699e      	ldr	r6, [r3, #24]
 8002280:	f996 500c 	ldrsb.w	r5, [r6, #12]
 8002284:	1b2d      	subs	r5, r5, r4
 8002286:	006d      	lsls	r5, r5, #1
 8002288:	3d63      	subs	r5, #99	; 0x63
 800228a:	7335      	strb	r5, [r6, #12]
 800228c:	69de      	ldr	r6, [r3, #28]
 800228e:	f996 500c 	ldrsb.w	r5, [r6, #12]
 8002292:	1b2d      	subs	r5, r5, r4
 8002294:	006d      	lsls	r5, r5, #1
 8002296:	3d63      	subs	r5, #99	; 0x63
 8002298:	7335      	strb	r5, [r6, #12]
 800229a:	6a1e      	ldr	r6, [r3, #32]
 800229c:	f996 500c 	ldrsb.w	r5, [r6, #12]
 80022a0:	1b2d      	subs	r5, r5, r4
 80022a2:	006d      	lsls	r5, r5, #1
 80022a4:	3d63      	subs	r5, #99	; 0x63
 80022a6:	7335      	strb	r5, [r6, #12]
 80022a8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80022aa:	f996 500c 	ldrsb.w	r5, [r6, #12]
 80022ae:	1b2c      	subs	r4, r5, r4
 80022b0:	0064      	lsls	r4, r4, #1
 80022b2:	3c63      	subs	r4, #99	; 0x63
 80022b4:	7334      	strb	r4, [r6, #12]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 80022b6:	f991 500d 	ldrsb.w	r5, [r1, #13]
 80022ba:	f992 400d 	ldrsb.w	r4, [r2, #13]
 80022be:	f990 600d 	ldrsb.w	r6, [r0, #13]
 80022c2:	442c      	add	r4, r5
 80022c4:	4426      	add	r6, r4
 80022c6:	68dc      	ldr	r4, [r3, #12]
 80022c8:	f994 400d 	ldrsb.w	r4, [r4, #13]
 80022cc:	4434      	add	r4, r6
 80022ce:	691e      	ldr	r6, [r3, #16]
 80022d0:	f996 600d 	ldrsb.w	r6, [r6, #13]
 80022d4:	4426      	add	r6, r4
 80022d6:	695c      	ldr	r4, [r3, #20]
 80022d8:	f994 400d 	ldrsb.w	r4, [r4, #13]
 80022dc:	4434      	add	r4, r6
 80022de:	699e      	ldr	r6, [r3, #24]
 80022e0:	f996 600d 	ldrsb.w	r6, [r6, #13]
 80022e4:	4426      	add	r6, r4
 80022e6:	69dc      	ldr	r4, [r3, #28]
 80022e8:	f994 400d 	ldrsb.w	r4, [r4, #13]
 80022ec:	4434      	add	r4, r6
 80022ee:	6a1e      	ldr	r6, [r3, #32]
 80022f0:	f996 600d 	ldrsb.w	r6, [r6, #13]
 80022f4:	4426      	add	r6, r4
 80022f6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80022f8:	f994 400d 	ldrsb.w	r4, [r4, #13]
 80022fc:	4434      	add	r4, r6
 80022fe:	b224      	sxth	r4, r4
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 8002300:	fb94 f4f7 	sdiv	r4, r4, r7
 8002304:	1b2d      	subs	r5, r5, r4
 8002306:	006d      	lsls	r5, r5, #1
 8002308:	3d63      	subs	r5, #99	; 0x63
 800230a:	734d      	strb	r5, [r1, #13]
 800230c:	f992 500d 	ldrsb.w	r5, [r2, #13]
 8002310:	1b2d      	subs	r5, r5, r4
 8002312:	006d      	lsls	r5, r5, #1
 8002314:	3d63      	subs	r5, #99	; 0x63
 8002316:	7355      	strb	r5, [r2, #13]
 8002318:	f990 500d 	ldrsb.w	r5, [r0, #13]
 800231c:	1b2d      	subs	r5, r5, r4
 800231e:	006d      	lsls	r5, r5, #1
 8002320:	3d63      	subs	r5, #99	; 0x63
 8002322:	7345      	strb	r5, [r0, #13]
 8002324:	68de      	ldr	r6, [r3, #12]
 8002326:	f996 500d 	ldrsb.w	r5, [r6, #13]
 800232a:	1b2d      	subs	r5, r5, r4
 800232c:	006d      	lsls	r5, r5, #1
 800232e:	3d63      	subs	r5, #99	; 0x63
 8002330:	7375      	strb	r5, [r6, #13]
 8002332:	691e      	ldr	r6, [r3, #16]
 8002334:	f996 500d 	ldrsb.w	r5, [r6, #13]
 8002338:	1b2d      	subs	r5, r5, r4
 800233a:	006d      	lsls	r5, r5, #1
 800233c:	3d63      	subs	r5, #99	; 0x63
 800233e:	7375      	strb	r5, [r6, #13]
 8002340:	695e      	ldr	r6, [r3, #20]
 8002342:	f996 500d 	ldrsb.w	r5, [r6, #13]
 8002346:	1b2d      	subs	r5, r5, r4
 8002348:	006d      	lsls	r5, r5, #1
 800234a:	3d63      	subs	r5, #99	; 0x63
 800234c:	7375      	strb	r5, [r6, #13]
 800234e:	699e      	ldr	r6, [r3, #24]
 8002350:	f996 500d 	ldrsb.w	r5, [r6, #13]
 8002354:	1b2d      	subs	r5, r5, r4
 8002356:	006d      	lsls	r5, r5, #1
 8002358:	3d63      	subs	r5, #99	; 0x63
 800235a:	7375      	strb	r5, [r6, #13]
 800235c:	69de      	ldr	r6, [r3, #28]
 800235e:	f996 500d 	ldrsb.w	r5, [r6, #13]
 8002362:	1b2d      	subs	r5, r5, r4
 8002364:	006d      	lsls	r5, r5, #1
 8002366:	3d63      	subs	r5, #99	; 0x63
 8002368:	7375      	strb	r5, [r6, #13]
 800236a:	6a1e      	ldr	r6, [r3, #32]
 800236c:	f996 500d 	ldrsb.w	r5, [r6, #13]
 8002370:	1b2d      	subs	r5, r5, r4
 8002372:	006d      	lsls	r5, r5, #1
 8002374:	3d63      	subs	r5, #99	; 0x63
 8002376:	7375      	strb	r5, [r6, #13]
 8002378:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800237a:	f996 500d 	ldrsb.w	r5, [r6, #13]
 800237e:	1b2c      	subs	r4, r5, r4
 8002380:	0064      	lsls	r4, r4, #1
 8002382:	3c63      	subs	r4, #99	; 0x63
 8002384:	7374      	strb	r4, [r6, #13]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 8002386:	f991 500e 	ldrsb.w	r5, [r1, #14]
 800238a:	f992 400e 	ldrsb.w	r4, [r2, #14]
 800238e:	f990 600e 	ldrsb.w	r6, [r0, #14]
 8002392:	442c      	add	r4, r5
 8002394:	4426      	add	r6, r4
 8002396:	68dc      	ldr	r4, [r3, #12]
 8002398:	f994 400e 	ldrsb.w	r4, [r4, #14]
 800239c:	4434      	add	r4, r6
 800239e:	691e      	ldr	r6, [r3, #16]
 80023a0:	f996 600e 	ldrsb.w	r6, [r6, #14]
 80023a4:	4426      	add	r6, r4
 80023a6:	695c      	ldr	r4, [r3, #20]
 80023a8:	f994 400e 	ldrsb.w	r4, [r4, #14]
 80023ac:	4434      	add	r4, r6
 80023ae:	699e      	ldr	r6, [r3, #24]
 80023b0:	f996 600e 	ldrsb.w	r6, [r6, #14]
 80023b4:	4426      	add	r6, r4
 80023b6:	69dc      	ldr	r4, [r3, #28]
 80023b8:	f994 400e 	ldrsb.w	r4, [r4, #14]
 80023bc:	4434      	add	r4, r6
 80023be:	6a1e      	ldr	r6, [r3, #32]
 80023c0:	f996 600e 	ldrsb.w	r6, [r6, #14]
 80023c4:	4426      	add	r6, r4
 80023c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80023c8:	f994 400e 	ldrsb.w	r4, [r4, #14]
 80023cc:	4434      	add	r4, r6
 80023ce:	b224      	sxth	r4, r4
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 80023d0:	fb94 f4f7 	sdiv	r4, r4, r7
 80023d4:	1b2d      	subs	r5, r5, r4
 80023d6:	006d      	lsls	r5, r5, #1
 80023d8:	3d63      	subs	r5, #99	; 0x63
 80023da:	738d      	strb	r5, [r1, #14]
 80023dc:	f992 500e 	ldrsb.w	r5, [r2, #14]
 80023e0:	1b2d      	subs	r5, r5, r4
 80023e2:	006d      	lsls	r5, r5, #1
 80023e4:	3d63      	subs	r5, #99	; 0x63
 80023e6:	7395      	strb	r5, [r2, #14]
 80023e8:	f990 500e 	ldrsb.w	r5, [r0, #14]
 80023ec:	1b2d      	subs	r5, r5, r4
 80023ee:	006d      	lsls	r5, r5, #1
 80023f0:	3d63      	subs	r5, #99	; 0x63
 80023f2:	7385      	strb	r5, [r0, #14]
 80023f4:	68de      	ldr	r6, [r3, #12]
 80023f6:	f996 500e 	ldrsb.w	r5, [r6, #14]
 80023fa:	1b2d      	subs	r5, r5, r4
 80023fc:	006d      	lsls	r5, r5, #1
 80023fe:	3d63      	subs	r5, #99	; 0x63
 8002400:	73b5      	strb	r5, [r6, #14]
 8002402:	691e      	ldr	r6, [r3, #16]
 8002404:	f996 500e 	ldrsb.w	r5, [r6, #14]
 8002408:	1b2d      	subs	r5, r5, r4
 800240a:	006d      	lsls	r5, r5, #1
 800240c:	3d63      	subs	r5, #99	; 0x63
 800240e:	73b5      	strb	r5, [r6, #14]
 8002410:	695e      	ldr	r6, [r3, #20]
 8002412:	f996 500e 	ldrsb.w	r5, [r6, #14]
 8002416:	1b2d      	subs	r5, r5, r4
 8002418:	006d      	lsls	r5, r5, #1
 800241a:	3d63      	subs	r5, #99	; 0x63
 800241c:	73b5      	strb	r5, [r6, #14]
 800241e:	699e      	ldr	r6, [r3, #24]
 8002420:	f996 500e 	ldrsb.w	r5, [r6, #14]
 8002424:	1b2d      	subs	r5, r5, r4
 8002426:	006d      	lsls	r5, r5, #1
 8002428:	3d63      	subs	r5, #99	; 0x63
 800242a:	73b5      	strb	r5, [r6, #14]
 800242c:	69de      	ldr	r6, [r3, #28]
 800242e:	f996 500e 	ldrsb.w	r5, [r6, #14]
 8002432:	1b2d      	subs	r5, r5, r4
 8002434:	006d      	lsls	r5, r5, #1
 8002436:	3d63      	subs	r5, #99	; 0x63
 8002438:	73b5      	strb	r5, [r6, #14]
 800243a:	6a1e      	ldr	r6, [r3, #32]
 800243c:	f996 500e 	ldrsb.w	r5, [r6, #14]
 8002440:	1b2d      	subs	r5, r5, r4
 8002442:	006d      	lsls	r5, r5, #1
 8002444:	3d63      	subs	r5, #99	; 0x63
 8002446:	73b5      	strb	r5, [r6, #14]
 8002448:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800244a:	f996 500e 	ldrsb.w	r5, [r6, #14]
 800244e:	1b2c      	subs	r4, r5, r4
 8002450:	0064      	lsls	r4, r4, #1
 8002452:	3c63      	subs	r4, #99	; 0x63
 8002454:	73b4      	strb	r4, [r6, #14]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 8002456:	f991 500f 	ldrsb.w	r5, [r1, #15]
 800245a:	f992 400f 	ldrsb.w	r4, [r2, #15]
 800245e:	f990 600f 	ldrsb.w	r6, [r0, #15]
 8002462:	442c      	add	r4, r5
 8002464:	4426      	add	r6, r4
 8002466:	68dc      	ldr	r4, [r3, #12]
 8002468:	f994 400f 	ldrsb.w	r4, [r4, #15]
 800246c:	4434      	add	r4, r6
 800246e:	691e      	ldr	r6, [r3, #16]
 8002470:	f996 600f 	ldrsb.w	r6, [r6, #15]
 8002474:	4426      	add	r6, r4
 8002476:	695c      	ldr	r4, [r3, #20]
 8002478:	f994 400f 	ldrsb.w	r4, [r4, #15]
 800247c:	4434      	add	r4, r6
 800247e:	699e      	ldr	r6, [r3, #24]
 8002480:	f996 600f 	ldrsb.w	r6, [r6, #15]
 8002484:	4426      	add	r6, r4
 8002486:	69dc      	ldr	r4, [r3, #28]
 8002488:	f994 400f 	ldrsb.w	r4, [r4, #15]
 800248c:	4434      	add	r4, r6
 800248e:	6a1e      	ldr	r6, [r3, #32]
 8002490:	f996 600f 	ldrsb.w	r6, [r6, #15]
 8002494:	4426      	add	r6, r4
 8002496:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002498:	f994 400f 	ldrsb.w	r4, [r4, #15]
 800249c:	4434      	add	r4, r6
 800249e:	b224      	sxth	r4, r4
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 80024a0:	fb94 f4f7 	sdiv	r4, r4, r7
 80024a4:	1b2d      	subs	r5, r5, r4
 80024a6:	006d      	lsls	r5, r5, #1
 80024a8:	3d63      	subs	r5, #99	; 0x63
 80024aa:	73cd      	strb	r5, [r1, #15]
 80024ac:	f992 500f 	ldrsb.w	r5, [r2, #15]
 80024b0:	1b2d      	subs	r5, r5, r4
 80024b2:	006d      	lsls	r5, r5, #1
 80024b4:	3d63      	subs	r5, #99	; 0x63
 80024b6:	73d5      	strb	r5, [r2, #15]
 80024b8:	f990 500f 	ldrsb.w	r5, [r0, #15]
 80024bc:	1b2d      	subs	r5, r5, r4
 80024be:	006d      	lsls	r5, r5, #1
 80024c0:	3d63      	subs	r5, #99	; 0x63
 80024c2:	73c5      	strb	r5, [r0, #15]
 80024c4:	68de      	ldr	r6, [r3, #12]
 80024c6:	f996 500f 	ldrsb.w	r5, [r6, #15]
 80024ca:	1b2d      	subs	r5, r5, r4
 80024cc:	006d      	lsls	r5, r5, #1
 80024ce:	3d63      	subs	r5, #99	; 0x63
 80024d0:	73f5      	strb	r5, [r6, #15]
 80024d2:	691e      	ldr	r6, [r3, #16]
 80024d4:	f996 500f 	ldrsb.w	r5, [r6, #15]
 80024d8:	1b2d      	subs	r5, r5, r4
 80024da:	006d      	lsls	r5, r5, #1
 80024dc:	3d63      	subs	r5, #99	; 0x63
 80024de:	73f5      	strb	r5, [r6, #15]
 80024e0:	695e      	ldr	r6, [r3, #20]
 80024e2:	f996 500f 	ldrsb.w	r5, [r6, #15]
 80024e6:	1b2d      	subs	r5, r5, r4
 80024e8:	006d      	lsls	r5, r5, #1
 80024ea:	3d63      	subs	r5, #99	; 0x63
 80024ec:	73f5      	strb	r5, [r6, #15]
 80024ee:	699e      	ldr	r6, [r3, #24]
 80024f0:	f996 500f 	ldrsb.w	r5, [r6, #15]
 80024f4:	1b2d      	subs	r5, r5, r4
 80024f6:	006d      	lsls	r5, r5, #1
 80024f8:	3d63      	subs	r5, #99	; 0x63
 80024fa:	73f5      	strb	r5, [r6, #15]
 80024fc:	69de      	ldr	r6, [r3, #28]
 80024fe:	f996 500f 	ldrsb.w	r5, [r6, #15]
 8002502:	1b2d      	subs	r5, r5, r4
 8002504:	006d      	lsls	r5, r5, #1
 8002506:	3d63      	subs	r5, #99	; 0x63
 8002508:	73f5      	strb	r5, [r6, #15]
 800250a:	6a1e      	ldr	r6, [r3, #32]
 800250c:	f996 500f 	ldrsb.w	r5, [r6, #15]
 8002510:	1b2d      	subs	r5, r5, r4
 8002512:	006d      	lsls	r5, r5, #1
 8002514:	3d63      	subs	r5, #99	; 0x63
 8002516:	73f5      	strb	r5, [r6, #15]
 8002518:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800251a:	f996 500f 	ldrsb.w	r5, [r6, #15]
 800251e:	1b2c      	subs	r4, r5, r4
 8002520:	0064      	lsls	r4, r4, #1
 8002522:	3c63      	subs	r4, #99	; 0x63
 8002524:	73f4      	strb	r4, [r6, #15]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 8002526:	68dd      	ldr	r5, [r3, #12]
 8002528:	f991 6010 	ldrsb.w	r6, [r1, #16]
 800252c:	f992 c010 	ldrsb.w	ip, [r2, #16]
 8002530:	f990 4010 	ldrsb.w	r4, [r0, #16]
 8002534:	f995 e010 	ldrsb.w	lr, [r5, #16]
 8002538:	44b4      	add	ip, r6
 800253a:	4464      	add	r4, ip
 800253c:	44a6      	add	lr, r4
 800253e:	691c      	ldr	r4, [r3, #16]
 8002540:	f994 c010 	ldrsb.w	ip, [r4, #16]
 8002544:	695c      	ldr	r4, [r3, #20]
 8002546:	44f4      	add	ip, lr
 8002548:	f994 e010 	ldrsb.w	lr, [r4, #16]
 800254c:	699c      	ldr	r4, [r3, #24]
 800254e:	44e6      	add	lr, ip
 8002550:	f994 c010 	ldrsb.w	ip, [r4, #16]
 8002554:	69dc      	ldr	r4, [r3, #28]
 8002556:	44f4      	add	ip, lr
 8002558:	f994 e010 	ldrsb.w	lr, [r4, #16]
 800255c:	6a1c      	ldr	r4, [r3, #32]
 800255e:	44e6      	add	lr, ip
 8002560:	f994 c010 	ldrsb.w	ip, [r4, #16]
 8002564:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002566:	f994 4010 	ldrsb.w	r4, [r4, #16]
 800256a:	44f4      	add	ip, lr
 800256c:	e002      	b.n	8002574 <treat_spec+0xe8c>
 800256e:	bf00      	nop
 8002570:	20000050 	.word	0x20000050
 8002574:	4464      	add	r4, ip
 8002576:	b224      	sxth	r4, r4
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 8002578:	fb94 f4f7 	sdiv	r4, r4, r7
 800257c:	1b36      	subs	r6, r6, r4
 800257e:	0076      	lsls	r6, r6, #1
 8002580:	3e63      	subs	r6, #99	; 0x63
 8002582:	740e      	strb	r6, [r1, #16]
 8002584:	f992 6010 	ldrsb.w	r6, [r2, #16]
 8002588:	1b36      	subs	r6, r6, r4
 800258a:	0076      	lsls	r6, r6, #1
 800258c:	3e63      	subs	r6, #99	; 0x63
 800258e:	7416      	strb	r6, [r2, #16]
 8002590:	f990 6010 	ldrsb.w	r6, [r0, #16]
 8002594:	1b36      	subs	r6, r6, r4
 8002596:	0076      	lsls	r6, r6, #1
 8002598:	3e63      	subs	r6, #99	; 0x63
 800259a:	7406      	strb	r6, [r0, #16]
 800259c:	f995 6010 	ldrsb.w	r6, [r5, #16]
 80025a0:	1b36      	subs	r6, r6, r4
 80025a2:	0076      	lsls	r6, r6, #1
 80025a4:	3e63      	subs	r6, #99	; 0x63
 80025a6:	742e      	strb	r6, [r5, #16]
 80025a8:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80025ac:	f99c 6010 	ldrsb.w	r6, [ip, #16]
 80025b0:	1b36      	subs	r6, r6, r4
 80025b2:	0076      	lsls	r6, r6, #1
 80025b4:	3e63      	subs	r6, #99	; 0x63
 80025b6:	f88c 6010 	strb.w	r6, [ip, #16]
 80025ba:	f8d3 c014 	ldr.w	ip, [r3, #20]
 80025be:	f99c 6010 	ldrsb.w	r6, [ip, #16]
 80025c2:	1b36      	subs	r6, r6, r4
 80025c4:	0076      	lsls	r6, r6, #1
 80025c6:	3e63      	subs	r6, #99	; 0x63
 80025c8:	f88c 6010 	strb.w	r6, [ip, #16]
 80025cc:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80025d0:	f99c 6010 	ldrsb.w	r6, [ip, #16]
 80025d4:	1b36      	subs	r6, r6, r4
 80025d6:	0076      	lsls	r6, r6, #1
 80025d8:	3e63      	subs	r6, #99	; 0x63
 80025da:	f88c 6010 	strb.w	r6, [ip, #16]
 80025de:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80025e2:	f99c 6010 	ldrsb.w	r6, [ip, #16]
 80025e6:	1b36      	subs	r6, r6, r4
 80025e8:	0076      	lsls	r6, r6, #1
 80025ea:	3e63      	subs	r6, #99	; 0x63
 80025ec:	f88c 6010 	strb.w	r6, [ip, #16]
 80025f0:	f8d3 c020 	ldr.w	ip, [r3, #32]
 80025f4:	f99c 6010 	ldrsb.w	r6, [ip, #16]
 80025f8:	1b36      	subs	r6, r6, r4
 80025fa:	0076      	lsls	r6, r6, #1
 80025fc:	3e63      	subs	r6, #99	; 0x63
 80025fe:	f88c 6010 	strb.w	r6, [ip, #16]
 8002602:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 8002606:	f99c 6010 	ldrsb.w	r6, [ip, #16]
 800260a:	1b34      	subs	r4, r6, r4
 800260c:	0064      	lsls	r4, r4, #1
 800260e:	3c63      	subs	r4, #99	; 0x63
 8002610:	f88c 4010 	strb.w	r4, [ip, #16]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 8002614:	f991 6011 	ldrsb.w	r6, [r1, #17]
 8002618:	f992 c011 	ldrsb.w	ip, [r2, #17]
 800261c:	f990 4011 	ldrsb.w	r4, [r0, #17]
 8002620:	f995 e011 	ldrsb.w	lr, [r5, #17]
 8002624:	44b4      	add	ip, r6
 8002626:	4464      	add	r4, ip
 8002628:	44a6      	add	lr, r4
 800262a:	691c      	ldr	r4, [r3, #16]
 800262c:	f994 c011 	ldrsb.w	ip, [r4, #17]
 8002630:	695c      	ldr	r4, [r3, #20]
 8002632:	44f4      	add	ip, lr
 8002634:	f994 e011 	ldrsb.w	lr, [r4, #17]
 8002638:	699c      	ldr	r4, [r3, #24]
 800263a:	44e6      	add	lr, ip
 800263c:	f994 c011 	ldrsb.w	ip, [r4, #17]
 8002640:	69dc      	ldr	r4, [r3, #28]
 8002642:	44f4      	add	ip, lr
 8002644:	f994 e011 	ldrsb.w	lr, [r4, #17]
 8002648:	6a1c      	ldr	r4, [r3, #32]
 800264a:	44e6      	add	lr, ip
 800264c:	f994 c011 	ldrsb.w	ip, [r4, #17]
 8002650:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002652:	f994 4011 	ldrsb.w	r4, [r4, #17]
 8002656:	44f4      	add	ip, lr
 8002658:	4464      	add	r4, ip
 800265a:	b224      	sxth	r4, r4
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 800265c:	fb94 f4f7 	sdiv	r4, r4, r7
 8002660:	1b36      	subs	r6, r6, r4
 8002662:	0076      	lsls	r6, r6, #1
 8002664:	3e63      	subs	r6, #99	; 0x63
 8002666:	744e      	strb	r6, [r1, #17]
 8002668:	f992 6011 	ldrsb.w	r6, [r2, #17]
 800266c:	1b36      	subs	r6, r6, r4
 800266e:	0076      	lsls	r6, r6, #1
 8002670:	3e63      	subs	r6, #99	; 0x63
 8002672:	7456      	strb	r6, [r2, #17]
 8002674:	f990 6011 	ldrsb.w	r6, [r0, #17]
 8002678:	1b36      	subs	r6, r6, r4
 800267a:	0076      	lsls	r6, r6, #1
 800267c:	3e63      	subs	r6, #99	; 0x63
 800267e:	7446      	strb	r6, [r0, #17]
 8002680:	f995 6011 	ldrsb.w	r6, [r5, #17]
 8002684:	1b36      	subs	r6, r6, r4
 8002686:	0076      	lsls	r6, r6, #1
 8002688:	3e63      	subs	r6, #99	; 0x63
 800268a:	746e      	strb	r6, [r5, #17]
 800268c:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8002690:	f99c 6011 	ldrsb.w	r6, [ip, #17]
 8002694:	1b36      	subs	r6, r6, r4
 8002696:	0076      	lsls	r6, r6, #1
 8002698:	3e63      	subs	r6, #99	; 0x63
 800269a:	f88c 6011 	strb.w	r6, [ip, #17]
 800269e:	f8d3 c014 	ldr.w	ip, [r3, #20]
 80026a2:	f99c 6011 	ldrsb.w	r6, [ip, #17]
 80026a6:	1b36      	subs	r6, r6, r4
 80026a8:	0076      	lsls	r6, r6, #1
 80026aa:	3e63      	subs	r6, #99	; 0x63
 80026ac:	f88c 6011 	strb.w	r6, [ip, #17]
 80026b0:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80026b4:	f99c 6011 	ldrsb.w	r6, [ip, #17]
 80026b8:	1b36      	subs	r6, r6, r4
 80026ba:	0076      	lsls	r6, r6, #1
 80026bc:	3e63      	subs	r6, #99	; 0x63
 80026be:	f88c 6011 	strb.w	r6, [ip, #17]
 80026c2:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80026c6:	f99c 6011 	ldrsb.w	r6, [ip, #17]
 80026ca:	1b36      	subs	r6, r6, r4
 80026cc:	0076      	lsls	r6, r6, #1
 80026ce:	3e63      	subs	r6, #99	; 0x63
 80026d0:	f88c 6011 	strb.w	r6, [ip, #17]
 80026d4:	f8d3 c020 	ldr.w	ip, [r3, #32]
 80026d8:	f99c 6011 	ldrsb.w	r6, [ip, #17]
 80026dc:	1b36      	subs	r6, r6, r4
 80026de:	0076      	lsls	r6, r6, #1
 80026e0:	3e63      	subs	r6, #99	; 0x63
 80026e2:	f88c 6011 	strb.w	r6, [ip, #17]
 80026e6:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 80026ea:	f99c 6011 	ldrsb.w	r6, [ip, #17]
 80026ee:	1b34      	subs	r4, r6, r4
 80026f0:	0064      	lsls	r4, r4, #1
 80026f2:	3c63      	subs	r4, #99	; 0x63
 80026f4:	f88c 4011 	strb.w	r4, [ip, #17]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 80026f8:	f991 6012 	ldrsb.w	r6, [r1, #18]
 80026fc:	f992 c012 	ldrsb.w	ip, [r2, #18]
 8002700:	f990 4012 	ldrsb.w	r4, [r0, #18]
 8002704:	f995 e012 	ldrsb.w	lr, [r5, #18]
 8002708:	44b4      	add	ip, r6
 800270a:	4464      	add	r4, ip
 800270c:	44a6      	add	lr, r4
 800270e:	691c      	ldr	r4, [r3, #16]
 8002710:	f994 c012 	ldrsb.w	ip, [r4, #18]
 8002714:	695c      	ldr	r4, [r3, #20]
 8002716:	44f4      	add	ip, lr
 8002718:	f994 e012 	ldrsb.w	lr, [r4, #18]
 800271c:	699c      	ldr	r4, [r3, #24]
 800271e:	44e6      	add	lr, ip
 8002720:	f994 c012 	ldrsb.w	ip, [r4, #18]
 8002724:	69dc      	ldr	r4, [r3, #28]
 8002726:	44f4      	add	ip, lr
 8002728:	f994 e012 	ldrsb.w	lr, [r4, #18]
 800272c:	6a1c      	ldr	r4, [r3, #32]
 800272e:	44e6      	add	lr, ip
 8002730:	f994 c012 	ldrsb.w	ip, [r4, #18]
 8002734:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002736:	f994 4012 	ldrsb.w	r4, [r4, #18]
 800273a:	44f4      	add	ip, lr
 800273c:	4464      	add	r4, ip
 800273e:	b224      	sxth	r4, r4
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 8002740:	fb94 f4f7 	sdiv	r4, r4, r7
 8002744:	1b36      	subs	r6, r6, r4
 8002746:	0076      	lsls	r6, r6, #1
 8002748:	3e63      	subs	r6, #99	; 0x63
 800274a:	748e      	strb	r6, [r1, #18]
 800274c:	f992 6012 	ldrsb.w	r6, [r2, #18]
 8002750:	1b36      	subs	r6, r6, r4
 8002752:	0076      	lsls	r6, r6, #1
 8002754:	3e63      	subs	r6, #99	; 0x63
 8002756:	7496      	strb	r6, [r2, #18]
 8002758:	f990 6012 	ldrsb.w	r6, [r0, #18]
 800275c:	1b36      	subs	r6, r6, r4
 800275e:	0076      	lsls	r6, r6, #1
 8002760:	3e63      	subs	r6, #99	; 0x63
 8002762:	7486      	strb	r6, [r0, #18]
 8002764:	f995 6012 	ldrsb.w	r6, [r5, #18]
 8002768:	1b36      	subs	r6, r6, r4
 800276a:	0076      	lsls	r6, r6, #1
 800276c:	3e63      	subs	r6, #99	; 0x63
 800276e:	74ae      	strb	r6, [r5, #18]
 8002770:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8002774:	f99c 6012 	ldrsb.w	r6, [ip, #18]
 8002778:	1b36      	subs	r6, r6, r4
 800277a:	0076      	lsls	r6, r6, #1
 800277c:	3e63      	subs	r6, #99	; 0x63
 800277e:	f88c 6012 	strb.w	r6, [ip, #18]
 8002782:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8002786:	f99c 6012 	ldrsb.w	r6, [ip, #18]
 800278a:	1b36      	subs	r6, r6, r4
 800278c:	0076      	lsls	r6, r6, #1
 800278e:	3e63      	subs	r6, #99	; 0x63
 8002790:	f88c 6012 	strb.w	r6, [ip, #18]
 8002794:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8002798:	f99c 6012 	ldrsb.w	r6, [ip, #18]
 800279c:	1b36      	subs	r6, r6, r4
 800279e:	0076      	lsls	r6, r6, #1
 80027a0:	3e63      	subs	r6, #99	; 0x63
 80027a2:	f88c 6012 	strb.w	r6, [ip, #18]
 80027a6:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80027aa:	f99c 6012 	ldrsb.w	r6, [ip, #18]
 80027ae:	1b36      	subs	r6, r6, r4
 80027b0:	0076      	lsls	r6, r6, #1
 80027b2:	3e63      	subs	r6, #99	; 0x63
 80027b4:	f88c 6012 	strb.w	r6, [ip, #18]
 80027b8:	f8d3 c020 	ldr.w	ip, [r3, #32]
 80027bc:	f99c 6012 	ldrsb.w	r6, [ip, #18]
 80027c0:	1b36      	subs	r6, r6, r4
 80027c2:	0076      	lsls	r6, r6, #1
 80027c4:	3e63      	subs	r6, #99	; 0x63
 80027c6:	f88c 6012 	strb.w	r6, [ip, #18]
 80027ca:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 80027ce:	f99c 6012 	ldrsb.w	r6, [ip, #18]
 80027d2:	1b34      	subs	r4, r6, r4
 80027d4:	0064      	lsls	r4, r4, #1
 80027d6:	3c63      	subs	r4, #99	; 0x63
 80027d8:	f88c 4012 	strb.w	r4, [ip, #18]
		for (int j = 0 ; j < N_MELVEC ; j++) mean += melvec[j][i];
 80027dc:	f991 6013 	ldrsb.w	r6, [r1, #19]
 80027e0:	f992 c013 	ldrsb.w	ip, [r2, #19]
 80027e4:	f990 4013 	ldrsb.w	r4, [r0, #19]
 80027e8:	f995 e013 	ldrsb.w	lr, [r5, #19]
 80027ec:	44b4      	add	ip, r6
 80027ee:	4464      	add	r4, ip
 80027f0:	44a6      	add	lr, r4
 80027f2:	691c      	ldr	r4, [r3, #16]
 80027f4:	f994 c013 	ldrsb.w	ip, [r4, #19]
 80027f8:	695c      	ldr	r4, [r3, #20]
 80027fa:	44f4      	add	ip, lr
 80027fc:	f994 e013 	ldrsb.w	lr, [r4, #19]
 8002800:	699c      	ldr	r4, [r3, #24]
 8002802:	44e6      	add	lr, ip
 8002804:	f994 c013 	ldrsb.w	ip, [r4, #19]
 8002808:	69dc      	ldr	r4, [r3, #28]
 800280a:	44f4      	add	ip, lr
 800280c:	f994 e013 	ldrsb.w	lr, [r4, #19]
 8002810:	6a1c      	ldr	r4, [r3, #32]
 8002812:	44e6      	add	lr, ip
 8002814:	f994 c013 	ldrsb.w	ip, [r4, #19]
 8002818:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800281a:	f994 4013 	ldrsb.w	r4, [r4, #19]
 800281e:	44f4      	add	ip, lr
 8002820:	4464      	add	r4, ip
 8002822:	b224      	sxth	r4, r4
			melvec[j][i] = (int8_t)(((int16_t)melvec[j][i]-mean)*2-99);
 8002824:	fb94 f4f7 	sdiv	r4, r4, r7
 8002828:	1b36      	subs	r6, r6, r4
 800282a:	0076      	lsls	r6, r6, #1
 800282c:	3e63      	subs	r6, #99	; 0x63
 800282e:	74ce      	strb	r6, [r1, #19]
 8002830:	f992 1013 	ldrsb.w	r1, [r2, #19]
 8002834:	1b09      	subs	r1, r1, r4
 8002836:	0049      	lsls	r1, r1, #1
 8002838:	3963      	subs	r1, #99	; 0x63
 800283a:	74d1      	strb	r1, [r2, #19]
 800283c:	f990 2013 	ldrsb.w	r2, [r0, #19]
 8002840:	1b12      	subs	r2, r2, r4
 8002842:	0052      	lsls	r2, r2, #1
 8002844:	3a63      	subs	r2, #99	; 0x63
 8002846:	74c2      	strb	r2, [r0, #19]
 8002848:	f995 2013 	ldrsb.w	r2, [r5, #19]
 800284c:	1b12      	subs	r2, r2, r4
 800284e:	0052      	lsls	r2, r2, #1
 8002850:	3a63      	subs	r2, #99	; 0x63
 8002852:	74ea      	strb	r2, [r5, #19]
 8002854:	6919      	ldr	r1, [r3, #16]
 8002856:	f991 2013 	ldrsb.w	r2, [r1, #19]
 800285a:	1b12      	subs	r2, r2, r4
 800285c:	0052      	lsls	r2, r2, #1
 800285e:	3a63      	subs	r2, #99	; 0x63
 8002860:	74ca      	strb	r2, [r1, #19]
 8002862:	6959      	ldr	r1, [r3, #20]
 8002864:	f991 2013 	ldrsb.w	r2, [r1, #19]
 8002868:	1b12      	subs	r2, r2, r4
 800286a:	0052      	lsls	r2, r2, #1
 800286c:	3a63      	subs	r2, #99	; 0x63
 800286e:	74ca      	strb	r2, [r1, #19]
 8002870:	6999      	ldr	r1, [r3, #24]
 8002872:	f991 2013 	ldrsb.w	r2, [r1, #19]
 8002876:	1b12      	subs	r2, r2, r4
 8002878:	0052      	lsls	r2, r2, #1
 800287a:	3a63      	subs	r2, #99	; 0x63
 800287c:	74ca      	strb	r2, [r1, #19]
 800287e:	69d9      	ldr	r1, [r3, #28]
 8002880:	f991 2013 	ldrsb.w	r2, [r1, #19]
 8002884:	1b12      	subs	r2, r2, r4
 8002886:	0052      	lsls	r2, r2, #1
 8002888:	3a63      	subs	r2, #99	; 0x63
 800288a:	74ca      	strb	r2, [r1, #19]
 800288c:	6a19      	ldr	r1, [r3, #32]
 800288e:	f991 2013 	ldrsb.w	r2, [r1, #19]
 8002892:	1b12      	subs	r2, r2, r4
 8002894:	0052      	lsls	r2, r2, #1
 8002896:	3a63      	subs	r2, #99	; 0x63
 8002898:	74ca      	strb	r2, [r1, #19]
 800289a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800289c:	f992 3013 	ldrsb.w	r3, [r2, #19]
 80028a0:	1b1b      	subs	r3, r3, r4
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	3b63      	subs	r3, #99	; 0x63
 80028a6:	74d3      	strb	r3, [r2, #19]
	}
	
	//Inference
#if CLASSIFY
	MX_X_CUBE_AI_Process();
 80028a8:	f004 faaa 	bl	8006e00 <MX_X_CUBE_AI_Process>
#endif

}
 80028ac:	b003      	add	sp, #12
 80028ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028b0 <HAL_ADC_ConvCpltCallback>:
#endif

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028b0:	b510      	push	{r4, lr}
	if (ADCDataRdy[1-buf_cplt]) {
 80028b2:	4c08      	ldr	r4, [pc, #32]	; (80028d4 <HAL_ADC_ConvCpltCallback+0x24>)
 80028b4:	7823      	ldrb	r3, [r4, #0]
 80028b6:	b123      	cbz	r3, 80028c2 <HAL_ADC_ConvCpltCallback+0x12>
		print_now("Error: ADC Data buffer full\r\n");
 80028b8:	4807      	ldr	r0, [pc, #28]	; (80028d8 <HAL_ADC_ConvCpltCallback+0x28>)
 80028ba:	f000 f8f9 	bl	8002ab0 <print_now>
		Error_Handler();
 80028be:	f000 fa01 	bl	8002cc4 <Error_Handler>
	ADCDataRdy[buf_cplt] = 1;
 80028c2:	2301      	movs	r3, #1
	treat_spec((q15_t*)ADCData[buf_cplt]);
 80028c4:	4805      	ldr	r0, [pc, #20]	; (80028dc <HAL_ADC_ConvCpltCallback+0x2c>)
	ADCDataRdy[buf_cplt] = 1;
 80028c6:	7063      	strb	r3, [r4, #1]
	treat_spec((q15_t*)ADCData[buf_cplt]);
 80028c8:	f7fe ff0e 	bl	80016e8 <treat_spec>
	ADCDataRdy[buf_cplt] = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	7063      	strb	r3, [r4, #1]
	eff_Callback(1);
}
 80028d0:	bd10      	pop	{r4, pc}
 80028d2:	bf00      	nop
 80028d4:	2000104c 	.word	0x2000104c
 80028d8:	0800c87b 	.word	0x0800c87b
 80028dc:	20002f8e 	.word	0x20002f8e

080028e0 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028e0:	b510      	push	{r4, lr}
	if (ADCDataRdy[1-buf_cplt]) {
 80028e2:	4c08      	ldr	r4, [pc, #32]	; (8002904 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 80028e4:	7863      	ldrb	r3, [r4, #1]
 80028e6:	b123      	cbz	r3, 80028f2 <HAL_ADC_ConvHalfCpltCallback+0x12>
		print_now("Error: ADC Data buffer full\r\n");
 80028e8:	4807      	ldr	r0, [pc, #28]	; (8002908 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80028ea:	f000 f8e1 	bl	8002ab0 <print_now>
		Error_Handler();
 80028ee:	f000 f9e9 	bl	8002cc4 <Error_Handler>
	ADCDataRdy[buf_cplt] = 1;
 80028f2:	2301      	movs	r3, #1
	treat_spec((q15_t*)ADCData[buf_cplt]);
 80028f4:	4805      	ldr	r0, [pc, #20]	; (800290c <HAL_ADC_ConvHalfCpltCallback+0x2c>)
	ADCDataRdy[buf_cplt] = 1;
 80028f6:	7023      	strb	r3, [r4, #0]
	treat_spec((q15_t*)ADCData[buf_cplt]);
 80028f8:	f7fe fef6 	bl	80016e8 <treat_spec>
	ADCDataRdy[buf_cplt] = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	7023      	strb	r3, [r4, #0]
	eff_Callback(0);
}
 8002900:	bd10      	pop	{r4, pc}
 8002902:	bf00      	nop
 8002904:	2000104c 	.word	0x2000104c
 8002908:	0800c87b 	.word	0x0800c87b
 800290c:	2000104e 	.word	0x2000104e

08002910 <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002910:	4808      	ldr	r0, [pc, #32]	; (8002934 <MX_CRC_Init+0x24>)
{
 8002912:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <MX_CRC_Init+0x28>)
 8002916:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002918:	2300      	movs	r3, #0
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800291a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800291e:	8083      	strh	r3, [r0, #4]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002920:	2301      	movs	r3, #1
 8002922:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002924:	f001 f8f2 	bl	8003b0c <HAL_CRC_Init>
 8002928:	b118      	cbz	r0, 8002932 <MX_CRC_Init+0x22>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800292a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800292e:	f000 b9c9 	b.w	8002cc4 <Error_Handler>
}
 8002932:	bd08      	pop	{r3, pc}
 8002934:	20004f98 	.word	0x20004f98
 8002938:	40023000 	.word	0x40023000

0800293c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 800293c:	6802      	ldr	r2, [r0, #0]
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <HAL_CRC_MspInit+0x24>)
 8002940:	429a      	cmp	r2, r3
{
 8002942:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8002944:	d10a      	bne.n	800295c <HAL_CRC_MspInit+0x20>
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800294c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002950:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002958:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800295a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_CRC_CLK_ENABLE();
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800295c:	b002      	add	sp, #8
 800295e:	4770      	bx	lr
 8002960:	40023000 	.word	0x40023000

08002964 <MX_DMA_Init>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002968:	b507      	push	{r0, r1, r2, lr}
 800296a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800296c:	f042 0204 	orr.w	r2, r2, #4
 8002970:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002972:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002974:	f002 0204 	and.w	r2, r2, #4
 8002978:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800297a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800297c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	9300      	str	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800298c:	2200      	movs	r2, #0
 800298e:	2102      	movs	r1, #2
 8002990:	200b      	movs	r0, #11
  (void)tmpreg;
 8002992:	9b00      	ldr	r3, [sp, #0]
 8002994:	f001 f866 	bl	8003a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002998:	200b      	movs	r0, #11
 800299a:	f001 f895 	bl	8003ac8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2102      	movs	r1, #2
 80029a2:	200c      	movs	r0, #12
 80029a4:	f001 f85e 	bl	8003a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80029a8:	200c      	movs	r0, #12

}
 80029aa:	b003      	add	sp, #12
 80029ac:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80029b0:	f001 b88a 	b.w	8003ac8 <HAL_NVIC_EnableIRQ>

080029b4 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80029b8:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029bc:	4302      	orrs	r2, r0
 80029be:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c2:	4003      	ands	r3, r0
 80029c4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80029c6:	9b01      	ldr	r3, [sp, #4]
}
 80029c8:	b002      	add	sp, #8
 80029ca:	4770      	bx	lr

080029cc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB6   ------> I2C1_SCL
*/
void MX_GPIO_Init(void)
{
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	2214      	movs	r2, #20
 80029d2:	2100      	movs	r1, #0
 80029d4:	a801      	add	r0, sp, #4
 80029d6:	f009 fe8f 	bl	800c6f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029da:	2002      	movs	r0, #2
 80029dc:	f7ff ffea 	bl	80029b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BatExt_CS_GPIO_Port, BatExt_CS_Pin, GPIO_PIN_RESET);
 80029e0:	4e2d      	ldr	r6, [pc, #180]	; (8002a98 <MX_GPIO_Init+0xcc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	2001      	movs	r0, #1
 80029e4:	f7ff ffe6 	bl	80029b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e8:	2004      	movs	r0, #4
 80029ea:	f7ff ffe3 	bl	80029b4 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_WritePin(BatExt_CS_GPIO_Port, BatExt_CS_Pin, GPIO_PIN_RESET);
 80029ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029f2:	4630      	mov	r0, r6
 80029f4:	2200      	movs	r2, #0
 80029f6:	f001 fb4f 	bl	8004098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BatExt_PWR_GPIO_Port, BatExt_PWR_Pin, GPIO_PIN_SET);
 80029fa:	2201      	movs	r2, #1
 80029fc:	2110      	movs	r1, #16
 80029fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a02:	f001 fb49 	bl	8004098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|BatExt_gain1_Pin|BatExt_gain2_Pin, GPIO_PIN_RESET);
 8002a06:	2200      	movs	r2, #0
 8002a08:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a10:	f001 fb42 	bl	8004098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a14:	2240      	movs	r2, #64	; 0x40
 8002a16:	2312      	movs	r3, #18
 8002a18:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a1c:	2304      	movs	r3, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a20:	eb0d 0103 	add.w	r1, sp, r3
 8002a24:	4630      	mov	r0, r6

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BatExt_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a26:	2501      	movs	r5, #1
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a28:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	e9cd 4403 	strd	r4, r4, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2e:	f001 fa87 	bl	8003f40 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a32:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BatExt_CS_GPIO_Port, &GPIO_InitStruct);
 8002a36:	a901      	add	r1, sp, #4
 8002a38:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3a:	e9cd 3501 	strd	r3, r5, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	e9cd 4403 	strd	r4, r4, [sp, #12]
  HAL_GPIO_Init(BatExt_CS_GPIO_Port, &GPIO_InitStruct);
 8002a42:	f001 fa7d 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BatExt_CD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BatExt_CD_GPIO_Port, &GPIO_InitStruct);
 8002a46:	a901      	add	r1, sp, #4
 8002a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4c:	e9cd 5401 	strd	r5, r4, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(BatExt_CD_GPIO_Port, &GPIO_InitStruct);
 8002a52:	f001 fa75 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BatExt_PWR_Pin|LED_Pin|BatExt_gain1_Pin|BatExt_gain2_Pin;
 8002a56:	f44f 6343 	mov.w	r3, #3120	; 0xc30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5a:	a901      	add	r1, sp, #4
 8002a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a60:	e9cd 3501 	strd	r3, r5, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	e9cd 4403 	strd	r4, r4, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	f001 fa6a 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a70:	21c0      	movs	r1, #192	; 0xc0
 8002a72:	e9cd 1301 	strd	r1, r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a7a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a7c:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7e:	f001 fa5f 	bl	8003f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8002a82:	4622      	mov	r2, r4
 8002a84:	2102      	movs	r1, #2
 8002a86:	2016      	movs	r0, #22
 8002a88:	f000 ffec 	bl	8003a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a8c:	2016      	movs	r0, #22
 8002a8e:	f001 f81b 	bl	8003ac8 <HAL_NVIC_EnableIRQ>

}
 8002a92:	b006      	add	sp, #24
 8002a94:	bd70      	pop	{r4, r5, r6, pc}
 8002a96:	bf00      	nop
 8002a98:	48000400 	.word	0x48000400

08002a9c <print_array>:
//yes I did my own prints
//No they are not perfect but they are good enough for me

void print_array(uint8_t* array, int len){
#if(VERBOSE)
	HAL_UART_Transmit(&hlpuart1, array, len, 0xFFFF);
 8002a9c:	b28a      	uxth	r2, r1
 8002a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	4801      	ldr	r0, [pc, #4]	; (8002aac <print_array+0x10>)
 8002aa6:	f003 bc7b 	b.w	80063a0 <HAL_UART_Transmit>
 8002aaa:	bf00      	nop
 8002aac:	2000ed48 	.word	0x2000ed48

08002ab0 <print_now>:
#endif
}

void print_now(const char* string){
 8002ab0:	b510      	push	{r4, lr}
 8002ab2:	4604      	mov	r4, r0
	print_array((uint8_t *)string, strlen(string));
 8002ab4:	f7fd fb60 	bl	8000178 <strlen>
 8002ab8:	4601      	mov	r1, r0
 8002aba:	4620      	mov	r0, r4
}
 8002abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	print_array((uint8_t *)string, strlen(string));
 8002ac0:	f7ff bfec 	b.w	8002a9c <print_array>

08002ac4 <print_int>:

void print_int(int my_int){
 8002ac4:	b530      	push	{r4, r5, lr}

#if(VERBOSE)
	if (my_int == 0){
 8002ac6:	1e03      	subs	r3, r0, #0
void print_int(int my_int){
 8002ac8:	b087      	sub	sp, #28
	if (my_int == 0){
 8002aca:	d106      	bne.n	8002ada <print_int+0x16>
		print_array((uint8_t*)"0", 1);
 8002acc:	4814      	ldr	r0, [pc, #80]	; (8002b20 <print_int+0x5c>)
 8002ace:	2101      	movs	r1, #1
		intbuffer[--k]='-';
	}
	print_now((char*)(intbuffer+k));

#endif
}
 8002ad0:	b007      	add	sp, #28
 8002ad2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		print_array((uint8_t*)"0", 1);
 8002ad6:	f7ff bfe1 	b.w	8002a9c <print_array>
	intbuffer[20] = '\0';
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f88d 2014 	strb.w	r2, [sp, #20]
		my_int = -my_int;
 8002ae2:	bfbc      	itt	lt
 8002ae4:	425b      	neglt	r3, r3
		negative = 1;
 8002ae6:	2201      	movlt	r2, #1
	int k = 20;
 8002ae8:	2014      	movs	r0, #20
		intbuffer[--k]=my_int%10+48;
 8002aea:	240a      	movs	r4, #10
 8002aec:	fbb3 f1f4 	udiv	r1, r3, r4
 8002af0:	4605      	mov	r5, r0
 8002af2:	fb04 3311 	mls	r3, r4, r1, r3
 8002af6:	3801      	subs	r0, #1
 8002af8:	3330      	adds	r3, #48	; 0x30
 8002afa:	f80d 3000 	strb.w	r3, [sp, r0]
	while(my_int>0){
 8002afe:	460b      	mov	r3, r1
 8002b00:	2900      	cmp	r1, #0
 8002b02:	d1f3      	bne.n	8002aec <print_int+0x28>
	if(negative){
 8002b04:	b132      	cbz	r2, 8002b14 <print_int+0x50>
		intbuffer[--k]='-';
 8002b06:	f105 0316 	add.w	r3, r5, #22
 8002b0a:	446b      	add	r3, sp
 8002b0c:	222d      	movs	r2, #45	; 0x2d
 8002b0e:	1ea8      	subs	r0, r5, #2
 8002b10:	f803 2c18 	strb.w	r2, [r3, #-24]
	print_now((char*)(intbuffer+k));
 8002b14:	4468      	add	r0, sp
 8002b16:	f7ff ffcb 	bl	8002ab0 <print_now>
}
 8002b1a:	b007      	add	sp, #28
 8002b1c:	bd30      	pop	{r4, r5, pc}
 8002b1e:	bf00      	nop
 8002b20:	0800cf76 	.word	0x0800cf76

08002b24 <print_error>:
void print_error(const char* string, int my_int){
 8002b24:	b510      	push	{r4, lr}
 8002b26:	460c      	mov	r4, r1
#if(VERBOSE)
	print_now(string);
 8002b28:	f7ff ffc2 	bl	8002ab0 <print_now>
	print_int(my_int);
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7ff ffc9 	bl	8002ac4 <print_int>
	print_now("\r\n");
#endif
}
 8002b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	print_now("\r\n");
 8002b36:	4801      	ldr	r0, [pc, #4]	; (8002b3c <print_error+0x18>)
 8002b38:	f7ff bfba 	b.w	8002ab0 <print_now>
 8002b3c:	0800cff8 	.word	0x0800cff8

08002b40 <print_time>:

void print_time(void)
{
 8002b40:	b510      	push	{r4, lr}
 RTC_DateTypeDef gDate;
 RTC_TimeTypeDef gTime;
/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002b42:	4c22      	ldr	r4, [pc, #136]	; (8002bcc <print_time+0x8c>)
{
 8002b44:	b086      	sub	sp, #24
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002b46:	a901      	add	r1, sp, #4
 8002b48:	2200      	movs	r2, #0
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	f002 f9e2 	bl	8004f14 <HAL_RTC_GetTime>
/* Get the RTC current Date */
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002b50:	2200      	movs	r2, #0
 8002b52:	4669      	mov	r1, sp
 8002b54:	4620      	mov	r0, r4
 8002b56:	f002 fa09 	bl	8004f6c <HAL_RTC_GetDate>
/* Display time Format: hh:mm:ss */
 print_now("Hour: ");
 print_int(gTime.Hours);
 print_now(":");
 8002b5a:	4c1d      	ldr	r4, [pc, #116]	; (8002bd0 <print_time+0x90>)
 print_now("Hour: ");
 8002b5c:	481d      	ldr	r0, [pc, #116]	; (8002bd4 <print_time+0x94>)
 8002b5e:	f7ff ffa7 	bl	8002ab0 <print_now>
 print_int(gTime.Hours);
 8002b62:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002b66:	f7ff ffad 	bl	8002ac4 <print_int>
 print_now(":");
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f7ff ffa0 	bl	8002ab0 <print_now>
 print_int(gTime.Minutes);
 8002b70:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8002b74:	f7ff ffa6 	bl	8002ac4 <print_int>
 print_now(":");
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f7ff ff99 	bl	8002ab0 <print_now>
 print_int(gTime.Seconds);
 8002b7e:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8002b82:	f7ff ff9f 	bl	8002ac4 <print_int>
 print_now(":");
 8002b86:	4620      	mov	r0, r4
 8002b88:	f7ff ff92 	bl	8002ab0 <print_now>
 print_int(gTime.SubSeconds);
 8002b8c:	9802      	ldr	r0, [sp, #8]
 print_now(" Date: ");
/* Display date Format: dd-mm-yy */
 print_int(gDate.Date);
 print_now("-");
 8002b8e:	4c12      	ldr	r4, [pc, #72]	; (8002bd8 <print_time+0x98>)
 print_int(gTime.SubSeconds);
 8002b90:	f7ff ff98 	bl	8002ac4 <print_int>
 print_now(" Date: ");
 8002b94:	4811      	ldr	r0, [pc, #68]	; (8002bdc <print_time+0x9c>)
 8002b96:	f7ff ff8b 	bl	8002ab0 <print_now>
 print_int(gDate.Date);
 8002b9a:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8002b9e:	f7ff ff91 	bl	8002ac4 <print_int>
 print_now("-");
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7ff ff84 	bl	8002ab0 <print_now>
 print_int(gDate.Month);
 8002ba8:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8002bac:	f7ff ff8a 	bl	8002ac4 <print_int>
 print_now("-");
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f7ff ff7d 	bl	8002ab0 <print_now>
 print_int(2000 + gDate.Year);
 8002bb6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002bba:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8002bbe:	f7ff ff81 	bl	8002ac4 <print_int>
 print_now("\r\n");
 8002bc2:	4807      	ldr	r0, [pc, #28]	; (8002be0 <print_time+0xa0>)
 8002bc4:	f7ff ff74 	bl	8002ab0 <print_now>
}
 8002bc8:	b006      	add	sp, #24
 8002bca:	bd10      	pop	{r4, pc}
 8002bcc:	2000ec00 	.word	0x2000ec00
 8002bd0:	0800cf7f 	.word	0x0800cf7f
 8002bd4:	0800cf78 	.word	0x0800cf78
 8002bd8:	0800cf89 	.word	0x0800cf89
 8002bdc:	0800cf81 	.word	0x0800cf81
 8002be0:	0800cff8 	.word	0x0800cff8

08002be4 <get_time>:
uint32_t get_time(void)
{
 8002be4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	 RTC_TimeTypeDef gTime;
/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002be6:	2200      	movs	r2, #0
 8002be8:	a901      	add	r1, sp, #4
 8002bea:	4809      	ldr	r0, [pc, #36]	; (8002c10 <get_time+0x2c>)
 8002bec:	f002 f992 	bl	8004f14 <HAL_RTC_GetTime>


 uint32_t result =gTime.Hours;
 8002bf0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 result <<= 8;
 result += gTime.Minutes;
 8002bf4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 result += gTime.Seconds;
 result <<= 8;
 result += gTime.SubSeconds;
 return result;

}
 8002bf8:	9802      	ldr	r0, [sp, #8]
 result += gTime.Minutes;
 8002bfa:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 result += gTime.Seconds;
 8002bfe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002c02:	eb03 2302 	add.w	r3, r3, r2, lsl #8
}
 8002c06:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8002c0a:	b007      	add	sp, #28
 8002c0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c10:	2000ec00 	.word	0x2000ec00

08002c14 <blink>:
void blink(int time_ms){
 8002c14:	b510      	push	{r4, lr}

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002c16:	2120      	movs	r1, #32
void blink(int time_ms){
 8002c18:	4604      	mov	r4, r0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c1e:	f001 fa40 	bl	80040a2 <HAL_GPIO_TogglePin>
	HAL_Delay(time_ms);
 8002c22:	4620      	mov	r0, r4
 8002c24:	f000 fb76 	bl	8003314 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}
 8002c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002c2c:	2120      	movs	r1, #32
 8002c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c32:	f001 ba36 	b.w	80040a2 <HAL_GPIO_TogglePin>
	...

08002c38 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	//while(1) 	  print_now("0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789");

	//debug_print("GPIO EXTI callback - ");
	if(GPIO_Pin == Button1_Pin) {
 8002c38:	2840      	cmp	r0, #64	; 0x40
{
 8002c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(GPIO_Pin == Button1_Pin) {
 8002c3c:	d10a      	bne.n	8002c54 <HAL_GPIO_EXTI_Callback+0x1c>
		print_now("Button 1\r\n");
 8002c3e:	4819      	ldr	r0, [pc, #100]	; (8002ca4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002c40:	f7ff ff36 	bl	8002ab0 <print_now>
		batext_power_on();
 8002c44:	f7fe fb98 	bl	8001378 <batext_power_on>
			print_now("\r\n");
		}
	} else {
		print_now("other?\r\n");
	}
}
 8002c48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		blink(500);
 8002c4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c50:	f7ff bfe0 	b.w	8002c14 <blink>
	} else if (GPIO_Pin == Button2_Pin) {
 8002c54:	2880      	cmp	r0, #128	; 0x80
 8002c56:	d11f      	bne.n	8002c98 <HAL_GPIO_EXTI_Callback+0x60>
		print_now("Button 2\r\n");
 8002c58:	4813      	ldr	r0, [pc, #76]	; (8002ca8 <HAL_GPIO_EXTI_Callback+0x70>)
 8002c5a:	4d14      	ldr	r5, [pc, #80]	; (8002cac <HAL_GPIO_EXTI_Callback+0x74>)
		for(int i = 0 ; i < time_index; i++){
 8002c5c:	4e14      	ldr	r6, [pc, #80]	; (8002cb0 <HAL_GPIO_EXTI_Callback+0x78>)
			print_now("\r\n");
 8002c5e:	4f15      	ldr	r7, [pc, #84]	; (8002cb4 <HAL_GPIO_EXTI_Callback+0x7c>)
		print_now("Button 2\r\n");
 8002c60:	f7ff ff26 	bl	8002ab0 <print_now>
		print_now("Shutting down\r\n");
 8002c64:	4814      	ldr	r0, [pc, #80]	; (8002cb8 <HAL_GPIO_EXTI_Callback+0x80>)
 8002c66:	f7ff ff23 	bl	8002ab0 <print_now>
		batext_power_off();
 8002c6a:	f7fe fb61 	bl	8001330 <batext_power_off>
		blink(500);
 8002c6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c72:	f7ff ffcf 	bl	8002c14 <blink>
		print_now("List of time index with detection: \r\n");
 8002c76:	4811      	ldr	r0, [pc, #68]	; (8002cbc <HAL_GPIO_EXTI_Callback+0x84>)
 8002c78:	f7ff ff1a 	bl	8002ab0 <print_now>
		for(int i = 0 ; i < time_index; i++){
 8002c7c:	2400      	movs	r4, #0
 8002c7e:	8833      	ldrh	r3, [r6, #0]
 8002c80:	42a3      	cmp	r3, r4
 8002c82:	dc00      	bgt.n	8002c86 <HAL_GPIO_EXTI_Callback+0x4e>
}
 8002c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			print_int(registered_times[i]);
 8002c86:	f855 0b04 	ldr.w	r0, [r5], #4
 8002c8a:	f7ff ff1b 	bl	8002ac4 <print_int>
			print_now("\r\n");
 8002c8e:	4638      	mov	r0, r7
 8002c90:	f7ff ff0e 	bl	8002ab0 <print_now>
		for(int i = 0 ; i < time_index; i++){
 8002c94:	3401      	adds	r4, #1
 8002c96:	e7f2      	b.n	8002c7e <HAL_GPIO_EXTI_Callback+0x46>
}
 8002c98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		print_now("other?\r\n");
 8002c9c:	4808      	ldr	r0, [pc, #32]	; (8002cc0 <HAL_GPIO_EXTI_Callback+0x88>)
 8002c9e:	f7ff bf07 	b.w	8002ab0 <print_now>
 8002ca2:	bf00      	nop
 8002ca4:	0800cf8b 	.word	0x0800cf8b
 8002ca8:	0800cf96 	.word	0x0800cf96
 8002cac:	20004fbc 	.word	0x20004fbc
 8002cb0:	2000ebfc 	.word	0x2000ebfc
 8002cb4:	0800cff8 	.word	0x0800cff8
 8002cb8:	0800cfa1 	.word	0x0800cfa1
 8002cbc:	0800cfb1 	.word	0x0800cfb1
 8002cc0:	0800cfd7 	.word	0x0800cfd7

08002cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc4:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc6:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  print_now("ERROR!!!");
 8002cc8:	4c03      	ldr	r4, [pc, #12]	; (8002cd8 <Error_Handler+0x14>)
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f7ff fef0 	bl	8002ab0 <print_now>

	blink(100);
 8002cd0:	2064      	movs	r0, #100	; 0x64
 8002cd2:	f7ff ff9f 	bl	8002c14 <blink>
  while (1)
 8002cd6:	e7f8      	b.n	8002cca <Error_Handler+0x6>
 8002cd8:	0800cfe0 	.word	0x0800cfe0

08002cdc <SystemClock_Config>:
{
 8002cdc:	b500      	push	{lr}
 8002cde:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ce0:	2248      	movs	r2, #72	; 0x48
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	a808      	add	r0, sp, #32
 8002ce6:	f009 fd07 	bl	800c6f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cea:	2218      	movs	r2, #24
 8002cec:	2100      	movs	r1, #0
 8002cee:	a802      	add	r0, sp, #8
 8002cf0:	f009 fd02 	bl	800c6f8 <memset>
  HAL_PWR_EnableBkUpAccess();
 8002cf4:	f001 f9ea 	bl	80040cc <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002cf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d02:	f023 0318 	bic.w	r3, r3, #24
 8002d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d0a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8002d0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d16:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8002d1a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8002d1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002d26:	2324      	movs	r3, #36	; 0x24
 8002d28:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002d2a:	2381      	movs	r3, #129	; 0x81
 8002d2c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002d34:	22b0      	movs	r2, #176	; 0xb0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d36:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d38:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d3c:	f001 fada 	bl	80042f4 <HAL_RCC_OscConfig>
 8002d40:	b108      	cbz	r0, 8002d46 <SystemClock_Config+0x6a>
    Error_Handler();
 8002d42:	f7ff ffbf 	bl	8002cc4 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8002d46:	234f      	movs	r3, #79	; 0x4f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002d48:	e9cd 3002 	strd	r3, r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d4c:	e9cd 0004 	strd	r0, r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002d50:	e9cd 0006 	strd	r0, r0, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d54:	2102      	movs	r1, #2
 8002d56:	a802      	add	r0, sp, #8
 8002d58:	f001 fd66 	bl	8004828 <HAL_RCC_ClockConfig>
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	d1f0      	bne.n	8002d42 <SystemClock_Config+0x66>
}
 8002d60:	b01b      	add	sp, #108	; 0x6c
 8002d62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002d68 <main>:
{
 8002d68:	b508      	push	{r3, lr}
  HAL_Init();
 8002d6a:	f000 faab 	bl	80032c4 <HAL_Init>
  SystemClock_Config();
 8002d6e:	f7ff ffb5 	bl	8002cdc <SystemClock_Config>
  MX_RTC_Init();
 8002d72:	f000 f81b 	bl	8002dac <MX_RTC_Init>
  MX_GPIO_Init();
 8002d76:	f7ff fe29 	bl	80029cc <MX_GPIO_Init>
  MX_DMA_Init();
 8002d7a:	f7ff fdf3 	bl	8002964 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002d7e:	f000 f9b7 	bl	80030f0 <MX_LPUART1_UART_Init>
  MX_ADC_Init();
 8002d82:	f7fe f9b3 	bl	80010ec <MX_ADC_Init>
  MX_TIM1_Init();
 8002d86:	f000 f951 	bl	800302c <MX_TIM1_Init>
  MX_SPI1_Init();
 8002d8a:	f000 f881 	bl	8002e90 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002d8e:	f003 fc45 	bl	800661c <MX_FATFS_Init>
  MX_CRC_Init();
 8002d92:	f7ff fdbd 	bl	8002910 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8002d96:	f003 ffff 	bl	8006d98 <MX_X_CUBE_AI_Init>
  print_now("\n\nHello world!\n\r\n");
 8002d9a:	4803      	ldr	r0, [pc, #12]	; (8002da8 <main+0x40>)
 8002d9c:	f7ff fe88 	bl	8002ab0 <print_now>
  blink(200);
 8002da0:	20c8      	movs	r0, #200	; 0xc8
 8002da2:	f7ff ff37 	bl	8002c14 <blink>
  while (1)
 8002da6:	e7fe      	b.n	8002da6 <main+0x3e>
 8002da8:	0800cfe9 	.word	0x0800cfe9

08002dac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002dac:	b510      	push	{r4, lr}
 8002dae:	b086      	sub	sp, #24

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002db0:	2214      	movs	r2, #20
 8002db2:	2100      	movs	r1, #0
 8002db4:	a801      	add	r0, sp, #4
 8002db6:	f009 fc9f 	bl	800c6f8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002dba:	481b      	ldr	r0, [pc, #108]	; (8002e28 <MX_RTC_Init+0x7c>)
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <MX_RTC_Init+0x80>)
  RTC_DateTypeDef sDate = {0};
 8002dbe:	2400      	movs	r4, #0
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002dc0:	e9c0 3400 	strd	r3, r4, [r0]
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 8002dc4:	227f      	movs	r2, #127	; 0x7f
 8002dc6:	23ff      	movs	r3, #255	; 0xff
 8002dc8:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002dd0:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002dd4:	e9c0 3407 	strd	r3, r4, [r0, #28]
  RTC_DateTypeDef sDate = {0};
 8002dd8:	9400      	str	r4, [sp, #0]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002dda:	6184      	str	r4, [r0, #24]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8002ddc:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002dde:	f001 ff79 	bl	8004cd4 <HAL_RTC_Init>
 8002de2:	b108      	cbz	r0, 8002de8 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8002de4:	f7ff ff6e 	bl	8002cc4 <Error_Handler>
  sTime.Hours = 0x0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002de8:	480f      	ldr	r0, [pc, #60]	; (8002e28 <MX_RTC_Init+0x7c>)
  sTime.Hours = 0x0;
 8002dea:	f8ad 4004 	strh.w	r4, [sp, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002dee:	2201      	movs	r2, #1
 8002df0:	a901      	add	r1, sp, #4
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002df2:	e9cd 4404 	strd	r4, r4, [sp, #16]
  sTime.Seconds = 0x0;
 8002df6:	f88d 4006 	strb.w	r4, [sp, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002dfa:	f001 ffcb 	bl	8004d94 <HAL_RTC_SetTime>
 8002dfe:	b108      	cbz	r0, 8002e04 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002e00:	f7ff ff60 	bl	8002cc4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <MX_RTC_Init+0x84>)
  sDate.Month = RTC_MONTH_MAY;
  sDate.Date = 0x14;
  sDate.Year = 0x0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002e06:	4808      	ldr	r0, [pc, #32]	; (8002e28 <MX_RTC_Init+0x7c>)
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002e08:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4669      	mov	r1, sp
 8002e0e:	f002 f82b 	bl	8004e68 <HAL_RTC_SetDate>
 8002e12:	b108      	cbz	r0, 8002e18 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8002e14:	f7ff ff56 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // deactivating is important because RTC is not stopped at reset
  if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc)) {
 8002e18:	4803      	ldr	r0, [pc, #12]	; (8002e28 <MX_RTC_Init+0x7c>)
 8002e1a:	f002 f8c7 	bl	8004fac <HAL_RTCEx_DeactivateWakeUpTimer>
 8002e1e:	b108      	cbz	r0, 8002e24 <MX_RTC_Init+0x78>
  		Error_Handler();
 8002e20:	f7ff ff50 	bl	8002cc4 <Error_Handler>
  	}
  /* USER CODE END RTC_Init 2 */

}
 8002e24:	b006      	add	sp, #24
 8002e26:	bd10      	pop	{r4, pc}
 8002e28:	2000ec00 	.word	0x2000ec00
 8002e2c:	40002800 	.word	0x40002800
 8002e30:	00140502 	.word	0x00140502

08002e34 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002e34:	b510      	push	{r4, lr}
 8002e36:	4604      	mov	r4, r0
 8002e38:	b090      	sub	sp, #64	; 0x40

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e3a:	2238      	movs	r2, #56	; 0x38
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	a802      	add	r0, sp, #8
 8002e40:	f009 fc5a 	bl	800c6f8 <memset>
  if(rtcHandle->Instance==RTC)
 8002e44:	6822      	ldr	r2, [r4, #0]
 8002e46:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <HAL_RTC_MspInit+0x58>)
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d11c      	bne.n	8002e86 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e50:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e52:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e58:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e5a:	f001 fe09 	bl	8004a70 <HAL_RCCEx_PeriphCLKConfig>
 8002e5e:	b108      	cbz	r0, 8002e64 <HAL_RTC_MspInit+0x30>
    {
      Error_Handler();
 8002e60:	f7ff ff30 	bl	8002cc4 <Error_Handler>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e68:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002e6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002e74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e7a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e82:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002e84:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002e86:	b010      	add	sp, #64	; 0x40
 8002e88:	bd10      	pop	{r4, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40002800 	.word	0x40002800

08002e90 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002e90:	4810      	ldr	r0, [pc, #64]	; (8002ed4 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e92:	4a11      	ldr	r2, [pc, #68]	; (8002ed8 <MX_SPI1_Init+0x48>)
{
 8002e94:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e96:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002e9a:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ea8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002eac:	2208      	movs	r2, #8
 8002eae:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8002eb2:	2107      	movs	r1, #7
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002eb4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eb8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ebc:	e9c0 130b 	strd	r1, r3, [r0, #44]	; 0x2c
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ec0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ec2:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ec4:	f002 f999 	bl	80051fa <HAL_SPI_Init>
 8002ec8:	b118      	cbz	r0, 8002ed2 <MX_SPI1_Init+0x42>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002ece:	f7ff bef9 	b.w	8002cc4 <Error_Handler>
}
 8002ed2:	bd08      	pop	{r3, pc}
 8002ed4:	2000ec38 	.word	0x2000ec38
 8002ed8:	40013000 	.word	0x40013000

08002edc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ede:	4604      	mov	r4, r0
 8002ee0:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee2:	2214      	movs	r2, #20
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	a803      	add	r0, sp, #12
 8002ee8:	f009 fc06 	bl	800c6f8 <memset>
  if(spiHandle->Instance==SPI1)
 8002eec:	6822      	ldr	r2, [r4, #0]
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_SPI_MspInit+0x88>)
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d134      	bne.n	8002f5e <HAL_SPI_MspInit+0x82>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef8:	481b      	ldr	r0, [pc, #108]	; (8002f68 <HAL_SPI_MspInit+0x8c>)
 8002efa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002efc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f00:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f04:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f08:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002f0a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f0e:	f042 0202 	orr.w	r2, r2, #2
 8002f12:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f16:	f002 0202 	and.w	r2, r2, #2
 8002f1a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8002f1c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f20:	f042 0201 	orr.w	r2, r2, #1
 8002f24:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002f2e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f30:	2402      	movs	r4, #2
 8002f32:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f34:	2701      	movs	r7, #1
 8002f36:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f38:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	e9cd 7605 	strd	r7, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f44:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f46:	f000 fffb 	bl	8003f40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4a:	a903      	add	r1, sp, #12
 8002f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	e9cd 4403 	strd	r4, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f54:	e9cd 7605 	strd	r7, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f58:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5a:	f000 fff1 	bl	8003f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002f5e:	b009      	add	sp, #36	; 0x24
 8002f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40013000 	.word	0x40013000
 8002f68:	48000400 	.word	0x48000400

08002f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f6c:	b508      	push	{r3, lr}

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 2, 0);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2102      	movs	r1, #2
 8002f72:	f06f 000b 	mvn.w	r0, #11
 8002f76:	f000 fd75 	bl	8003a64 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	f06f 000a 	mvn.w	r0, #10
 8002f82:	f000 fd6f 	bl	8003a64 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 2, 0);
 8002f86:	2200      	movs	r2, #0
 8002f88:	2102      	movs	r1, #2
 8002f8a:	f06f 0009 	mvn.w	r0, #9
 8002f8e:	f000 fd69 	bl	8003a64 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2102      	movs	r1, #2
 8002f96:	f06f 0004 	mvn.w	r0, #4
 8002f9a:	f000 fd63 	bl	8003a64 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 2, 0);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	f06f 0003 	mvn.w	r0, #3
 8002fa6:	f000 fd5d 	bl	8003a64 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2102      	movs	r1, #2
 8002fae:	f06f 0001 	mvn.w	r0, #1
 8002fb2:	f000 fd57 	bl	8003a64 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 2, 0);
 8002fb6:	2005      	movs	r0, #5
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2102      	movs	r1, #2
 8002fbc:	f000 fd52 	bl	8003a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002fc4:	2005      	movs	r0, #5
 8002fc6:	f000 bd7f 	b.w	8003ac8 <HAL_NVIC_EnableIRQ>

08002fca <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fca:	e7fe      	b.n	8002fca <NMI_Handler>

08002fcc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fcc:	e7fe      	b.n	8002fcc <HardFault_Handler>

08002fce <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fce:	e7fe      	b.n	8002fce <MemManage_Handler>

08002fd0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fd0:	e7fe      	b.n	8002fd0 <BusFault_Handler>

08002fd2 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fd2:	e7fe      	b.n	8002fd2 <UsageFault_Handler>

08002fd4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fd4:	4770      	bx	lr

08002fd6 <DebugMon_Handler>:
 8002fd6:	4770      	bx	lr

08002fd8 <PendSV_Handler>:
 8002fd8:	4770      	bx	lr

08002fda <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fda:	f000 b989 	b.w	80032f0 <HAL_IncTick>

08002fde <RCC_IRQHandler>:
 8002fde:	4770      	bx	lr

08002fe0 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002fe0:	4801      	ldr	r0, [pc, #4]	; (8002fe8 <DMA1_Channel1_IRQHandler+0x8>)
 8002fe2:	f000 bf57 	b.w	8003e94 <HAL_DMA_IRQHandler>
 8002fe6:	bf00      	nop
 8002fe8:	20000fec 	.word	0x20000fec

08002fec <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002fec:	4801      	ldr	r0, [pc, #4]	; (8002ff4 <DMA1_Channel2_IRQHandler+0x8>)
 8002fee:	f000 bf51 	b.w	8003e94 <HAL_DMA_IRQHandler>
 8002ff2:	bf00      	nop
 8002ff4:	2000ece8 	.word	0x2000ece8

08002ff8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ff8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8002ffa:	2040      	movs	r0, #64	; 0x40
 8002ffc:	f001 f85a 	bl	80040b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003000:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 8003004:	2080      	movs	r0, #128	; 0x80
 8003006:	f001 b855 	b.w	80040b4 <HAL_GPIO_EXTI_IRQHandler>
	...

0800300c <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800300c:	4801      	ldr	r0, [pc, #4]	; (8003014 <TIM1_UP_IRQHandler+0x8>)
 800300e:	f002 bc4c 	b.w	80058aa <HAL_TIM_IRQHandler>
 8003012:	bf00      	nop
 8003014:	2000ec9c 	.word	0x2000ec9c

08003018 <TIM1_TRG_COM_IRQHandler>:
 8003018:	f7ff bff8 	b.w	800300c <TIM1_UP_IRQHandler>

0800301c <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800301c:	4801      	ldr	r0, [pc, #4]	; (8003024 <LPUART1_IRQHandler+0x8>)
 800301e:	f002 be75 	b.w	8005d0c <HAL_UART_IRQHandler>
 8003022:	bf00      	nop
 8003024:	2000ed48 	.word	0x2000ed48

08003028 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8003028:	4770      	bx	lr
	...

0800302c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800302c:	b500      	push	{lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800302e:	2210      	movs	r2, #16
{
 8003030:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003032:	eb0d 0002 	add.w	r0, sp, r2
 8003036:	2100      	movs	r1, #0
 8003038:	f009 fb5e 	bl	800c6f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800303c:	4816      	ldr	r0, [pc, #88]	; (8003098 <MX_TIM1_Init+0x6c>)
 800303e:	4a17      	ldr	r2, [pc, #92]	; (800309c <MX_TIM1_Init+0x70>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003040:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 0;
 8003042:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 159;
 8003046:	229f      	movs	r2, #159	; 0x9f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003048:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800304c:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003050:	e9c0 3305 	strd	r3, r3, [r0, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003054:	9303      	str	r3, [sp, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003056:	6083      	str	r3, [r0, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003058:	f002 fd12 	bl	8005a80 <HAL_TIM_Base_Init>
 800305c:	b108      	cbz	r0, 8003062 <MX_TIM1_Init+0x36>
  {
    Error_Handler();
 800305e:	f7ff fe31 	bl	8002cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003066:	480c      	ldr	r0, [pc, #48]	; (8003098 <MX_TIM1_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003068:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800306a:	a904      	add	r1, sp, #16
 800306c:	f002 fd42 	bl	8005af4 <HAL_TIM_ConfigClockSource>
 8003070:	b108      	cbz	r0, 8003076 <MX_TIM1_Init+0x4a>
  {
    Error_Handler();
 8003072:	f7ff fe27 	bl	8002cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8003076:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800307a:	2220      	movs	r2, #32
 800307c:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003080:	4805      	ldr	r0, [pc, #20]	; (8003098 <MX_TIM1_Init+0x6c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003082:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003084:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003086:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003088:	f002 fdd6 	bl	8005c38 <HAL_TIMEx_MasterConfigSynchronization>
 800308c:	b108      	cbz	r0, 8003092 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800308e:	f7ff fe19 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003092:	b009      	add	sp, #36	; 0x24
 8003094:	f85d fb04 	ldr.w	pc, [sp], #4
 8003098:	2000ec9c 	.word	0x2000ec9c
 800309c:	40012c00 	.word	0x40012c00

080030a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030a0:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM1)
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_TIM_Base_MspInit+0x4c>)
 80030a4:	6802      	ldr	r2, [r0, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d11d      	bne.n	80030e6 <HAL_TIM_Base_MspInit+0x46>
  SET_BIT(RCC->APB2ENR, Periphs);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 80030ae:	2102      	movs	r1, #2
 80030b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030b6:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80030b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2018      	movs	r0, #24
  (void)tmpreg;
 80030c4:	9b01      	ldr	r3, [sp, #4]
 80030c6:	f000 fccd 	bl	8003a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80030ca:	2018      	movs	r0, #24
 80030cc:	f000 fcfc 	bl	8003ac8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 2, 0);
 80030d0:	2200      	movs	r2, #0
 80030d2:	2102      	movs	r1, #2
 80030d4:	2019      	movs	r0, #25
 80030d6:	f000 fcc5 	bl	8003a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80030da:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80030dc:	b003      	add	sp, #12
 80030de:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80030e2:	f000 bcf1 	b.w	8003ac8 <HAL_NVIC_EnableIRQ>
}
 80030e6:	b003      	add	sp, #12
 80030e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80030ec:	40012c00 	.word	0x40012c00

080030f0 <MX_LPUART1_UART_Init>:
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80030f0:	4819      	ldr	r0, [pc, #100]	; (8003158 <MX_LPUART1_UART_Init+0x68>)
  hlpuart1.Init.BaudRate = 115200;
 80030f2:	4a1a      	ldr	r2, [pc, #104]	; (800315c <MX_LPUART1_UART_Init+0x6c>)
{
 80030f4:	b508      	push	{r3, lr}
  hlpuart1.Init.BaudRate = 115200;
 80030f6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80030fa:	e9c0 2300 	strd	r2, r3, [r0]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030fe:	2300      	movs	r3, #0
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX;
 8003100:	2208      	movs	r2, #8
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003102:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003106:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800310a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800310e:	6103      	str	r3, [r0, #16]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8003110:	2320      	movs	r3, #32
 8003112:	6283      	str	r3, [r0, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8003114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003118:	6403      	str	r3, [r0, #64]	; 0x40
  hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
 800311a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800311e:	6643      	str	r3, [r0, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003120:	f003 f9c5 	bl	80064ae <HAL_UART_Init>
 8003124:	b108      	cbz	r0, 800312a <MX_LPUART1_UART_Init+0x3a>
  {
    Error_Handler();
 8003126:	f7ff fdcd 	bl	8002cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800312a:	480b      	ldr	r0, [pc, #44]	; (8003158 <MX_LPUART1_UART_Init+0x68>)
 800312c:	2100      	movs	r1, #0
 800312e:	f003 fa34 	bl	800659a <HAL_UARTEx_SetTxFifoThreshold>
 8003132:	b108      	cbz	r0, 8003138 <MX_LPUART1_UART_Init+0x48>
  {
    Error_Handler();
 8003134:	f7ff fdc6 	bl	8002cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003138:	4807      	ldr	r0, [pc, #28]	; (8003158 <MX_LPUART1_UART_Init+0x68>)
 800313a:	2100      	movs	r1, #0
 800313c:	f003 fa4d 	bl	80065da <HAL_UARTEx_SetRxFifoThreshold>
 8003140:	b108      	cbz	r0, 8003146 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8003142:	f7ff fdbf 	bl	8002cc4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8003146:	4804      	ldr	r0, [pc, #16]	; (8003158 <MX_LPUART1_UART_Init+0x68>)
 8003148:	f003 fa07 	bl	800655a <HAL_UARTEx_EnableFifoMode>
 800314c:	b118      	cbz	r0, 8003156 <MX_LPUART1_UART_Init+0x66>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800314e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003152:	f7ff bdb7 	b.w	8002cc4 <Error_Handler>
}
 8003156:	bd08      	pop	{r3, pc}
 8003158:	2000ed48 	.word	0x2000ed48
 800315c:	40008000 	.word	0x40008000

08003160 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	b096      	sub	sp, #88	; 0x58
 8003164:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003166:	2214      	movs	r2, #20
 8003168:	2100      	movs	r1, #0
 800316a:	a803      	add	r0, sp, #12
 800316c:	f009 fac4 	bl	800c6f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003170:	2238      	movs	r2, #56	; 0x38
 8003172:	2100      	movs	r1, #0
 8003174:	a808      	add	r0, sp, #32
 8003176:	f009 fabf 	bl	800c6f8 <memset>
  if(uartHandle->Instance==LPUART1)
 800317a:	6832      	ldr	r2, [r6, #0]
 800317c:	4b26      	ldr	r3, [pc, #152]	; (8003218 <HAL_UART_MspInit+0xb8>)
 800317e:	429a      	cmp	r2, r3
 8003180:	d148      	bne.n	8003214 <HAL_UART_MspInit+0xb4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003182:	2320      	movs	r3, #32
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003184:	eb0d 0003 	add.w	r0, sp, r3
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003188:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800318a:	f001 fc71 	bl	8004a70 <HAL_RCCEx_PeriphCLKConfig>
 800318e:	b108      	cbz	r0, 8003194 <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 8003190:	f7ff fd98 	bl	8002cc4 <Error_Handler>
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2500      	movs	r5, #0
 800319a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800319c:	4c1f      	ldr	r4, [pc, #124]	; (800321c <HAL_UART_MspInit+0xbc>)
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80031a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031a6:	f002 0201 	and.w	r2, r2, #1
 80031aa:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80031ac:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80031ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031b0:	f042 0201 	orr.w	r2, r2, #1
 80031b4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80031b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80031be:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c0:	220c      	movs	r2, #12
 80031c2:	2302      	movs	r3, #2
 80031c4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80031ca:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80031d0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d2:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d6:	f000 feb3 	bl	8003f40 <HAL_GPIO_Init>
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80031da:	4911      	ldr	r1, [pc, #68]	; (8003220 <HAL_UART_MspInit+0xc0>)
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031dc:	6225      	str	r5, [r4, #32]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80031de:	2316      	movs	r3, #22
 80031e0:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031e4:	2310      	movs	r3, #16
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031e6:	e9c4 3502 	strd	r3, r5, [r4, #8]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80031ea:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031ec:	2380      	movs	r3, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ee:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80031f2:	e9c4 5506 	strd	r5, r5, [r4, #24]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80031f6:	f000 fd29 	bl	8003c4c <HAL_DMA_Init>
 80031fa:	b108      	cbz	r0, 8003200 <HAL_UART_MspInit+0xa0>
    {
      Error_Handler();
 80031fc:	f7ff fd62 	bl	8002cc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 8003200:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003202:	67f4      	str	r4, [r6, #124]	; 0x7c
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 8003204:	2200      	movs	r2, #0
 8003206:	2102      	movs	r1, #2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003208:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 800320a:	f000 fc2b 	bl	8003a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800320e:	2026      	movs	r0, #38	; 0x26
 8003210:	f000 fc5a 	bl	8003ac8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8003214:	b016      	add	sp, #88	; 0x58
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	40008000 	.word	0x40008000
 800321c:	2000ece8 	.word	0x2000ece8
 8003220:	4002001c 	.word	0x4002001c

08003224 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003224:	480d      	ldr	r0, [pc, #52]	; (800325c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003226:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003228:	f7ff fefe 	bl	8003028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800322c:	480c      	ldr	r0, [pc, #48]	; (8003260 <LoopForever+0x6>)
  ldr r1, =_edata
 800322e:	490d      	ldr	r1, [pc, #52]	; (8003264 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003230:	4a0d      	ldr	r2, [pc, #52]	; (8003268 <LoopForever+0xe>)
  movs r3, #0
 8003232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003234:	e002      	b.n	800323c <LoopCopyDataInit>

08003236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800323a:	3304      	adds	r3, #4

0800323c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800323c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800323e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003240:	d3f9      	bcc.n	8003236 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003244:	4c0a      	ldr	r4, [pc, #40]	; (8003270 <LoopForever+0x16>)
  movs r3, #0
 8003246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003248:	e001      	b.n	800324e <LoopFillZerobss>

0800324a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800324a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800324c:	3204      	adds	r2, #4

0800324e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800324e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003250:	d3fb      	bcc.n	800324a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003252:	f009 fa59 	bl	800c708 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003256:	f7ff fd87 	bl	8002d68 <main>

0800325a <LoopForever>:

LoopForever:
    b LoopForever
 800325a:	e7fe      	b.n	800325a <LoopForever>
  ldr   r0, =_estack
 800325c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003264:	20000bb4 	.word	0x20000bb4
  ldr r2, =_sidata
 8003268:	0801f520 	.word	0x0801f520
  ldr r2, =_sbss
 800326c:	20000f6c 	.word	0x20000f6c
  ldr r4, =_ebss
 8003270:	2000eee0 	.word	0x2000eee0

08003274 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003274:	e7fe      	b.n	8003274 <ADC_IRQHandler>
	...

08003278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003278:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800327a:	4c10      	ldr	r4, [pc, #64]	; (80032bc <HAL_InitTick+0x44>)
 800327c:	7823      	ldrb	r3, [r4, #0]
{
 800327e:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8003280:	b90b      	cbnz	r3, 8003286 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003282:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003284:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003286:	f001 f825 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 800328a:	7822      	ldrb	r2, [r4, #0]
 800328c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003290:	fbb3 f3f2 	udiv	r3, r3, r2
 8003294:	fbb0 f0f3 	udiv	r0, r0, r3
 8003298:	f000 fc24 	bl	8003ae4 <HAL_SYSTICK_Config>
 800329c:	4604      	mov	r4, r0
 800329e:	2800      	cmp	r0, #0
 80032a0:	d1ef      	bne.n	8003282 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a2:	2d0f      	cmp	r5, #15
 80032a4:	d8ed      	bhi.n	8003282 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032a6:	4602      	mov	r2, r0
 80032a8:	4629      	mov	r1, r5
 80032aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032ae:	f000 fbd9 	bl	8003a64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032b2:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <HAL_InitTick+0x48>)
 80032b4:	4620      	mov	r0, r4
 80032b6:	601d      	str	r5, [r3, #0]
  return status;
 80032b8:	e7e4      	b.n	8003284 <HAL_InitTick+0xc>
 80032ba:	bf00      	nop
 80032bc:	2000007c 	.word	0x2000007c
 80032c0:	20000080 	.word	0x20000080

080032c4 <HAL_Init>:
{
 80032c4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c6:	2003      	movs	r0, #3
 80032c8:	f000 fbba 	bl	8003a40 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80032cc:	f001 f802 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_Init+0x28>)
 80032d2:	6018      	str	r0, [r3, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032d4:	2000      	movs	r0, #0
 80032d6:	f7ff ffcf 	bl	8003278 <HAL_InitTick>
 80032da:	4604      	mov	r4, r0
 80032dc:	b918      	cbnz	r0, 80032e6 <HAL_Init+0x22>
    HAL_MspInit();
 80032de:	f7ff fe45 	bl	8002f6c <HAL_MspInit>
}
 80032e2:	4620      	mov	r0, r4
 80032e4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80032e6:	2401      	movs	r4, #1
 80032e8:	e7fb      	b.n	80032e2 <HAL_Init+0x1e>
 80032ea:	bf00      	nop
 80032ec:	20000078 	.word	0x20000078

080032f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80032f0:	4a03      	ldr	r2, [pc, #12]	; (8003300 <HAL_IncTick+0x10>)
 80032f2:	4b04      	ldr	r3, [pc, #16]	; (8003304 <HAL_IncTick+0x14>)
 80032f4:	6811      	ldr	r1, [r2, #0]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	440b      	add	r3, r1
 80032fa:	6013      	str	r3, [r2, #0]
}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	2000eddc 	.word	0x2000eddc
 8003304:	2000007c 	.word	0x2000007c

08003308 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003308:	4b01      	ldr	r3, [pc, #4]	; (8003310 <HAL_GetTick+0x8>)
 800330a:	6818      	ldr	r0, [r3, #0]
}
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	2000eddc 	.word	0x2000eddc

08003314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003318:	f7ff fff6 	bl	8003308 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800331c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800331e:	bf1c      	itt	ne
 8003320:	4b05      	ldrne	r3, [pc, #20]	; (8003338 <HAL_Delay+0x24>)
 8003322:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8003324:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8003326:	bf18      	it	ne
 8003328:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800332a:	f7ff ffed 	bl	8003308 <HAL_GetTick>
 800332e:	1b43      	subs	r3, r0, r5
 8003330:	42a3      	cmp	r3, r4
 8003332:	d3fa      	bcc.n	800332a <HAL_Delay+0x16>
  {
  }
}
 8003334:	bd38      	pop	{r3, r4, r5, pc}
 8003336:	bf00      	nop
 8003338:	2000007c 	.word	0x2000007c

0800333c <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800333c:	6880      	ldr	r0, [r0, #8]
}
 800333e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8003342:	4770      	bx	lr

08003344 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003346:	2300      	movs	r3, #0
 8003348:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800334a:	4604      	mov	r4, r0
 800334c:	2800      	cmp	r0, #0
 800334e:	f000 80e9 	beq.w	8003524 <HAL_ADC_Init+0x1e0>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003352:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8003354:	b925      	cbnz	r5, 8003360 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003356:	f7fd ff05 	bl	8001164 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800335a:	65e5      	str	r5, [r4, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800335c:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003360:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	00d0      	lsls	r0, r2, #3
 8003366:	f140 80a1 	bpl.w	80034ac <HAL_ADC_Init+0x168>
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	00d1      	lsls	r1, r2, #3
 800336e:	f100 80b4 	bmi.w	80034da <HAL_ADC_Init+0x196>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003372:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003374:	f042 0210 	orr.w	r2, r2, #16
 8003378:	65a2      	str	r2, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800337a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	65e2      	str	r2, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003382:	2501      	movs	r5, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff ffd9 	bl	800333c <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800338a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800338c:	f002 0210 	and.w	r2, r2, #16
 8003390:	4302      	orrs	r2, r0
 8003392:	f040 80c9 	bne.w	8003528 <HAL_ADC_Init+0x1e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003396:	6da2      	ldr	r2, [r4, #88]	; 0x58
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003398:	6920      	ldr	r0, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 800339a:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800339e:	f042 0202 	orr.w	r2, r2, #2
 80033a2:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	07d2      	lsls	r2, r2, #31
 80033a8:	d45d      	bmi.n	8003466 <HAL_ADC_Init+0x122>
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80033aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80033ac:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033ae:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80033b2:	3a00      	subs	r2, #0
 80033b4:	bf18      	it	ne
 80033b6:	2201      	movne	r2, #1
 80033b8:	0317      	lsls	r7, r2, #12
 80033ba:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80033be:	430a      	orrs	r2, r1
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80033c0:	7e21      	ldrb	r1, [r4, #24]
 80033c2:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80033c6:	7e61      	ldrb	r1, [r4, #25]
 80033c8:	ea42 32c1 	orr.w	r2, r2, r1, lsl #15
 80033cc:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80033d0:	2800      	cmp	r0, #0
 80033d2:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 80033d6:	bfb4      	ite	lt
 80033d8:	f020 4100 	biclt.w	r1, r0, #2147483648	; 0x80000000
 80033dc:	f44f 1100 	movge.w	r1, #2097152	; 0x200000
 80033e0:	433a      	orrs	r2, r7
 80033e2:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033e4:	f894 1020 	ldrb.w	r1, [r4, #32]
 80033e8:	2901      	cmp	r1, #1
 80033ea:	d103      	bne.n	80033f4 <HAL_ADC_Init+0xb0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80033ec:	2e00      	cmp	r6, #0
 80033ee:	d176      	bne.n	80034de <HAL_ADC_Init+0x19a>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80033f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80033f6:	b121      	cbz	r1, 8003402 <HAL_ADC_Init+0xbe>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80033f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80033fa:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
 80033fe:	4331      	orrs	r1, r6
 8003400:	430a      	orrs	r2, r1
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003402:	68d9      	ldr	r1, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003404:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
      MODIFY_REG(hadc->Instance->CFGR1,
 8003406:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 800340a:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 800340e:	4311      	orrs	r1, r2
 8003410:	60d9      	str	r1, [r3, #12]
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003412:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003416:	6861      	ldr	r1, [r4, #4]
      if (hadc->Init.OversamplingMode == ENABLE)
 8003418:	2a01      	cmp	r2, #1
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800341a:	f001 4c40 	and.w	ip, r1, #3221225472	; 0xc0000000
 800341e:	ea4c 0606 	orr.w	r6, ip, r6
      if (hadc->Init.OversamplingMode == ENABLE)
 8003422:	d109      	bne.n	8003438 <HAL_ADC_Init+0xf4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003424:	e9d4 2710 	ldrd	r2, r7, [r4, #64]	; 0x40
 8003428:	433a      	orrs	r2, r7
 800342a:	4332      	orrs	r2, r6
 800342c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800342e:	4332      	orrs	r2, r6
 8003430:	ea42 020c 	orr.w	r2, r2, ip
 8003434:	f042 0601 	orr.w	r6, r2, #1
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003438:	691f      	ldr	r7, [r3, #16]
 800343a:	4a3e      	ldr	r2, [pc, #248]	; (8003534 <HAL_ADC_Init+0x1f0>)
 800343c:	403a      	ands	r2, r7
 800343e:	4332      	orrs	r2, r6
 8003440:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003442:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003446:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800344a:	d00c      	beq.n	8003466 <HAL_ADC_Init+0x122>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800344c:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8003450:	d009      	beq.n	8003466 <HAL_ADC_Init+0x122>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003452:	4e39      	ldr	r6, [pc, #228]	; (8003538 <HAL_ADC_Init+0x1f4>)
 8003454:	f8d6 2708 	ldr.w	r2, [r6, #1800]	; 0x708
 8003458:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 800345c:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8003460:	430a      	orrs	r2, r1
 8003462:	f8c6 2708 	str.w	r2, [r6, #1800]	; 0x708
  MODIFY_REG(ADCx->SMPR,
 8003466:	695a      	ldr	r2, [r3, #20]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003468:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800346a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800346c:	f022 0207 	bic.w	r2, r2, #7
 8003470:	4332      	orrs	r2, r6
 8003472:	615a      	str	r2, [r3, #20]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800347a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800347e:	615a      	str	r2, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003480:	2800      	cmp	r0, #0
 8003482:	d135      	bne.n	80034f0 <HAL_ADC_Init+0x1ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003486:	f062 020f 	orn	r2, r2, #15
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800348a:	629a      	str	r2, [r3, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f003 0307 	and.w	r3, r3, #7
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003492:	429e      	cmp	r6, r3
 8003494:	d13c      	bne.n	8003510 <HAL_ADC_Init+0x1cc>
      == hadc->Init.SamplingTimeCommon1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003496:	2300      	movs	r3, #0
 8003498:	65e3      	str	r3, [r4, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800349a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800349c:	f023 0303 	bic.w	r3, r3, #3
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 80034a6:	4628      	mov	r0, r5
 80034a8:	b003      	add	sp, #12
 80034aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 80034ac:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034ae:	4923      	ldr	r1, [pc, #140]	; (800353c <HAL_ADC_Init+0x1f8>)
 80034b0:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80034b4:	f022 0217 	bic.w	r2, r2, #23
 80034b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034bc:	609a      	str	r2, [r3, #8]
 80034be:	4a20      	ldr	r2, [pc, #128]	; (8003540 <HAL_ADC_Init+0x1fc>)
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	fbb2 f2f1 	udiv	r2, r2, r1
 80034c6:	3201      	adds	r2, #1
 80034c8:	0052      	lsls	r2, r2, #1
      wait_loop_index--;
 80034ca:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 80034cc:	9a01      	ldr	r2, [sp, #4]
 80034ce:	2a00      	cmp	r2, #0
 80034d0:	f43f af4b 	beq.w	800336a <HAL_ADC_Init+0x26>
      wait_loop_index--;
 80034d4:	9a01      	ldr	r2, [sp, #4]
 80034d6:	3a01      	subs	r2, #1
 80034d8:	e7f7      	b.n	80034ca <HAL_ADC_Init+0x186>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034da:	2500      	movs	r5, #0
 80034dc:	e752      	b.n	8003384 <HAL_ADC_Init+0x40>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80034e0:	f041 0120 	orr.w	r1, r1, #32
 80034e4:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80034e8:	f041 0101 	orr.w	r1, r1, #1
 80034ec:	65e1      	str	r1, [r4, #92]	; 0x5c
 80034ee:	e781      	b.n	80033f4 <HAL_ADC_Init+0xb0>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034f0:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
 80034f4:	d1ca      	bne.n	800348c <HAL_ADC_Init+0x148>
      MODIFY_REG(hadc->Instance->CHSELR,
 80034f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034f8:	69e2      	ldr	r2, [r4, #28]
 80034fa:	3a01      	subs	r2, #1
 80034fc:	0092      	lsls	r2, r2, #2
 80034fe:	f06f 010f 	mvn.w	r1, #15
 8003502:	f002 021c 	and.w	r2, r2, #28
 8003506:	fa01 f202 	lsl.w	r2, r1, r2
 800350a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800350c:	430a      	orrs	r2, r1
 800350e:	e7bc      	b.n	800348a <HAL_ADC_Init+0x146>
      ADC_STATE_CLR_SET(hadc->State,
 8003510:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003512:	f023 0312 	bic.w	r3, r3, #18
 8003516:	f043 0310 	orr.w	r3, r3, #16
 800351a:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	65e3      	str	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 8003524:	2501      	movs	r5, #1
 8003526:	e7be      	b.n	80034a6 <HAL_ADC_Init+0x162>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003528:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800352a:	f043 0310 	orr.w	r3, r3, #16
 800352e:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8003530:	e7f8      	b.n	8003524 <HAL_ADC_Init+0x1e0>
 8003532:	bf00      	nop
 8003534:	1ffffc02 	.word	0x1ffffc02
 8003538:	40012000 	.word	0x40012000
 800353c:	00030d40 	.word	0x00030d40
 8003540:	20000078 	.word	0x20000078

08003544 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003544:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003546:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003548:	f7ff f9ca 	bl	80028e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800354c:	bd08      	pop	{r3, pc}

0800354e <HAL_ADC_ErrorCallback>:
 800354e:	4770      	bx	lr

08003550 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003550:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8003552:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003554:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800355a:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800355c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800355e:	f043 0304 	orr.w	r3, r3, #4
 8003562:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003564:	f7ff fff3 	bl	800354e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003568:	bd08      	pop	{r3, pc}

0800356a <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800356a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800356c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800356e:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8003572:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003574:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003576:	d129      	bne.n	80035cc <ADC_DMAConvCplt+0x62>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800357c:	659a      	str	r2, [r3, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800357e:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003580:	68d1      	ldr	r1, [r2, #12]
 8003582:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8003586:	d114      	bne.n	80035b2 <ADC_DMAConvCplt+0x48>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003588:	7e99      	ldrb	r1, [r3, #26]
 800358a:	b991      	cbnz	r1, 80035b2 <ADC_DMAConvCplt+0x48>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800358c:	6811      	ldr	r1, [r2, #0]
 800358e:	0709      	lsls	r1, r1, #28
 8003590:	d50f      	bpl.n	80035b2 <ADC_DMAConvCplt+0x48>
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003592:	4610      	mov	r0, r2
 8003594:	f7ff fed2 	bl	800333c <LL_ADC_REG_IsConversionOngoing>
 8003598:	b978      	cbnz	r0, 80035ba <ADC_DMAConvCplt+0x50>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800359a:	6851      	ldr	r1, [r2, #4]
 800359c:	f021 010c 	bic.w	r1, r1, #12
 80035a0:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80035a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035a8:	f022 0201 	bic.w	r2, r2, #1
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	659a      	str	r2, [r3, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff f97c 	bl	80028b0 <HAL_ADC_ConvCpltCallback>
}
 80035b8:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035bc:	f042 0220 	orr.w	r2, r2, #32
 80035c0:	659a      	str	r2, [r3, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80035ca:	e7f2      	b.n	80035b2 <ADC_DMAConvCplt+0x48>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035cc:	06d2      	lsls	r2, r2, #27
 80035ce:	d503      	bpl.n	80035d8 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ffbc 	bl	800354e <HAL_ADC_ErrorCallback>
 80035d6:	e7ef      	b.n	80035b8 <ADC_DMAConvCplt+0x4e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 80035da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e0:	4718      	bx	r3
	...

080035e4 <HAL_ADC_ConfigChannel>:
{
 80035e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80035ea:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80035ee:	2b01      	cmp	r3, #1
{
 80035f0:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80035f2:	f000 80c5 	beq.w	8003780 <HAL_ADC_ConfigChannel+0x19c>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035f6:	6805      	ldr	r5, [r0, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80035f8:	6906      	ldr	r6, [r0, #16]
  __HAL_LOCK(hadc);
 80035fa:	2301      	movs	r3, #1
 80035fc:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003600:	4628      	mov	r0, r5
 8003602:	f7ff fe9b 	bl	800333c <LL_ADC_REG_IsConversionOngoing>
 8003606:	2800      	cmp	r0, #0
 8003608:	f040 80b4 	bne.w	8003774 <HAL_ADC_ConfigChannel+0x190>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800360c:	e9d1 2000 	ldrd	r2, r0, [r1]
    if (pConfig->Rank != ADC_RANK_NONE)
 8003610:	2802      	cmp	r0, #2
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003612:	f026 0304 	bic.w	r3, r6, #4
    if (pConfig->Rank != ADC_RANK_NONE)
 8003616:	f000 8082 	beq.w	800371e <HAL_ADC_ConfigChannel+0x13a>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800361a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800361e:	f3c2 0e11 	ubfx	lr, r2, #0, #18
 8003622:	d113      	bne.n	800364c <HAL_ADC_ConfigChannel+0x68>
 8003624:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003626:	ea43 030e 	orr.w	r3, r3, lr
  MODIFY_REG(ADCx->CHSELR,
 800362a:	62ab      	str	r3, [r5, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 800362c:	688b      	ldr	r3, [r1, #8]
 800362e:	6968      	ldr	r0, [r5, #20]
 8003630:	ea03 2302 	and.w	r3, r3, r2, lsl #8
 8003634:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003638:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800363c:	ea20 2102 	bic.w	r1, r0, r2, lsl #8
 8003640:	430b      	orrs	r3, r1
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003642:	2a00      	cmp	r2, #0
 8003644:	616b      	str	r3, [r5, #20]
 8003646:	db26      	blt.n	8003696 <HAL_ADC_ConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003648:	2000      	movs	r0, #0
}
 800364a:	e055      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x114>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800364c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800364e:	f000 071f 	and.w	r7, r0, #31
 8003652:	f04f 0c0f 	mov.w	ip, #15
 8003656:	fa0c fc07 	lsl.w	ip, ip, r7
 800365a:	ea6f 060c 	mvn.w	r6, ip
 800365e:	ea23 0c0c 	bic.w	ip, r3, ip
 8003662:	f1be 0f00 	cmp.w	lr, #0
 8003666:	d111      	bne.n	800368c <HAL_ADC_ConfigChannel+0xa8>
 8003668:	f3c2 6384 	ubfx	r3, r2, #26, #5
 800366c:	40bb      	lsls	r3, r7
 800366e:	ea43 030c 	orr.w	r3, r3, ip
 8003672:	6623      	str	r3, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003674:	0880      	lsrs	r0, r0, #2
 8003676:	69e3      	ldr	r3, [r4, #28]
 8003678:	3001      	adds	r0, #1
 800367a:	4298      	cmp	r0, r3
 800367c:	d8d6      	bhi.n	800362c <HAL_ADC_ConfigChannel+0x48>
  MODIFY_REG(ADCx->CHSELR,
 800367e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003680:	f3c2 6383 	ubfx	r3, r2, #26, #4
 8003684:	40bb      	lsls	r3, r7
 8003686:	4006      	ands	r6, r0
 8003688:	4333      	orrs	r3, r6
 800368a:	e7ce      	b.n	800362a <HAL_ADC_ConfigChannel+0x46>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	fa92 f3a2 	rbit	r3, r2
  return __builtin_clz(value);
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	e7ea      	b.n	800366c <HAL_ADC_ConfigChannel+0x88>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003696:	493b      	ldr	r1, [pc, #236]	; (8003784 <HAL_ADC_ConfigChannel+0x1a0>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003698:	483b      	ldr	r0, [pc, #236]	; (8003788 <HAL_ADC_ConfigChannel+0x1a4>)
 800369a:	f8d1 3708 	ldr.w	r3, [r1, #1800]	; 0x708
 800369e:	4282      	cmp	r2, r0
 80036a0:	f003 75e0 	and.w	r5, r3, #29360128	; 0x1c00000
 80036a4:	d119      	bne.n	80036da <HAL_ADC_ConfigChannel+0xf6>
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	d4ce      	bmi.n	8003648 <HAL_ADC_ConfigChannel+0x64>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036aa:	f8d1 3708 	ldr.w	r3, [r1, #1800]	; 0x708
 80036ae:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80036b2:	432b      	orrs	r3, r5
 80036b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036b8:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036bc:	4b33      	ldr	r3, [pc, #204]	; (800378c <HAL_ADC_ConfigChannel+0x1a8>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b33      	ldr	r3, [pc, #204]	; (8003790 <HAL_ADC_ConfigChannel+0x1ac>)
 80036c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c6:	230c      	movs	r3, #12
 80036c8:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 80036cc:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80036ce:	9b01      	ldr	r3, [sp, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0b9      	beq.n	8003648 <HAL_ADC_ConfigChannel+0x64>
            wait_loop_index--;
 80036d4:	9b01      	ldr	r3, [sp, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	e7f8      	b.n	80036cc <HAL_ADC_ConfigChannel+0xe8>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80036da:	482e      	ldr	r0, [pc, #184]	; (8003794 <HAL_ADC_ConfigChannel+0x1b0>)
 80036dc:	4282      	cmp	r2, r0
 80036de:	d110      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x11e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036e0:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
 80036e4:	d1b0      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x64>
 80036e6:	f8d1 3708 	ldr.w	r3, [r1, #1800]	; 0x708
 80036ea:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80036ee:	432b      	orrs	r3, r5
 80036f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036f4:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
  __HAL_UNLOCK(hadc);
 80036f8:	2300      	movs	r3, #0
 80036fa:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 80036fe:	b003      	add	sp, #12
 8003700:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003702:	4825      	ldr	r0, [pc, #148]	; (8003798 <HAL_ADC_ConfigChannel+0x1b4>)
 8003704:	4282      	cmp	r2, r0
 8003706:	d19f      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x64>
 8003708:	f413 0080 	ands.w	r0, r3, #4194304	; 0x400000
 800370c:	d19c      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x64>
 800370e:	f8d1 3708 	ldr.w	r3, [r1, #1800]	; 0x708
 8003712:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003716:	432b      	orrs	r3, r5
 8003718:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800371c:	e7ea      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x110>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800371e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003722:	bf01      	itttt	eq
 8003724:	6aab      	ldreq	r3, [r5, #40]	; 0x28
 8003726:	f3c2 0111 	ubfxeq	r1, r2, #0, #18
 800372a:	438b      	biceq	r3, r1
 800372c:	62ab      	streq	r3, [r5, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800372e:	2a00      	cmp	r2, #0
 8003730:	da8a      	bge.n	8003648 <HAL_ADC_ConfigChannel+0x64>
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003732:	4815      	ldr	r0, [pc, #84]	; (8003788 <HAL_ADC_ConfigChannel+0x1a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003734:	4913      	ldr	r1, [pc, #76]	; (8003784 <HAL_ADC_ConfigChannel+0x1a0>)
 8003736:	4282      	cmp	r2, r0
 8003738:	f8d1 3708 	ldr.w	r3, [r1, #1800]	; 0x708
 800373c:	d109      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x16e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800373e:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003742:	f003 73a0 	and.w	r3, r3, #20971520	; 0x1400000
 8003746:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
 8003750:	e77a      	b.n	8003648 <HAL_ADC_ConfigChannel+0x64>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003752:	4810      	ldr	r0, [pc, #64]	; (8003794 <HAL_ADC_ConfigChannel+0x1b0>)
 8003754:	4282      	cmp	r2, r0
 8003756:	d104      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x17e>
 8003758:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800375c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003760:	e7f1      	b.n	8003746 <HAL_ADC_ConfigChannel+0x162>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003762:	480d      	ldr	r0, [pc, #52]	; (8003798 <HAL_ADC_ConfigChannel+0x1b4>)
 8003764:	4282      	cmp	r2, r0
 8003766:	f47f af6f 	bne.w	8003648 <HAL_ADC_ConfigChannel+0x64>
 800376a:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800376e:	f003 73c0 	and.w	r3, r3, #25165824	; 0x1800000
 8003772:	e7e8      	b.n	8003746 <HAL_ADC_ConfigChannel+0x162>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003774:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003776:	f042 0220 	orr.w	r2, r2, #32
 800377a:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 800377c:	4618      	mov	r0, r3
 800377e:	e7bb      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x114>
  __HAL_LOCK(hadc);
 8003780:	2002      	movs	r0, #2
 8003782:	e7bc      	b.n	80036fe <HAL_ADC_ConfigChannel+0x11a>
 8003784:	40012000 	.word	0x40012000
 8003788:	b0001000 	.word	0xb0001000
 800378c:	20000078 	.word	0x20000078
 8003790:	00030d40 	.word	0x00030d40
 8003794:	b8004000 	.word	0xb8004000
 8003798:	b4002000 	.word	0xb4002000

0800379c <ADC_ConversionStop>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800379c:	6802      	ldr	r2, [r0, #0]
{
 800379e:	b538      	push	{r3, r4, r5, lr}
 80037a0:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80037a2:	4610      	mov	r0, r2
 80037a4:	f7ff fdca 	bl	800333c <LL_ADC_REG_IsConversionOngoing>
 80037a8:	b908      	cbnz	r0, 80037ae <ADC_ConversionStop+0x12>
  return HAL_OK;
 80037aa:	2000      	movs	r0, #0
}
 80037ac:	bd38      	pop	{r3, r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037ae:	6893      	ldr	r3, [r2, #8]
 80037b0:	0799      	lsls	r1, r3, #30
 80037b2:	d407      	bmi.n	80037c4 <ADC_ConversionStop+0x28>
  MODIFY_REG(ADCx->CR,
 80037b4:	6893      	ldr	r3, [r2, #8]
 80037b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037ba:	f023 0317 	bic.w	r3, r3, #23
 80037be:	f043 0310 	orr.w	r3, r3, #16
 80037c2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80037c4:	f7ff fda0 	bl	8003308 <HAL_GetTick>
 80037c8:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	075b      	lsls	r3, r3, #29
 80037d0:	d5eb      	bpl.n	80037aa <ADC_ConversionStop+0xe>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80037d2:	f7ff fd99 	bl	8003308 <HAL_GetTick>
 80037d6:	1b40      	subs	r0, r0, r5
 80037d8:	2802      	cmp	r0, #2
 80037da:	d9f6      	bls.n	80037ca <ADC_ConversionStop+0x2e>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	075a      	lsls	r2, r3, #29
 80037e2:	d5f2      	bpl.n	80037ca <ADC_ConversionStop+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037e6:	f043 0310 	orr.w	r3, r3, #16
 80037ea:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80037f4:	2001      	movs	r0, #1
 80037f6:	e7d9      	b.n	80037ac <ADC_ConversionStop+0x10>

080037f8 <ADC_Enable>:
{
 80037f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80037fa:	2300      	movs	r3, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037fc:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 80037fe:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003800:	6893      	ldr	r3, [r2, #8]
 8003802:	07dd      	lsls	r5, r3, #31
{
 8003804:	4604      	mov	r4, r0
 8003806:	d502      	bpl.n	800380e <ADC_Enable+0x16>
  return HAL_OK;
 8003808:	2000      	movs	r0, #0
}
 800380a:	b002      	add	sp, #8
 800380c:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800380e:	6891      	ldr	r1, [r2, #8]
 8003810:	4b21      	ldr	r3, [pc, #132]	; (8003898 <ADC_Enable+0xa0>)
 8003812:	4219      	tst	r1, r3
 8003814:	d009      	beq.n	800382a <ADC_Enable+0x32>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003816:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003818:	f043 0310 	orr.w	r3, r3, #16
 800381c:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8003826:	2001      	movs	r0, #1
 8003828:	e7ef      	b.n	800380a <ADC_Enable+0x12>
  MODIFY_REG(ADCx->CR,
 800382a:	6893      	ldr	r3, [r2, #8]
 800382c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003830:	f023 0317 	bic.w	r3, r3, #23
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800383a:	4b18      	ldr	r3, [pc, #96]	; (800389c <ADC_Enable+0xa4>)
 800383c:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003840:	0218      	lsls	r0, r3, #8
 8003842:	d41c      	bmi.n	800387e <ADC_Enable+0x86>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003844:	7e63      	ldrb	r3, [r4, #25]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d0de      	beq.n	8003808 <ADC_Enable+0x10>
      tickstart = HAL_GetTick();
 800384a:	f7ff fd5d 	bl	8003308 <HAL_GetTick>
  MODIFY_REG(ADCx->CR,
 800384e:	4e14      	ldr	r6, [pc, #80]	; (80038a0 <ADC_Enable+0xa8>)
 8003850:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003852:	6822      	ldr	r2, [r4, #0]
 8003854:	6813      	ldr	r3, [r2, #0]
 8003856:	07db      	lsls	r3, r3, #31
 8003858:	d4d6      	bmi.n	8003808 <ADC_Enable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800385a:	6893      	ldr	r3, [r2, #8]
 800385c:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 800385e:	bf5f      	itttt	pl
 8003860:	6893      	ldrpl	r3, [r2, #8]
 8003862:	4033      	andpl	r3, r6
 8003864:	f043 0301 	orrpl.w	r3, r3, #1
 8003868:	6093      	strpl	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800386a:	f7ff fd4d 	bl	8003308 <HAL_GetTick>
 800386e:	1b40      	subs	r0, r0, r5
 8003870:	2802      	cmp	r0, #2
 8003872:	d9ee      	bls.n	8003852 <ADC_Enable+0x5a>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	07da      	lsls	r2, r3, #31
 800387a:	d4ea      	bmi.n	8003852 <ADC_Enable+0x5a>
 800387c:	e7cb      	b.n	8003816 <ADC_Enable+0x1e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <ADC_Enable+0xac>)
 8003880:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <ADC_Enable+0xb0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	fbb3 f3f2 	udiv	r3, r3, r2
 8003888:	3301      	adds	r3, #1
        wait_loop_index--;
 800388a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800388c:	9b01      	ldr	r3, [sp, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0d8      	beq.n	8003844 <ADC_Enable+0x4c>
        wait_loop_index--;
 8003892:	9b01      	ldr	r3, [sp, #4]
 8003894:	3b01      	subs	r3, #1
 8003896:	e7f8      	b.n	800388a <ADC_Enable+0x92>
 8003898:	80000017 	.word	0x80000017
 800389c:	40012000 	.word	0x40012000
 80038a0:	7fffffe8 	.word	0x7fffffe8
 80038a4:	20000078 	.word	0x20000078
 80038a8:	00030d40 	.word	0x00030d40

080038ac <HAL_ADC_Start_DMA>:
{
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038ae:	6805      	ldr	r5, [r0, #0]
{
 80038b0:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038b2:	4628      	mov	r0, r5
{
 80038b4:	460e      	mov	r6, r1
 80038b6:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038b8:	f7ff fd40 	bl	800333c <LL_ADC_REG_IsConversionOngoing>
 80038bc:	2800      	cmp	r0, #0
 80038be:	d145      	bne.n	800394c <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 80038c0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d041      	beq.n	800394c <HAL_ADC_Start_DMA+0xa0>
 80038c8:	2301      	movs	r3, #1
 80038ca:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80038ce:	68eb      	ldr	r3, [r5, #12]
 80038d0:	07da      	lsls	r2, r3, #31
 80038d2:	d40e      	bmi.n	80038f2 <HAL_ADC_Start_DMA+0x46>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038d4:	68ab      	ldr	r3, [r5, #8]
 80038d6:	07db      	lsls	r3, r3, #31
 80038d8:	d507      	bpl.n	80038ea <HAL_ADC_Start_DMA+0x3e>
  MODIFY_REG(ADCx->CR,
 80038da:	68ab      	ldr	r3, [r5, #8]
 80038dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038e0:	f023 0317 	bic.w	r3, r3, #23
 80038e4:	f043 0302 	orr.w	r3, r3, #2
 80038e8:	60ab      	str	r3, [r5, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80038ea:	68eb      	ldr	r3, [r5, #12]
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 80038f2:	4620      	mov	r0, r4
 80038f4:	f7ff ff80 	bl	80037f8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80038f8:	bb38      	cbnz	r0, 800394a <HAL_ADC_Start_DMA+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 80038fa:	6da5      	ldr	r5, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038fc:	4b14      	ldr	r3, [pc, #80]	; (8003950 <HAL_ADC_Start_DMA+0xa4>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038fe:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8003900:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8003904:	f025 0501 	bic.w	r5, r5, #1
 8003908:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 800390c:	65a5      	str	r5, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800390e:	6d25      	ldr	r5, [r4, #80]	; 0x50
      ADC_CLEAR_ERRORCODE(hadc);
 8003910:	65e0      	str	r0, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003912:	62eb      	str	r3, [r5, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003914:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <HAL_ADC_Start_DMA+0xa8>)
 8003916:	632b      	str	r3, [r5, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <HAL_ADC_Start_DMA+0xac>)
 800391a:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800391c:	231c      	movs	r3, #28
 800391e:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 8003920:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003924:	684b      	ldr	r3, [r1, #4]
 8003926:	f043 0310 	orr.w	r3, r3, #16
 800392a:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800392c:	4632      	mov	r2, r6
 800392e:	463b      	mov	r3, r7
 8003930:	3140      	adds	r1, #64	; 0x40
 8003932:	4628      	mov	r0, r5
 8003934:	f000 f9fe 	bl	8003d34 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003938:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800393a:	6893      	ldr	r3, [r2, #8]
 800393c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003940:	f023 0317 	bic.w	r3, r3, #23
 8003944:	f043 0304 	orr.w	r3, r3, #4
 8003948:	6093      	str	r3, [r2, #8]
}
 800394a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 800394c:	2002      	movs	r0, #2
 800394e:	e7fc      	b.n	800394a <HAL_ADC_Start_DMA+0x9e>
 8003950:	0800356b 	.word	0x0800356b
 8003954:	08003545 	.word	0x08003545
 8003958:	08003551 	.word	0x08003551

0800395c <ADC_Disable>:
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800395c:	6802      	ldr	r2, [r0, #0]
{
 800395e:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003960:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003962:	6891      	ldr	r1, [r2, #8]
 8003964:	4604      	mov	r4, r0
 8003966:	07c8      	lsls	r0, r1, #31
 8003968:	d401      	bmi.n	800396e <ADC_Disable+0x12>
  return HAL_OK;
 800396a:	2000      	movs	r0, #0
}
 800396c:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 800396e:	0799      	lsls	r1, r3, #30
 8003970:	d4fb      	bmi.n	800396a <ADC_Disable+0xe>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003972:	6893      	ldr	r3, [r2, #8]
 8003974:	f003 0305 	and.w	r3, r3, #5
 8003978:	2b01      	cmp	r3, #1
 800397a:	d119      	bne.n	80039b0 <ADC_Disable+0x54>
  MODIFY_REG(ADCx->CR,
 800397c:	6893      	ldr	r3, [r2, #8]
 800397e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003982:	f023 0317 	bic.w	r3, r3, #23
 8003986:	f043 0302 	orr.w	r3, r3, #2
 800398a:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800398c:	2303      	movs	r3, #3
 800398e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003990:	f7ff fcba 	bl	8003308 <HAL_GetTick>
 8003994:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	07db      	lsls	r3, r3, #31
 800399c:	d5e5      	bpl.n	800396a <ADC_Disable+0xe>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800399e:	f7ff fcb3 	bl	8003308 <HAL_GetTick>
 80039a2:	1b40      	subs	r0, r0, r5
 80039a4:	2802      	cmp	r0, #2
 80039a6:	d9f6      	bls.n	8003996 <ADC_Disable+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	07da      	lsls	r2, r3, #31
 80039ae:	d5f2      	bpl.n	8003996 <ADC_Disable+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039b2:	f043 0310 	orr.w	r3, r3, #16
 80039b6:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80039c0:	2001      	movs	r0, #1
 80039c2:	e7d3      	b.n	800396c <ADC_Disable+0x10>

080039c4 <HAL_ADC_Stop_DMA>:
{
 80039c4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 80039c6:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80039ca:	2b01      	cmp	r3, #1
{
 80039cc:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80039ce:	d034      	beq.n	8003a3a <HAL_ADC_Stop_DMA+0x76>
 80039d0:	2301      	movs	r3, #1
 80039d2:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80039d6:	f7ff fee1 	bl	800379c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80039da:	4604      	mov	r4, r0
 80039dc:	b9e0      	cbnz	r0, 8003a18 <HAL_ADC_Stop_DMA+0x54>
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80039de:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80039e0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d107      	bne.n	80039f8 <HAL_ADC_Stop_DMA+0x34>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80039e8:	f000 f9e8 	bl	8003dbc <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 80039ec:	4604      	mov	r4, r0
 80039ee:	b118      	cbz	r0, 80039f8 <HAL_ADC_Stop_DMA+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039f0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80039f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f6:	65ab      	str	r3, [r5, #88]	; 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80039f8:	682a      	ldr	r2, [r5, #0]
 80039fa:	6853      	ldr	r3, [r2, #4]
 80039fc:	f023 0310 	bic.w	r3, r3, #16
 8003a00:	6053      	str	r3, [r2, #4]
      tmp_hal_status = ADC_Disable(hadc);
 8003a02:	4628      	mov	r0, r5
    if (tmp_hal_status == HAL_OK)
 8003a04:	b96c      	cbnz	r4, 8003a22 <HAL_ADC_Stop_DMA+0x5e>
      tmp_hal_status = ADC_Disable(hadc);
 8003a06:	f7ff ffa9 	bl	800395c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	b160      	cbz	r0, 8003a28 <HAL_ADC_Stop_DMA+0x64>
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8003a0e:	682a      	ldr	r2, [r5, #0]
 8003a10:	68d3      	ldr	r3, [r2, #12]
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(hadc);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
}
 8003a1e:	4620      	mov	r0, r4
 8003a20:	bd38      	pop	{r3, r4, r5, pc}
      (void)ADC_Disable(hadc);
 8003a22:	f7ff ff9b 	bl	800395c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003a26:	e7f2      	b.n	8003a0e <HAL_ADC_Stop_DMA+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 8003a28:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a2e:	f023 0301 	bic.w	r3, r3, #1
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	65ab      	str	r3, [r5, #88]	; 0x58
 8003a38:	e7e9      	b.n	8003a0e <HAL_ADC_Stop_DMA+0x4a>
  __HAL_LOCK(hadc);
 8003a3a:	2402      	movs	r4, #2
 8003a3c:	e7ef      	b.n	8003a1e <HAL_ADC_Stop_DMA+0x5a>
	...

08003a40 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a40:	4907      	ldr	r1, [pc, #28]	; (8003a60 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003a42:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a48:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a4a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a50:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003a5c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003a5e:	4770      	bx	lr
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a64:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a66:	b530      	push	{r4, r5, lr}
 8003a68:	68dc      	ldr	r4, [r3, #12]
 8003a6a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a6e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a72:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	bf28      	it	cs
 8003a78:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a7a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a80:	bf8c      	ite	hi
 8003a82:	3c03      	subhi	r4, #3
 8003a84:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a86:	fa05 f303 	lsl.w	r3, r5, r3
 8003a8a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a8e:	40a5      	lsls	r5, r4
 8003a90:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a94:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8003a96:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9c:	bfac      	ite	ge
 8003a9e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa2:	4a08      	ldrlt	r2, [pc, #32]	; (8003ac4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa8:	bfb8      	it	lt
 8003aaa:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	bfaa      	itet	ge
 8003ab2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003abc:	bd30      	pop	{r4, r5, pc}
 8003abe:	bf00      	nop
 8003ac0:	e000ed00 	.word	0xe000ed00
 8003ac4:	e000ed14 	.word	0xe000ed14

08003ac8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	db07      	blt.n	8003adc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003acc:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <HAL_NVIC_EnableIRQ+0x18>)
 8003ace:	0941      	lsrs	r1, r0, #5
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f000 001f 	and.w	r0, r0, #31
 8003ad6:	4083      	lsls	r3, r0
 8003ad8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	e000e100 	.word	0xe000e100

08003ae4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ae4:	3801      	subs	r0, #1
 8003ae6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003aea:	d20b      	bcs.n	8003b04 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af0:	4a05      	ldr	r2, [pc, #20]	; (8003b08 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003af2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af4:	21f0      	movs	r1, #240	; 0xf0
 8003af6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003afa:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003afc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003afe:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b00:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b02:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003b04:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8003b06:	4770      	bx	lr
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003b0c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003b0e:	4604      	mov	r4, r0
 8003b10:	b908      	cbnz	r0, 8003b16 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8003b12:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8003b14:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003b16:	7f43      	ldrb	r3, [r0, #29]
 8003b18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b1c:	b913      	cbnz	r3, 8003b24 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8003b1e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8003b20:	f7fe ff0c 	bl	800293c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003b24:	2302      	movs	r3, #2
 8003b26:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003b28:	7923      	ldrb	r3, [r4, #4]
 8003b2a:	b9e3      	cbnz	r3, 8003b66 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	4a13      	ldr	r2, [pc, #76]	; (8003b7c <HAL_CRC_Init+0x70>)
 8003b30:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	f022 0218 	bic.w	r2, r2, #24
 8003b38:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003b3a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003b3c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003b3e:	b9d2      	cbnz	r2, 8003b76 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003b44:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	6961      	ldr	r1, [r4, #20]
 8003b4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	69a1      	ldr	r1, [r4, #24]
 8003b56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8003b62:	2000      	movs	r0, #0
 8003b64:	e7d6      	b.n	8003b14 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003b66:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f000 f808 	bl	8003b80 <HAL_CRCEx_Polynomial_Set>
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d0e2      	beq.n	8003b3a <HAL_CRC_Init+0x2e>
 8003b74:	e7cd      	b.n	8003b12 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003b76:	6922      	ldr	r2, [r4, #16]
 8003b78:	e7e4      	b.n	8003b44 <HAL_CRC_Init+0x38>
 8003b7a:	bf00      	nop
 8003b7c:	04c11db7 	.word	0x04c11db7

08003b80 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003b80:	07cb      	lsls	r3, r1, #31
{
 8003b82:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003b84:	d50c      	bpl.n	8003ba0 <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003b86:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	d31c      	bcc.n	8003bc6 <HAL_CRCEx_Polynomial_Set+0x46>
 8003b8c:	fa21 f403 	lsr.w	r4, r1, r3
 8003b90:	07e4      	lsls	r4, r4, #31
 8003b92:	d5f9      	bpl.n	8003b88 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8003b94:	2a10      	cmp	r2, #16
 8003b96:	d012      	beq.n	8003bbe <HAL_CRCEx_Polynomial_Set+0x3e>
 8003b98:	d804      	bhi.n	8003ba4 <HAL_CRCEx_Polynomial_Set+0x24>
 8003b9a:	b13a      	cbz	r2, 8003bac <HAL_CRCEx_Polynomial_Set+0x2c>
 8003b9c:	2a08      	cmp	r2, #8
 8003b9e:	d010      	beq.n	8003bc2 <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 8003ba0:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8003ba2:	e00b      	b.n	8003bbc <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 8003ba4:	2a18      	cmp	r2, #24
 8003ba6:	d1fb      	bne.n	8003ba0 <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 8003ba8:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8003baa:	d8f9      	bhi.n	8003ba0 <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003bac:	6800      	ldr	r0, [r0, #0]
 8003bae:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003bb0:	6883      	ldr	r3, [r0, #8]
 8003bb2:	f023 0318 	bic.w	r3, r3, #24
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	6083      	str	r3, [r0, #8]
 8003bba:	2000      	movs	r0, #0
}
 8003bbc:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8003bbe:	2b07      	cmp	r3, #7
 8003bc0:	e7f3      	b.n	8003baa <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 8003bc2:	2b0f      	cmp	r3, #15
 8003bc4:	e7f1      	b.n	8003baa <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 8003bc6:	2a00      	cmp	r2, #0
 8003bc8:	d1ea      	bne.n	8003ba0 <HAL_CRCEx_Polynomial_Set+0x20>
 8003bca:	e7ef      	b.n	8003bac <HAL_CRCEx_Polynomial_Set+0x2c>

08003bcc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bcc:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bce:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 8003bd2:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003bd4:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003bd6:	b114      	cbz	r4, 8003bde <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bd8:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 8003bdc:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bde:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
 8003be2:	f004 061c 	and.w	r6, r4, #28
 8003be6:	2401      	movs	r4, #1
 8003be8:	40b4      	lsls	r4, r6
 8003bea:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bec:	6804      	ldr	r4, [r0, #0]
 8003bee:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bf0:	6883      	ldr	r3, [r0, #8]
 8003bf2:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bf4:	bf0b      	itete	eq
 8003bf6:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003bf8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003bfa:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003bfc:	60e2      	strne	r2, [r4, #12]
  }
}
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}

08003c00 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c00:	6802      	ldr	r2, [r0, #0]
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003c02:	6c41      	ldr	r1, [r0, #68]	; 0x44

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c04:	b2d3      	uxtb	r3, r2
{
 8003c06:	b510      	push	{r4, lr}
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c08:	3b08      	subs	r3, #8
 8003c0a:	2414      	movs	r4, #20
 8003c0c:	fbb3 f3f4 	udiv	r3, r3, r4
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c10:	4c0b      	ldr	r4, [pc, #44]	; (8003c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8003c12:	42a2      	cmp	r2, r4
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003c14:	bf88      	it	hi
 8003c16:	4a0b      	ldrhi	r2, [pc, #44]	; (8003c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003c18:	f021 0103 	bic.w	r1, r1, #3
 8003c1c:	bf99      	ittee	ls
 8003c1e:	f101 4280 	addls.w	r2, r1, #1073741824	; 0x40000000
 8003c22:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003c26:	1852      	addhi	r2, r2, r1

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003c28:	3307      	addhi	r3, #7
 8003c2a:	6482      	str	r2, [r0, #72]	; 0x48
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c2c:	4a06      	ldr	r2, [pc, #24]	; (8003c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 8003c2e:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	2201      	movs	r2, #1
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003c3c:	bd10      	pop	{r4, pc}
 8003c3e:	bf00      	nop
 8003c40:	40020407 	.word	0x40020407
 8003c44:	4002081c 	.word	0x4002081c
 8003c48:	40020880 	.word	0x40020880

08003c4c <HAL_DMA_Init>:
{
 8003c4c:	b538      	push	{r3, r4, r5, lr}
  if (hdma == NULL)
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d05e      	beq.n	8003d10 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c52:	6802      	ldr	r2, [r0, #0]
 8003c54:	4b2f      	ldr	r3, [pc, #188]	; (8003d14 <HAL_DMA_Init+0xc8>)
 8003c56:	429a      	cmp	r2, r3
 8003c58:	f04f 0114 	mov.w	r1, #20
 8003c5c:	d84c      	bhi.n	8003cf8 <HAL_DMA_Init+0xac>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c5e:	4b2e      	ldr	r3, [pc, #184]	; (8003d18 <HAL_DMA_Init+0xcc>)
 8003c60:	4413      	add	r3, r2
 8003c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c66:	492d      	ldr	r1, [pc, #180]	; (8003d1c <HAL_DMA_Init+0xd0>)
 8003c68:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8003c6a:	e9c0 1310 	strd	r1, r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c74:	6813      	ldr	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003c76:	6905      	ldr	r5, [r0, #16]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c78:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c80:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003c82:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
 8003c86:	4323      	orrs	r3, r4
 8003c88:	432b      	orrs	r3, r5
 8003c8a:	6945      	ldr	r5, [r0, #20]
 8003c8c:	6811      	ldr	r1, [r2, #0]
 8003c8e:	432b      	orrs	r3, r5
 8003c90:	6985      	ldr	r5, [r0, #24]
 8003c92:	432b      	orrs	r3, r5
 8003c94:	69c5      	ldr	r5, [r0, #28]
 8003c96:	432b      	orrs	r3, r5
 8003c98:	6a05      	ldr	r5, [r0, #32]
 8003c9a:	432b      	orrs	r3, r5
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ca0:	f7ff ffae 	bl	8003c00 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ca4:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ca8:	bf04      	itt	eq
 8003caa:	2300      	moveq	r3, #0
 8003cac:	6043      	streq	r3, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cae:	6842      	ldr	r2, [r0, #4]
 8003cb0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003cb2:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8003cb6:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cb8:	e9d0 1413 	ldrd	r1, r4, [r0, #76]	; 0x4c
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003cbc:	3a01      	subs	r2, #1
 8003cbe:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cc0:	604c      	str	r4, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003cc2:	d820      	bhi.n	8003d06 <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cc4:	4a16      	ldr	r2, [pc, #88]	; (8003d20 <HAL_DMA_Init+0xd4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cc6:	4917      	ldr	r1, [pc, #92]	; (8003d24 <HAL_DMA_Init+0xd8>)
 8003cc8:	6581      	str	r1, [r0, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cca:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003ccc:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cce:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cda:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cdc:	6542      	str	r2, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003cde:	65c3      	str	r3, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ce0:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ce2:	4a11      	ldr	r2, [pc, #68]	; (8003d28 <HAL_DMA_Init+0xdc>)
 8003ce4:	6453      	str	r3, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ce6:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003ce8:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cea:	63c3      	str	r3, [r0, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 8003cec:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8003cf0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 8003cf4:	4618      	mov	r0, r3
}
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <HAL_DMA_Init+0xe0>)
 8003cfa:	4413      	add	r3, r2
 8003cfc:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d00:	490b      	ldr	r1, [pc, #44]	; (8003d30 <HAL_DMA_Init+0xe4>)
 8003d02:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8003d04:	e7b1      	b.n	8003c6a <HAL_DMA_Init+0x1e>
    hdma->DMAmuxRequestGen = NULL;
 8003d06:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = NULL;
 8003d08:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d0c:	65c3      	str	r3, [r0, #92]	; 0x5c
 8003d0e:	e7ea      	b.n	8003ce6 <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 8003d10:	2001      	movs	r0, #1
 8003d12:	e7f0      	b.n	8003cf6 <HAL_DMA_Init+0xaa>
 8003d14:	40020407 	.word	0x40020407
 8003d18:	bffdfff8 	.word	0xbffdfff8
 8003d1c:	40020000 	.word	0x40020000
 8003d20:	1000823f 	.word	0x1000823f
 8003d24:	40020940 	.word	0x40020940
 8003d28:	40020900 	.word	0x40020900
 8003d2c:	bffdfbf8 	.word	0xbffdfbf8
 8003d30:	40020400 	.word	0x40020400

08003d34 <HAL_DMA_Start_IT>:
{
 8003d34:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8003d36:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8003d3a:	2d01      	cmp	r5, #1
{
 8003d3c:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003d3e:	d03b      	beq.n	8003db8 <HAL_DMA_Start_IT+0x84>
  if (hdma->State == HAL_DMA_STATE_READY)
 8003d40:	f890 6025 	ldrb.w	r6, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8003d44:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 8003d46:	42ae      	cmp	r6, r5
  __HAL_LOCK(hdma);
 8003d48:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003d4c:	f04f 0600 	mov.w	r6, #0
 8003d50:	d12c      	bne.n	8003dac <HAL_DMA_Start_IT+0x78>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d52:	2502      	movs	r5, #2
 8003d54:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    __HAL_DMA_DISABLE(hdma);
 8003d58:	6805      	ldr	r5, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d5a:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003d5c:	682e      	ldr	r6, [r5, #0]
 8003d5e:	f026 0601 	bic.w	r6, r6, #1
 8003d62:	602e      	str	r6, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d64:	f7ff ff32 	bl	8003bcc <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003d68:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003d6a:	b1bb      	cbz	r3, 8003d9c <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d72:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	03d2      	lsls	r2, r2, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d7a:	bf42      	ittt	mi
 8003d7c:	681a      	ldrmi	r2, [r3, #0]
 8003d7e:	f442 7280 	orrmi.w	r2, r2, #256	; 0x100
 8003d82:	601a      	strmi	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8003d84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d86:	b11b      	cbz	r3, 8003d90 <HAL_DMA_Start_IT+0x5c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d8e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003d90:	682b      	ldr	r3, [r5, #0]
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d98:	2000      	movs	r0, #0
}
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d9c:	682b      	ldr	r3, [r5, #0]
 8003d9e:	f023 0304 	bic.w	r3, r3, #4
 8003da2:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	f043 030a 	orr.w	r3, r3, #10
 8003daa:	e7e2      	b.n	8003d72 <HAL_DMA_Start_IT+0x3e>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003db0:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
    status = HAL_ERROR;
 8003db4:	4628      	mov	r0, r5
 8003db6:	e7f0      	b.n	8003d9a <HAL_DMA_Start_IT+0x66>
  __HAL_LOCK(hdma);
 8003db8:	2002      	movs	r0, #2
 8003dba:	e7ee      	b.n	8003d9a <HAL_DMA_Start_IT+0x66>

08003dbc <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	b140      	cbz	r0, 8003dd2 <HAL_DMA_Abort+0x16>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003dc0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003dc4:	2a02      	cmp	r2, #2
 8003dc6:	d006      	beq.n	8003dd6 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dc8:	2204      	movs	r2, #4
 8003dca:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003dd2:	2001      	movs	r0, #1
}
 8003dd4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dd6:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dd8:	6c80      	ldr	r0, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dda:	6811      	ldr	r1, [r2, #0]
 8003ddc:	f021 010e 	bic.w	r1, r1, #14
 8003de0:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003de2:	6801      	ldr	r1, [r0, #0]
 8003de4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003de8:	6001      	str	r1, [r0, #0]
    __HAL_DMA_DISABLE(hdma);
 8003dea:	6811      	ldr	r1, [r2, #0]
 8003dec:	f021 0101 	bic.w	r1, r1, #1
 8003df0:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003df2:	e9d3 0210 	ldrd	r0, r2, [r3, #64]	; 0x40
 8003df6:	f002 011c 	and.w	r1, r2, #28
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	408a      	lsls	r2, r1
 8003dfe:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e00:	e9d3 2113 	ldrd	r2, r1, [r3, #76]	; 0x4c
 8003e04:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003e06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e08:	b132      	cbz	r2, 8003e18 <HAL_DMA_Abort+0x5c>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e0a:	6811      	ldr	r1, [r2, #0]
 8003e0c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003e10:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e12:	e9d3 2116 	ldrd	r2, r1, [r3, #88]	; 0x58
 8003e16:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003e18:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8003e1a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003e1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003e20:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8003e24:	4770      	bx	lr

08003e26 <HAL_DMA_Abort_IT>:
{
 8003e26:	b510      	push	{r4, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e28:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d003      	beq.n	8003e38 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e30:	2304      	movs	r3, #4
 8003e32:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003e34:	2001      	movs	r0, #1
}
 8003e36:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e38:	6803      	ldr	r3, [r0, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	f022 020e 	bic.w	r2, r2, #14
 8003e40:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e4a:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003e4c:	6813      	ldr	r3, [r2, #0]
 8003e4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e52:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e54:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 8003e58:	f003 021c 	and.w	r2, r3, #28
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	4093      	lsls	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e62:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 8003e66:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003e68:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003e6a:	b133      	cbz	r3, 8003e7a <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e72:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e74:	e9d0 3216 	ldrd	r3, r2, [r0, #88]	; 0x58
 8003e78:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferAbortCallback != NULL)
 8003e80:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8003e82:	2400      	movs	r4, #0
 8003e84:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003e88:	b113      	cbz	r3, 8003e90 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8003e8a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	e7d2      	b.n	8003e36 <HAL_DMA_Abort_IT+0x10>
 8003e90:	4618      	mov	r0, r3
 8003e92:	e7d0      	b.n	8003e36 <HAL_DMA_Abort_IT+0x10>

08003e94 <HAL_DMA_IRQHandler>:
{
 8003e94:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e96:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e98:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8003e9a:	6803      	ldr	r3, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e9c:	6826      	ldr	r6, [r4, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003e9e:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ea0:	f002 021c 	and.w	r2, r2, #28
 8003ea4:	2104      	movs	r1, #4
 8003ea6:	4091      	lsls	r1, r2
 8003ea8:	4231      	tst	r1, r6
 8003eaa:	d00f      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x38>
 8003eac:	f015 0f04 	tst.w	r5, #4
 8003eb0:	d00c      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x38>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eb6:	bf5e      	ittt	pl
 8003eb8:	681a      	ldrpl	r2, [r3, #0]
 8003eba:	f022 0204 	bicpl.w	r2, r2, #4
 8003ebe:	601a      	strpl	r2, [r3, #0]
      if (hdma->XferHalfCpltCallback != NULL)
 8003ec0:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003ec2:	6061      	str	r1, [r4, #4]
    if (hdma->XferErrorCallback != NULL)
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d033      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x9c>
}
 8003ec8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003eca:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003ecc:	2102      	movs	r1, #2
 8003ece:	4091      	lsls	r1, r2
 8003ed0:	4231      	tst	r1, r6
 8003ed2:	d017      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x70>
 8003ed4:	f015 0f02 	tst.w	r5, #2
 8003ed8:	d014      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	0694      	lsls	r4, r2, #26
 8003ede:	d406      	bmi.n	8003eee <HAL_DMA_IRQHandler+0x5a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	f022 020a 	bic.w	r2, r2, #10
 8003ee6:	601a      	str	r2, [r3, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003eee:	4a11      	ldr	r2, [pc, #68]	; (8003f34 <HAL_DMA_IRQHandler+0xa0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	bf8c      	ite	hi
 8003ef4:	4b10      	ldrhi	r3, [pc, #64]	; (8003f38 <HAL_DMA_IRQHandler+0xa4>)
 8003ef6:	4b11      	ldrls	r3, [pc, #68]	; (8003f3c <HAL_DMA_IRQHandler+0xa8>)
 8003ef8:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 8003efa:	2300      	movs	r3, #0
 8003efc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8003f00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003f02:	e7df      	b.n	8003ec4 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003f04:	2108      	movs	r1, #8
 8003f06:	4091      	lsls	r1, r2
 8003f08:	4231      	tst	r1, r6
 8003f0a:	d011      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x9c>
 8003f0c:	0729      	lsls	r1, r5, #28
 8003f0e:	d50f      	bpl.n	8003f30 <HAL_DMA_IRQHandler+0x9c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f10:	6819      	ldr	r1, [r3, #0]
 8003f12:	f021 010e 	bic.w	r1, r1, #14
 8003f16:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f18:	2301      	movs	r3, #1
 8003f1a:	fa03 f202 	lsl.w	r2, r3, r2
 8003f1e:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f20:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003f22:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003f26:	2300      	movs	r3, #0
 8003f28:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003f2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f2e:	e7c9      	b.n	8003ec4 <HAL_DMA_IRQHandler+0x30>
}
 8003f30:	bc70      	pop	{r4, r5, r6}
 8003f32:	4770      	bx	lr
 8003f34:	40020080 	.word	0x40020080
 8003f38:	40020400 	.word	0x40020400
 8003f3c:	40020000 	.word	0x40020000

08003f40 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f44:	4c52      	ldr	r4, [pc, #328]	; (8004090 <HAL_GPIO_Init+0x150>)
  uint32_t position = 0x00u;
 8003f46:	2300      	movs	r3, #0
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f48:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f4c:	680a      	ldr	r2, [r1, #0]
 8003f4e:	fa32 f503 	lsrs.w	r5, r2, r3
 8003f52:	d101      	bne.n	8003f58 <HAL_GPIO_Init+0x18>
      }
    }

    position++;
  }
}
 8003f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f58:	2501      	movs	r5, #1
 8003f5a:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8003f5e:	ea18 0202 	ands.w	r2, r8, r2
 8003f62:	f000 808e 	beq.w	8004082 <HAL_GPIO_Init+0x142>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f66:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f68:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f6a:	f006 0503 	and.w	r5, r6, #3
 8003f6e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f72:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f76:	1e6f      	subs	r7, r5, #1
 8003f78:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f7a:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f7e:	d832      	bhi.n	8003fe6 <HAL_GPIO_Init+0xa6>
        temp = GPIOx->OSPEEDR;
 8003f80:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f82:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f86:	68cf      	ldr	r7, [r1, #12]
 8003f88:	fa07 f70e 	lsl.w	r7, r7, lr
 8003f8c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003f90:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003f92:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f94:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f98:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8003f9c:	409f      	lsls	r7, r3
 8003f9e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8003fa2:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003fa4:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fa6:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003faa:	688f      	ldr	r7, [r1, #8]
 8003fac:	fa07 f70e 	lsl.w	r7, r7, lr
 8003fb0:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fb4:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8003fb6:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fb8:	d117      	bne.n	8003fea <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8003fba:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8003fbe:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fc2:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003fc6:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fca:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003fce:	fa09 fb0a 	lsl.w	fp, r9, sl
 8003fd2:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fd6:	690f      	ldr	r7, [r1, #16]
 8003fd8:	fa07 f70a 	lsl.w	r7, r7, sl
 8003fdc:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8003fe0:	f8c8 7020 	str.w	r7, [r8, #32]
 8003fe4:	e001      	b.n	8003fea <HAL_GPIO_Init+0xaa>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fe6:	2d03      	cmp	r5, #3
 8003fe8:	d1dc      	bne.n	8003fa4 <HAL_GPIO_Init+0x64>
      temp = GPIOx->MODER;
 8003fea:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fec:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ff0:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff4:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ff6:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003ffa:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ffc:	d041      	beq.n	8004082 <HAL_GPIO_Init+0x142>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003ffe:	f023 0703 	bic.w	r7, r3, #3
 8004002:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8004006:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800400a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800400e:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004010:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004014:	f04f 0e07 	mov.w	lr, #7
 8004018:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800401c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004020:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004024:	d02f      	beq.n	8004086 <HAL_GPIO_Init+0x146>
 8004026:	4d1b      	ldr	r5, [pc, #108]	; (8004094 <HAL_GPIO_Init+0x154>)
 8004028:	42a8      	cmp	r0, r5
 800402a:	d02e      	beq.n	800408a <HAL_GPIO_Init+0x14a>
 800402c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004030:	42a8      	cmp	r0, r5
 8004032:	bf0c      	ite	eq
 8004034:	2502      	moveq	r5, #2
 8004036:	2507      	movne	r5, #7
 8004038:	fa05 f50c 	lsl.w	r5, r5, ip
 800403c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004040:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8004042:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004044:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004046:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800404a:	bf0c      	ite	eq
 800404c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800404e:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8004050:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8004052:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004054:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8004058:	bf0c      	ite	eq
 800405a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800405c:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 800405e:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8004060:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004064:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 8004068:	bf0c      	ite	eq
 800406a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800406c:	4315      	orrne	r5, r2
        EXTI->IMR1 = temp;
 800406e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        temp = EXTI->EMR1;
 8004072:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004076:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 8004078:	bf54      	ite	pl
 800407a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800407c:	4315      	orrmi	r5, r2
        EXTI->EMR1 = temp;
 800407e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    position++;
 8004082:	3301      	adds	r3, #1
 8004084:	e762      	b.n	8003f4c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004086:	2500      	movs	r5, #0
 8004088:	e7d6      	b.n	8004038 <HAL_GPIO_Init+0xf8>
 800408a:	2501      	movs	r5, #1
 800408c:	e7d4      	b.n	8004038 <HAL_GPIO_Init+0xf8>
 800408e:	bf00      	nop
 8004090:	58000800 	.word	0x58000800
 8004094:	48000400 	.word	0x48000400

08004098 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004098:	b10a      	cbz	r2, 800409e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800409a:	6181      	str	r1, [r0, #24]
 800409c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800409e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80040a0:	4770      	bx	lr

080040a2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040a2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040a4:	ea01 0203 	and.w	r2, r1, r3
 80040a8:	ea21 0103 	bic.w	r1, r1, r3
 80040ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80040b0:	6181      	str	r1, [r0, #24]
}
 80040b2:	4770      	bx	lr

080040b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040b4:	4a04      	ldr	r2, [pc, #16]	; (80040c8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80040b6:	68d1      	ldr	r1, [r2, #12]
 80040b8:	4201      	tst	r1, r0
{
 80040ba:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040bc:	d002      	beq.n	80040c4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040be:	60d0      	str	r0, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040c0:	f7fe fdba 	bl	8002c38 <HAL_GPIO_EXTI_Callback>
  }
}
 80040c4:	bd08      	pop	{r3, pc}
 80040c6:	bf00      	nop
 80040c8:	58000800 	.word	0x58000800

080040cc <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040cc:	4a02      	ldr	r2, [pc, #8]	; (80040d8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d4:	6013      	str	r3, [r2, #0]
}
 80040d6:	4770      	bx	lr
 80040d8:	58000400 	.word	0x58000400

080040dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 80040dc:	4b02      	ldr	r3, [pc, #8]	; (80040e8 <HAL_PWREx_GetVoltageRange+0xc>)
 80040de:	6818      	ldr	r0, [r3, #0]
}
 80040e0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	58000400 	.word	0x58000400

080040ec <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80040ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f0:	6818      	ldr	r0, [r3, #0]
}
 80040f2:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80040f6:	4770      	bx	lr

080040f8 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80040f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fc:	6818      	ldr	r0, [r3, #0]
}
 80040fe:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004102:	4770      	bx	lr

08004104 <LL_RCC_MSI_SetCalibTrimming>:
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004108:	6853      	ldr	r3, [r2, #4]
 800410a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800410e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004112:	6053      	str	r3, [r2, #4]
}
 8004114:	4770      	bx	lr

08004116 <LL_RCC_PLL_IsReady>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411a:	6818      	ldr	r0, [r3, #0]
}
 800411c:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8004120:	4770      	bx	lr
	...

08004124 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004124:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800412a:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800412c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004130:	f3c0 1003 	ubfx	r0, r0, #4, #4
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 800413c:	4a28      	ldr	r2, [pc, #160]	; (80041e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800413e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004142:	fbb4 f4f3 	udiv	r4, r4, r3

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004146:	f7ff ffc9 	bl	80040dc <HAL_PWREx_GetVoltageRange>

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800414a:	4b26      	ldr	r3, [pc, #152]	; (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800414c:	4605      	mov	r5, r0
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800414e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004152:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004156:	ab04      	add	r3, sp, #16
 8004158:	e903 0007 	stmdb	r3, {r0, r1, r2}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800415c:	d010      	beq.n	8004180 <RCC_SetFlashLatencyFromMSIRange+0x5c>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800415e:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004160:	429c      	cmp	r4, r3
 8004162:	d318      	bcc.n	8004196 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004164:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 8004168:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 800416c:	429c      	cmp	r4, r3
 800416e:	d929      	bls.n	80041c4 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 8004170:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 8004174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004178:	429c      	cmp	r4, r3
 800417a:	d825      	bhi.n	80041c8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800417c:	2302      	movs	r3, #2
 800417e:	e00b      	b.n	8004198 <RCC_SetFlashLatencyFromMSIRange+0x74>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004180:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xc8>)
 8004182:	429c      	cmp	r4, r3
 8004184:	d907      	bls.n	8004196 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004186:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8004188:	429c      	cmp	r4, r3
 800418a:	d91b      	bls.n	80041c4 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 800418c:	f503 0337 	add.w	r3, r3, #11993088	; 0xb70000
 8004190:	f503 53d8 	add.w	r3, r3, #6912	; 0x1b00
 8004194:	e7f0      	b.n	8004178 <RCC_SetFlashLatencyFromMSIRange+0x54>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004196:	2300      	movs	r3, #0
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004198:	aa04      	add	r2, sp, #16
 800419a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800419e:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        break;
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041a2:	4d14      	ldr	r5, [pc, #80]	; (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	f023 0307 	bic.w	r3, r3, #7
 80041aa:	4323      	orrs	r3, r4
 80041ac:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80041ae:	f7ff f8ab 	bl	8003308 <HAL_GetTick>
 80041b2:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80041b4:	682b      	ldr	r3, [r5, #0]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	429c      	cmp	r4, r3
 80041bc:	d106      	bne.n	80041cc <RCC_SetFlashLatencyFromMSIRange+0xa8>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80041be:	2000      	movs	r0, #0
}
 80041c0:	b004      	add	sp, #16
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80041c4:	2301      	movs	r3, #1
 80041c6:	e7e7      	b.n	8004198 <RCC_SetFlashLatencyFromMSIRange+0x74>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80041c8:	2400      	movs	r4, #0
 80041ca:	e7ea      	b.n	80041a2 <RCC_SetFlashLatencyFromMSIRange+0x7e>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80041cc:	f7ff f89c 	bl	8003308 <HAL_GetTick>
 80041d0:	1b80      	subs	r0, r0, r6
 80041d2:	2802      	cmp	r0, #2
 80041d4:	d9ee      	bls.n	80041b4 <RCC_SetFlashLatencyFromMSIRange+0x90>
      return HAL_TIMEOUT;
 80041d6:	2003      	movs	r0, #3
 80041d8:	e7f2      	b.n	80041c0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
 80041da:	bf00      	nop
 80041dc:	0800d05c 	.word	0x0800d05c
 80041e0:	0800cffc 	.word	0x0800cffc
 80041e4:	0800c780 	.word	0x0800c780
 80041e8:	006acfc0 	.word	0x006acfc0
 80041ec:	0121eabf 	.word	0x0121eabf
 80041f0:	0234933f 	.word	0x0234933f
 80041f4:	58004000 	.word	0x58004000

080041f8 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80041f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80041fc:	b510      	push	{r4, lr}
 80041fe:	689a      	ldr	r2, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004200:	68d9      	ldr	r1, [r3, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004202:	f012 020c 	ands.w	r2, r2, #12
 8004206:	d005      	beq.n	8004214 <HAL_RCC_GetSysClockFreq+0x1c>
 8004208:	2a0c      	cmp	r2, #12
 800420a:	d14a      	bne.n	80042a2 <HAL_RCC_GetSysClockFreq+0xaa>
 800420c:	f001 0303 	and.w	r3, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004210:	2b01      	cmp	r3, #1
 8004212:	d150      	bne.n	80042b6 <HAL_RCC_GetSysClockFreq+0xbe>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004218:	482b      	ldr	r0, [pc, #172]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800421a:	680b      	ldr	r3, [r1, #0]
 800421c:	f013 0308 	ands.w	r3, r3, #8
 8004220:	d006      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x38>
 8004222:	680b      	ldr	r3, [r1, #0]
 8004224:	f013 0308 	ands.w	r3, r3, #8
 8004228:	d137      	bne.n	800429a <HAL_RCC_GetSysClockFreq+0xa2>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800422a:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
 800422e:	e007      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004230:	680c      	ldr	r4, [r1, #0]
 8004232:	0724      	lsls	r4, r4, #28
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004234:	bf56      	itet	pl
 8004236:	f8d1 3094 	ldrpl.w	r3, [r1, #148]	; 0x94
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800423a:	6809      	ldrmi	r1, [r1, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800423c:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004240:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
      sysclockfreq = msifreq;
 8004244:	2a00      	cmp	r2, #0
 8004246:	bf0c      	ite	eq
 8004248:	4618      	moveq	r0, r3
 800424a:	2000      	movne	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800424c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004250:	688a      	ldr	r2, [r1, #8]
 8004252:	f002 020c 	and.w	r2, r2, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004256:	2a0c      	cmp	r2, #12
 8004258:	d11e      	bne.n	8004298 <HAL_RCC_GetSysClockFreq+0xa0>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800425a:	68ca      	ldr	r2, [r1, #12]
 800425c:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8004260:	2a02      	cmp	r2, #2
 8004262:	d02e      	beq.n	80042c2 <HAL_RCC_GetSysClockFreq+0xca>
 8004264:	2a03      	cmp	r2, #3
 8004266:	d106      	bne.n	8004276 <HAL_RCC_GetSysClockFreq+0x7e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004268:	680b      	ldr	r3, [r1, #0]
          pllinputfreq = HSE_VALUE / 2U;
 800426a:	4a18      	ldr	r2, [pc, #96]	; (80042cc <HAL_RCC_GetSysClockFreq+0xd4>)
 800426c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004270:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004272:	bf18      	it	ne
 8004274:	4613      	movne	r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800427a:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800427c:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800427e:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004280:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004284:	4358      	muls	r0, r3
 8004286:	f3c1 1302 	ubfx	r3, r1, #4, #3
 800428a:	3301      	adds	r3, #1
 800428c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004290:	0f53      	lsrs	r3, r2, #29
 8004292:	3301      	adds	r3, #1
 8004294:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004298:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800429a:	680b      	ldr	r3, [r1, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800429c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80042a0:	e7ce      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x48>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042a2:	2a04      	cmp	r2, #4
 80042a4:	d00a      	beq.n	80042bc <HAL_RCC_GetSysClockFreq+0xc4>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042a6:	2a08      	cmp	r2, #8
 80042a8:	d105      	bne.n	80042b6 <HAL_RCC_GetSysClockFreq+0xbe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
 80042b0:	d104      	bne.n	80042bc <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSE_VALUE;
 80042b2:	4807      	ldr	r0, [pc, #28]	; (80042d0 <HAL_RCC_GetSysClockFreq+0xd8>)
 80042b4:	e7ca      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msifreq = 0U;
 80042b6:	2300      	movs	r3, #0
  uint32_t sysclockfreq = 0U;
 80042b8:	4618      	mov	r0, r3
 80042ba:	e7c7      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = HSE_VALUE / 2U;
 80042bc:	4803      	ldr	r0, [pc, #12]	; (80042cc <HAL_RCC_GetSysClockFreq+0xd4>)
  uint32_t msifreq = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	e7c4      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x54>
        pllinputfreq = HSI_VALUE;
 80042c2:	4b02      	ldr	r3, [pc, #8]	; (80042cc <HAL_RCC_GetSysClockFreq+0xd4>)
 80042c4:	e7d7      	b.n	8004276 <HAL_RCC_GetSysClockFreq+0x7e>
 80042c6:	bf00      	nop
 80042c8:	0800d05c 	.word	0x0800d05c
 80042cc:	00f42400 	.word	0x00f42400
 80042d0:	01e84800 	.word	0x01e84800

080042d4 <HAL_RCC_GetHCLKFreq>:
{
 80042d4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80042d6:	f7ff ff8f 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80042da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042de:	4a04      	ldr	r2, [pc, #16]	; (80042f0 <HAL_RCC_GetHCLKFreq+0x1c>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80042e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80042ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80042ee:	bd08      	pop	{r3, pc}
 80042f0:	0800cffc 	.word	0x0800cffc

080042f4 <HAL_RCC_OscConfig>:
{
 80042f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCC_OscInitStruct == NULL)
 80042f8:	4604      	mov	r4, r0
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d053      	beq.n	80043a6 <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	689d      	ldr	r5, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004304:	68de      	ldr	r6, [r3, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004306:	6803      	ldr	r3, [r0, #0]
 8004308:	069b      	lsls	r3, r3, #26
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800430a:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800430e:	f006 0603 	and.w	r6, r6, #3
 8004312:	d568      	bpl.n	80043e6 <HAL_RCC_OscConfig+0xf2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004314:	6a02      	ldr	r2, [r0, #32]
 8004316:	b11d      	cbz	r5, 8004320 <HAL_RCC_OscConfig+0x2c>
 8004318:	2d0c      	cmp	r5, #12
 800431a:	d146      	bne.n	80043aa <HAL_RCC_OscConfig+0xb6>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800431c:	2e01      	cmp	r6, #1
 800431e:	d144      	bne.n	80043aa <HAL_RCC_OscConfig+0xb6>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004320:	2a00      	cmp	r2, #0
 8004322:	d040      	beq.n	80043a6 <HAL_RCC_OscConfig+0xb2>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004328:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	0717      	lsls	r7, r2, #28
 800432e:	bf56      	itet	pl
 8004330:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8004334:	681b      	ldrmi	r3, [r3, #0]
 8004336:	091b      	lsrpl	r3, r3, #4
 8004338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800433c:	4299      	cmp	r1, r3
 800433e:	d91f      	bls.n	8004380 <HAL_RCC_OscConfig+0x8c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004340:	4608      	mov	r0, r1
 8004342:	f7ff feef 	bl	8004124 <RCC_SetFlashLatencyFromMSIRange>
 8004346:	2800      	cmp	r0, #0
 8004348:	d12d      	bne.n	80043a6 <HAL_RCC_OscConfig+0xb2>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800434a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800434e:	6813      	ldr	r3, [r2, #0]
 8004350:	f043 0308 	orr.w	r3, r3, #8
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	6813      	ldr	r3, [r2, #0]
 8004358:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800435a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800435e:	430b      	orrs	r3, r1
 8004360:	6013      	str	r3, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004362:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004364:	f7ff fece 	bl	8004104 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004368:	f7ff ffb4 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 800436c:	4bab      	ldr	r3, [pc, #684]	; (800461c <HAL_RCC_OscConfig+0x328>)
 800436e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8004370:	4bab      	ldr	r3, [pc, #684]	; (8004620 <HAL_RCC_OscConfig+0x32c>)
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	f7fe ff80 	bl	8003278 <HAL_InitTick>
        if (status != HAL_OK)
 8004378:	2800      	cmp	r0, #0
 800437a:	d034      	beq.n	80043e6 <HAL_RCC_OscConfig+0xf2>
}
 800437c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004384:	6813      	ldr	r3, [r2, #0]
 8004386:	f043 0308 	orr.w	r3, r3, #8
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	6813      	ldr	r3, [r2, #0]
 800438e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004392:	430b      	orrs	r3, r1
 8004394:	6013      	str	r3, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004396:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004398:	f7ff feb4 	bl	8004104 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800439c:	4608      	mov	r0, r1
 800439e:	f7ff fec1 	bl	8004124 <RCC_SetFlashLatencyFromMSIRange>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d0e0      	beq.n	8004368 <HAL_RCC_OscConfig+0x74>
          return HAL_ERROR;
 80043a6:	2001      	movs	r0, #1
 80043a8:	e7e8      	b.n	800437c <HAL_RCC_OscConfig+0x88>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ae:	2a00      	cmp	r2, #0
 80043b0:	d054      	beq.n	800445c <HAL_RCC_OscConfig+0x168>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	f042 0201 	orr.w	r2, r2, #1
 80043b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80043ba:	f7fe ffa5 	bl	8003308 <HAL_GetTick>
 80043be:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 80043c0:	f7ff fe9a 	bl	80040f8 <LL_RCC_MSI_IsReady>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d042      	beq.n	800444e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043cc:	6813      	ldr	r3, [r2, #0]
 80043ce:	f043 0308 	orr.w	r3, r3, #8
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	6813      	ldr	r3, [r2, #0]
 80043d6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80043d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043dc:	430b      	orrs	r3, r1
 80043de:	6013      	str	r3, [r2, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80043e2:	f7ff fe8f 	bl	8004104 <LL_RCC_MSI_SetCalibTrimming>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	07d8      	lsls	r0, r3, #31
 80043ea:	d448      	bmi.n	800447e <HAL_RCC_OscConfig+0x18a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	0799      	lsls	r1, r3, #30
 80043f0:	f100 808c 	bmi.w	800450c <HAL_RCC_OscConfig+0x218>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	071e      	lsls	r6, r3, #28
 80043f8:	f140 80fa 	bpl.w	80045f0 <HAL_RCC_OscConfig+0x2fc>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043fc:	69a3      	ldr	r3, [r4, #24]
 80043fe:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 80e1 	beq.w	80045ca <HAL_RCC_OscConfig+0x2d6>
      uint32_t csr_temp = RCC->CSR;
 8004408:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800440c:	69e1      	ldr	r1, [r4, #28]
 800440e:	f003 0210 	and.w	r2, r3, #16
 8004412:	4291      	cmp	r1, r2
 8004414:	f000 80c4 	beq.w	80045a0 <HAL_RCC_OscConfig+0x2ac>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004418:	f003 0203 	and.w	r2, r3, #3
 800441c:	2a02      	cmp	r2, #2
 800441e:	d0c2      	beq.n	80043a6 <HAL_RCC_OscConfig+0xb2>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004420:	07d8      	lsls	r0, r3, #31
 8004422:	f140 80b3 	bpl.w	800458c <HAL_RCC_OscConfig+0x298>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004426:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
          tickstart = HAL_GetTick();
 8004432:	f7fe ff69 	bl	8003308 <HAL_GetTick>
 8004436:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004438:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800443c:	0799      	lsls	r1, r3, #30
 800443e:	f140 80a5 	bpl.w	800458c <HAL_RCC_OscConfig+0x298>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004442:	f7fe ff61 	bl	8003308 <HAL_GetTick>
 8004446:	1bc3      	subs	r3, r0, r7
 8004448:	2b11      	cmp	r3, #17
 800444a:	d9f5      	bls.n	8004438 <HAL_RCC_OscConfig+0x144>
 800444c:	e004      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800444e:	f7fe ff5b 	bl	8003308 <HAL_GetTick>
 8004452:	1bc0      	subs	r0, r0, r7
 8004454:	2802      	cmp	r0, #2
 8004456:	d9b3      	bls.n	80043c0 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8004458:	2003      	movs	r0, #3
 800445a:	e78f      	b.n	800437c <HAL_RCC_OscConfig+0x88>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	f022 0201 	bic.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004464:	f7fe ff50 	bl	8003308 <HAL_GetTick>
 8004468:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 800446a:	f7ff fe45 	bl	80040f8 <LL_RCC_MSI_IsReady>
 800446e:	2800      	cmp	r0, #0
 8004470:	d0b9      	beq.n	80043e6 <HAL_RCC_OscConfig+0xf2>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004472:	f7fe ff49 	bl	8003308 <HAL_GetTick>
 8004476:	1bc0      	subs	r0, r0, r7
 8004478:	2802      	cmp	r0, #2
 800447a:	d9f6      	bls.n	800446a <HAL_RCC_OscConfig+0x176>
 800447c:	e7ec      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800447e:	2d08      	cmp	r5, #8
 8004480:	d003      	beq.n	800448a <HAL_RCC_OscConfig+0x196>
 8004482:	2d0c      	cmp	r5, #12
 8004484:	d105      	bne.n	8004492 <HAL_RCC_OscConfig+0x19e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004486:	2e03      	cmp	r6, #3
 8004488:	d103      	bne.n	8004492 <HAL_RCC_OscConfig+0x19e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800448a:	6863      	ldr	r3, [r4, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ad      	bne.n	80043ec <HAL_RCC_OscConfig+0xf8>
 8004490:	e789      	b.n	80043a6 <HAL_RCC_OscConfig+0xb2>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004496:	68a1      	ldr	r1, [r4, #8]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800449e:	430a      	orrs	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a2:	6862      	ldr	r2, [r4, #4]
 80044a4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80044a8:	d110      	bne.n	80044cc <HAL_RCC_OscConfig+0x1d8>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80044b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80044b2:	f7fe ff29 	bl	8003308 <HAL_GetTick>
 80044b6:	4607      	mov	r7, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 80044b8:	f7ff fe18 	bl	80040ec <LL_RCC_HSE_IsReady>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d195      	bne.n	80043ec <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c0:	f7fe ff22 	bl	8003308 <HAL_GetTick>
 80044c4:	1bc0      	subs	r0, r0, r7
 80044c6:	2864      	cmp	r0, #100	; 0x64
 80044c8:	d9f6      	bls.n	80044b8 <HAL_RCC_OscConfig+0x1c4>
 80044ca:	e7c5      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044cc:	f5b2 1f04 	cmp.w	r2, #2162688	; 0x210000
 80044d0:	d104      	bne.n	80044dc <HAL_RCC_OscConfig+0x1e8>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e7e6      	b.n	80044aa <HAL_RCC_OscConfig+0x1b6>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80044dc:	6819      	ldr	r1, [r3, #0]
 80044de:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80044e2:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80044e4:	6819      	ldr	r1, [r3, #0]
 80044e6:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 80044ea:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ec:	2a00      	cmp	r2, #0
 80044ee:	d1e0      	bne.n	80044b2 <HAL_RCC_OscConfig+0x1be>
        tickstart = HAL_GetTick();
 80044f0:	f7fe ff0a 	bl	8003308 <HAL_GetTick>
 80044f4:	4607      	mov	r7, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 80044f6:	f7ff fdf9 	bl	80040ec <LL_RCC_HSE_IsReady>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	f43f af76 	beq.w	80043ec <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004500:	f7fe ff02 	bl	8003308 <HAL_GetTick>
 8004504:	1bc0      	subs	r0, r0, r7
 8004506:	2864      	cmp	r0, #100	; 0x64
 8004508:	d9f5      	bls.n	80044f6 <HAL_RCC_OscConfig+0x202>
 800450a:	e7a5      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800450c:	2d04      	cmp	r5, #4
 800450e:	6923      	ldr	r3, [r4, #16]
 8004510:	d003      	beq.n	800451a <HAL_RCC_OscConfig+0x226>
 8004512:	2d0c      	cmp	r5, #12
 8004514:	d10e      	bne.n	8004534 <HAL_RCC_OscConfig+0x240>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004516:	2e02      	cmp	r6, #2
 8004518:	d10c      	bne.n	8004534 <HAL_RCC_OscConfig+0x240>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800451a:	2b00      	cmp	r3, #0
 800451c:	f43f af43 	beq.w	80043a6 <HAL_RCC_OscConfig+0xb2>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004524:	6961      	ldr	r1, [r4, #20]
 8004526:	6853      	ldr	r3, [r2, #4]
 8004528:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800452c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004530:	6053      	str	r3, [r2, #4]
}
 8004532:	e75f      	b.n	80043f4 <HAL_RCC_OscConfig+0x100>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004534:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8004538:	b1bb      	cbz	r3, 800456a <HAL_RCC_OscConfig+0x276>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800453a:	6833      	ldr	r3, [r6, #0]
 800453c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004540:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004542:	f7fe fee1 	bl	8003308 <HAL_GetTick>
 8004546:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004548:	6833      	ldr	r3, [r6, #0]
 800454a:	055a      	lsls	r2, r3, #21
 800454c:	d507      	bpl.n	800455e <HAL_RCC_OscConfig+0x26a>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800454e:	6873      	ldr	r3, [r6, #4]
 8004550:	6962      	ldr	r2, [r4, #20]
 8004552:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004556:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800455a:	6073      	str	r3, [r6, #4]
}
 800455c:	e74a      	b.n	80043f4 <HAL_RCC_OscConfig+0x100>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455e:	f7fe fed3 	bl	8003308 <HAL_GetTick>
 8004562:	1bc3      	subs	r3, r0, r7
 8004564:	2b02      	cmp	r3, #2
 8004566:	d9ef      	bls.n	8004548 <HAL_RCC_OscConfig+0x254>
 8004568:	e776      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800456a:	6833      	ldr	r3, [r6, #0]
 800456c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004570:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004572:	f7fe fec9 	bl	8003308 <HAL_GetTick>
 8004576:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004578:	6833      	ldr	r3, [r6, #0]
 800457a:	055b      	lsls	r3, r3, #21
 800457c:	f57f af3a 	bpl.w	80043f4 <HAL_RCC_OscConfig+0x100>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004580:	f7fe fec2 	bl	8003308 <HAL_GetTick>
 8004584:	1bc3      	subs	r3, r0, r7
 8004586:	2b02      	cmp	r3, #2
 8004588:	d9f6      	bls.n	8004578 <HAL_RCC_OscConfig+0x284>
 800458a:	e765      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800458c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004590:	69e1      	ldr	r1, [r4, #28]
 8004592:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004596:	f023 0310 	bic.w	r3, r3, #16
 800459a:	430b      	orrs	r3, r1
 800459c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80045a0:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80045a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      tickstart = HAL_GetTick();
 80045b0:	f7fe feaa 	bl	8003308 <HAL_GetTick>
 80045b4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80045b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045ba:	079a      	lsls	r2, r3, #30
 80045bc:	d418      	bmi.n	80045f0 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045be:	f7fe fea3 	bl	8003308 <HAL_GetTick>
 80045c2:	1b83      	subs	r3, r0, r6
 80045c4:	2b11      	cmp	r3, #17
 80045c6:	d9f6      	bls.n	80045b6 <HAL_RCC_OscConfig+0x2c2>
 80045c8:	e746      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80045ca:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 80045d6:	f7fe fe97 	bl	8003308 <HAL_GetTick>
 80045da:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80045dc:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80045e0:	079b      	lsls	r3, r3, #30
 80045e2:	d505      	bpl.n	80045f0 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e4:	f7fe fe90 	bl	8003308 <HAL_GetTick>
 80045e8:	1bc3      	subs	r3, r0, r7
 80045ea:	2b11      	cmp	r3, #17
 80045ec:	d9f6      	bls.n	80045dc <HAL_RCC_OscConfig+0x2e8>
 80045ee:	e733      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	0758      	lsls	r0, r3, #29
 80045f4:	d554      	bpl.n	80046a0 <HAL_RCC_OscConfig+0x3ac>
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80045f6:	4f0b      	ldr	r7, [pc, #44]	; (8004624 <HAL_RCC_OscConfig+0x330>)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	05d9      	lsls	r1, r3, #23
 80045fc:	d414      	bmi.n	8004628 <HAL_RCC_OscConfig+0x334>
      HAL_PWR_EnableBkUpAccess();
 80045fe:	f7ff fd65 	bl	80040cc <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8004602:	f7fe fe81 	bl	8003308 <HAL_GetTick>
 8004606:	4606      	mov	r6, r0
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	05da      	lsls	r2, r3, #23
 800460c:	d40c      	bmi.n	8004628 <HAL_RCC_OscConfig+0x334>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460e:	f7fe fe7b 	bl	8003308 <HAL_GetTick>
 8004612:	1b83      	subs	r3, r0, r6
 8004614:	2b02      	cmp	r3, #2
 8004616:	d9f7      	bls.n	8004608 <HAL_RCC_OscConfig+0x314>
 8004618:	e71e      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
 800461a:	bf00      	nop
 800461c:	20000078 	.word	0x20000078
 8004620:	20000080 	.word	0x20000080
 8004624:	58000400 	.word	0x58000400
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004628:	68e3      	ldr	r3, [r4, #12]
 800462a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d058      	beq.n	80046e4 <HAL_RCC_OscConfig+0x3f0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004636:	2b05      	cmp	r3, #5
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004638:	bf02      	ittt	eq
 800463a:	f8d6 3090 	ldreq.w	r3, [r6, #144]	; 0x90
 800463e:	f043 0304 	orreq.w	r3, r3, #4
 8004642:	f8c6 3090 	streq.w	r3, [r6, #144]	; 0x90
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004646:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
      tickstart = HAL_GetTick();
 800464a:	f7fe fe5d 	bl	8003308 <HAL_GetTick>
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800464e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004652:	f043 0301 	orr.w	r3, r3, #1
      tickstart = HAL_GetTick();
 8004656:	4607      	mov	r7, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004658:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465c:	f241 3888 	movw	r8, #5000	; 0x1388
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004660:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004664:	079b      	lsls	r3, r3, #30
 8004666:	d405      	bmi.n	8004674 <HAL_RCC_OscConfig+0x380>
 8004668:	f7fe fe4e 	bl	8003308 <HAL_GetTick>
 800466c:	1bc3      	subs	r3, r0, r7
 800466e:	4543      	cmp	r3, r8
 8004670:	d9f6      	bls.n	8004660 <HAL_RCC_OscConfig+0x36c>
 8004672:	e6f1      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004674:	68e3      	ldr	r3, [r4, #12]
 8004676:	f023 0304 	bic.w	r3, r3, #4
 800467a:	2b81      	cmp	r3, #129	; 0x81
 800467c:	d11b      	bne.n	80046b6 <HAL_RCC_OscConfig+0x3c2>
        tickstart = HAL_GetTick();
 800467e:	f7fe fe43 	bl	8003308 <HAL_GetTick>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004682:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468a:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        tickstart = HAL_GetTick();
 800468e:	4607      	mov	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004690:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004694:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004698:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800469c:	0518      	lsls	r0, r3, #20
 800469e:	d504      	bpl.n	80046aa <HAL_RCC_OscConfig+0x3b6>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d14a      	bne.n	800473c <HAL_RCC_OscConfig+0x448>
  return HAL_OK;
 80046a6:	2000      	movs	r0, #0
 80046a8:	e668      	b.n	800437c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f7fe fe2d 	bl	8003308 <HAL_GetTick>
 80046ae:	1bc0      	subs	r0, r0, r7
 80046b0:	4540      	cmp	r0, r8
 80046b2:	d9f1      	bls.n	8004698 <HAL_RCC_OscConfig+0x3a4>
 80046b4:	e6d0      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
        tickstart = HAL_GetTick();
 80046b6:	f7fe fe27 	bl	8003308 <HAL_GetTick>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046ba:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80046be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046c2:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        tickstart = HAL_GetTick();
 80046c6:	4607      	mov	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046c8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046cc:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046d0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80046d4:	0519      	lsls	r1, r3, #20
 80046d6:	d5e3      	bpl.n	80046a0 <HAL_RCC_OscConfig+0x3ac>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d8:	f7fe fe16 	bl	8003308 <HAL_GetTick>
 80046dc:	1bc0      	subs	r0, r0, r7
 80046de:	4540      	cmp	r0, r8
 80046e0:	d9f6      	bls.n	80046d0 <HAL_RCC_OscConfig+0x3dc>
 80046e2:	e6b9      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
      tickstart = HAL_GetTick();
 80046e4:	f7fe fe10 	bl	8003308 <HAL_GetTick>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046e8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80046ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
      tickstart = HAL_GetTick();
 80046f0:	4607      	mov	r7, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046f2:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f6:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046fa:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80046fe:	051a      	lsls	r2, r3, #20
 8004700:	d416      	bmi.n	8004730 <HAL_RCC_OscConfig+0x43c>
      tickstart = HAL_GetTick();
 8004702:	f7fe fe01 	bl	8003308 <HAL_GetTick>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004706:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004712:	4607      	mov	r7, r0
 8004714:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f241 3688 	movw	r6, #5000	; 0x1388
 800471c:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8004720:	079b      	lsls	r3, r3, #30
 8004722:	d5bd      	bpl.n	80046a0 <HAL_RCC_OscConfig+0x3ac>
 8004724:	f7fe fdf0 	bl	8003308 <HAL_GetTick>
 8004728:	1bc3      	subs	r3, r0, r7
 800472a:	42b3      	cmp	r3, r6
 800472c:	d9f6      	bls.n	800471c <HAL_RCC_OscConfig+0x428>
 800472e:	e693      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004730:	f7fe fdea 	bl	8003308 <HAL_GetTick>
 8004734:	1bc0      	subs	r0, r0, r7
 8004736:	4540      	cmp	r0, r8
 8004738:	d9df      	bls.n	80046fa <HAL_RCC_OscConfig+0x406>
 800473a:	e68d      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800473c:	2d0c      	cmp	r5, #12
 800473e:	d04e      	beq.n	80047de <HAL_RCC_OscConfig+0x4ea>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004744:	2802      	cmp	r0, #2
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	d133      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4c4>
        tickstart = HAL_GetTick();
 8004750:	f7fe fdda 	bl	8003308 <HAL_GetTick>
 8004754:	4605      	mov	r5, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8004756:	f7ff fcde 	bl	8004116 <LL_RCC_PLL_IsReady>
 800475a:	bb38      	cbnz	r0, 80047ac <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800475c:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8004760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004764:	430b      	orrs	r3, r1
 8004766:	68d0      	ldr	r0, [r2, #12]
 8004768:	492d      	ldr	r1, [pc, #180]	; (8004820 <HAL_RCC_OscConfig+0x52c>)
 800476a:	4001      	ands	r1, r0
 800476c:	430b      	orrs	r3, r1
 800476e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004770:	430b      	orrs	r3, r1
 8004772:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004774:	430b      	orrs	r3, r1
 8004776:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004778:	430b      	orrs	r3, r1
 800477a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800477c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004780:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004782:	6813      	ldr	r3, [r2, #0]
 8004784:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004788:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800478a:	68d3      	ldr	r3, [r2, #12]
 800478c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004790:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004792:	f7fe fdb9 	bl	8003308 <HAL_GetTick>
 8004796:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() == 0U)
 8004798:	f7ff fcbd 	bl	8004116 <LL_RCC_PLL_IsReady>
 800479c:	2800      	cmp	r0, #0
 800479e:	d182      	bne.n	80046a6 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fe fdb2 	bl	8003308 <HAL_GetTick>
 80047a4:	1b00      	subs	r0, r0, r4
 80047a6:	280a      	cmp	r0, #10
 80047a8:	d9f6      	bls.n	8004798 <HAL_RCC_OscConfig+0x4a4>
 80047aa:	e655      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ac:	f7fe fdac 	bl	8003308 <HAL_GetTick>
 80047b0:	1b40      	subs	r0, r0, r5
 80047b2:	280a      	cmp	r0, #10
 80047b4:	d9cf      	bls.n	8004756 <HAL_RCC_OscConfig+0x462>
 80047b6:	e64f      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
        tickstart = HAL_GetTick();
 80047b8:	f7fe fda6 	bl	8003308 <HAL_GetTick>
 80047bc:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 80047be:	f7ff fcaa 	bl	8004116 <LL_RCC_PLL_IsReady>
 80047c2:	b930      	cbnz	r0, 80047d2 <HAL_RCC_OscConfig+0x4de>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80047c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047c8:	4b16      	ldr	r3, [pc, #88]	; (8004824 <HAL_RCC_OscConfig+0x530>)
 80047ca:	68d1      	ldr	r1, [r2, #12]
 80047cc:	400b      	ands	r3, r1
 80047ce:	60d3      	str	r3, [r2, #12]
 80047d0:	e5d4      	b.n	800437c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d2:	f7fe fd99 	bl	8003308 <HAL_GetTick>
 80047d6:	1b00      	subs	r0, r0, r4
 80047d8:	280a      	cmp	r0, #10
 80047da:	d9f0      	bls.n	80047be <HAL_RCC_OscConfig+0x4ca>
 80047dc:	e63c      	b.n	8004458 <HAL_RCC_OscConfig+0x164>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047de:	2801      	cmp	r0, #1
 80047e0:	f43f adcc 	beq.w	800437c <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 80047e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80047e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
        pll_config = RCC->PLLCFGR;
 80047ea:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80047ec:	f003 0103 	and.w	r1, r3, #3
 80047f0:	4291      	cmp	r1, r2
 80047f2:	f47f add8 	bne.w	80043a6 <HAL_RCC_OscConfig+0xb2>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80047f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047fc:	428a      	cmp	r2, r1
 80047fe:	f47f add2 	bne.w	80043a6 <HAL_RCC_OscConfig+0xb2>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004802:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004804:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004808:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800480c:	f47f adcb 	bne.w	80043a6 <HAL_RCC_OscConfig+0xb2>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004810:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004812:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8004816:	4293      	cmp	r3, r2
 8004818:	f43f af45 	beq.w	80046a6 <HAL_RCC_OscConfig+0x3b2>
 800481c:	e5c3      	b.n	80043a6 <HAL_RCC_OscConfig+0xb2>
 800481e:	bf00      	nop
 8004820:	11c1808c 	.word	0x11c1808c
 8004824:	eefefffc 	.word	0xeefefffc

08004828 <HAL_RCC_ClockConfig>:
{
 8004828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800482c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800482e:	4604      	mov	r4, r0
 8004830:	b910      	cbnz	r0, 8004838 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004832:	2001      	movs	r0, #1
}
 8004834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004838:	4e68      	ldr	r6, [pc, #416]	; (80049dc <HAL_RCC_ClockConfig+0x1b4>)
 800483a:	6833      	ldr	r3, [r6, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	428b      	cmp	r3, r1
 8004842:	d316      	bcc.n	8004872 <HAL_RCC_ClockConfig+0x4a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	079a      	lsls	r2, r3, #30
 8004848:	d527      	bpl.n	800489a <HAL_RCC_ClockConfig+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800484a:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800484e:	68a2      	ldr	r2, [r4, #8]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004856:	4313      	orrs	r3, r2
 8004858:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 800485a:	f7fe fd55 	bl	8003308 <HAL_GetTick>
 800485e:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	03db      	lsls	r3, r3, #15
 8004864:	d419      	bmi.n	800489a <HAL_RCC_ClockConfig+0x72>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004866:	f7fe fd4f 	bl	8003308 <HAL_GetTick>
 800486a:	1b83      	subs	r3, r0, r6
 800486c:	2b02      	cmp	r3, #2
 800486e:	d9f7      	bls.n	8004860 <HAL_RCC_ClockConfig+0x38>
 8004870:	e011      	b.n	8004896 <HAL_RCC_ClockConfig+0x6e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	6833      	ldr	r3, [r6, #0]
 8004874:	f023 0307 	bic.w	r3, r3, #7
 8004878:	430b      	orrs	r3, r1
 800487a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800487c:	f7fe fd44 	bl	8003308 <HAL_GetTick>
 8004880:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004882:	6833      	ldr	r3, [r6, #0]
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	42ab      	cmp	r3, r5
 800488a:	d0db      	beq.n	8004844 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800488c:	f7fe fd3c 	bl	8003308 <HAL_GetTick>
 8004890:	1bc0      	subs	r0, r0, r7
 8004892:	2802      	cmp	r0, #2
 8004894:	d9f5      	bls.n	8004882 <HAL_RCC_ClockConfig+0x5a>
        return HAL_TIMEOUT;
 8004896:	2003      	movs	r0, #3
 8004898:	e7cc      	b.n	8004834 <HAL_RCC_ClockConfig+0xc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	0658      	lsls	r0, r3, #25
 800489e:	d517      	bpl.n	80048d0 <HAL_RCC_ClockConfig+0xa8>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80048a0:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80048a4:	6962      	ldr	r2, [r4, #20]
 80048a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048aa:	f023 030f 	bic.w	r3, r3, #15
 80048ae:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 80048b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tickstart = HAL_GetTick();
 80048b6:	f7fe fd27 	bl	8003308 <HAL_GetTick>
 80048ba:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80048bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048c0:	03d9      	lsls	r1, r3, #15
 80048c2:	d405      	bmi.n	80048d0 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048c4:	f7fe fd20 	bl	8003308 <HAL_GetTick>
 80048c8:	1b83      	subs	r3, r0, r6
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d9f6      	bls.n	80048bc <HAL_RCC_ClockConfig+0x94>
 80048ce:	e7e2      	b.n	8004896 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	075a      	lsls	r2, r3, #29
 80048d4:	d513      	bpl.n	80048fe <HAL_RCC_ClockConfig+0xd6>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80048d6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80048da:	68e2      	ldr	r2, [r4, #12]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80048e6:	f7fe fd0f 	bl	8003308 <HAL_GetTick>
 80048ea:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	039b      	lsls	r3, r3, #14
 80048f0:	d405      	bmi.n	80048fe <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048f2:	f7fe fd09 	bl	8003308 <HAL_GetTick>
 80048f6:	1b83      	subs	r3, r0, r6
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d9f7      	bls.n	80048ec <HAL_RCC_ClockConfig+0xc4>
 80048fc:	e7cb      	b.n	8004896 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	0718      	lsls	r0, r3, #28
 8004902:	d514      	bpl.n	800492e <HAL_RCC_ClockConfig+0x106>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004904:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004908:	6922      	ldr	r2, [r4, #16]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004910:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004914:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8004916:	f7fe fcf7 	bl	8003308 <HAL_GetTick>
 800491a:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	0359      	lsls	r1, r3, #13
 8004920:	d405      	bmi.n	800492e <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004922:	f7fe fcf1 	bl	8003308 <HAL_GetTick>
 8004926:	1b83      	subs	r3, r0, r6
 8004928:	2b02      	cmp	r3, #2
 800492a:	d9f7      	bls.n	800491c <HAL_RCC_ClockConfig+0xf4>
 800492c:	e7b3      	b.n	8004896 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	07da      	lsls	r2, r3, #31
 8004932:	d40f      	bmi.n	8004954 <HAL_RCC_ClockConfig+0x12c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004934:	4c29      	ldr	r4, [pc, #164]	; (80049dc <HAL_RCC_ClockConfig+0x1b4>)
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	42ab      	cmp	r3, r5
 800493e:	d839      	bhi.n	80049b4 <HAL_RCC_ClockConfig+0x18c>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004940:	f7ff fcc8 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 8004944:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004946:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004948:	4b26      	ldr	r3, [pc, #152]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
}
 800494a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(uwTickPrio);
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	f7fe bc92 	b.w	8003278 <HAL_InitTick>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004954:	6862      	ldr	r2, [r4, #4]
 8004956:	2a02      	cmp	r2, #2
 8004958:	d11d      	bne.n	8004996 <HAL_RCC_ClockConfig+0x16e>
      if (LL_RCC_HSE_IsReady() == 0U)
 800495a:	f7ff fbc7 	bl	80040ec <LL_RCC_HSE_IsReady>
      if (LL_RCC_MSI_IsReady() == 0U)
 800495e:	2800      	cmp	r0, #0
 8004960:	f43f af67 	beq.w	8004832 <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004964:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004968:	f241 3888 	movw	r8, #5000	; 0x1388
 800496c:	68b3      	ldr	r3, [r6, #8]
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	4313      	orrs	r3, r2
 8004974:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004976:	f7fe fcc7 	bl	8003308 <HAL_GetTick>
 800497a:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800497c:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497e:	6862      	ldr	r2, [r4, #4]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004988:	d0d4      	beq.n	8004934 <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498a:	f7fe fcbd 	bl	8003308 <HAL_GetTick>
 800498e:	1bc0      	subs	r0, r0, r7
 8004990:	4540      	cmp	r0, r8
 8004992:	d9f3      	bls.n	800497c <HAL_RCC_ClockConfig+0x154>
 8004994:	e77f      	b.n	8004896 <HAL_RCC_ClockConfig+0x6e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004996:	2a03      	cmp	r2, #3
 8004998:	d102      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x178>
      if (LL_RCC_PLL_IsReady() == 0U)
 800499a:	f7ff fbbc 	bl	8004116 <LL_RCC_PLL_IsReady>
 800499e:	e7de      	b.n	800495e <HAL_RCC_ClockConfig+0x136>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049a0:	b912      	cbnz	r2, 80049a8 <HAL_RCC_ClockConfig+0x180>
      if (LL_RCC_MSI_IsReady() == 0U)
 80049a2:	f7ff fba9 	bl	80040f8 <LL_RCC_MSI_IsReady>
 80049a6:	e7da      	b.n	800495e <HAL_RCC_ClockConfig+0x136>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80049a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	055b      	lsls	r3, r3, #21
 80049b0:	d4d8      	bmi.n	8004964 <HAL_RCC_ClockConfig+0x13c>
 80049b2:	e73e      	b.n	8004832 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	f023 0307 	bic.w	r3, r3, #7
 80049ba:	432b      	orrs	r3, r5
 80049bc:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80049be:	f7fe fca3 	bl	8003308 <HAL_GetTick>
 80049c2:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	42ab      	cmp	r3, r5
 80049cc:	d0b8      	beq.n	8004940 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049ce:	f7fe fc9b 	bl	8003308 <HAL_GetTick>
 80049d2:	1b80      	subs	r0, r0, r6
 80049d4:	2802      	cmp	r0, #2
 80049d6:	d9f5      	bls.n	80049c4 <HAL_RCC_ClockConfig+0x19c>
 80049d8:	e75d      	b.n	8004896 <HAL_RCC_ClockConfig+0x6e>
 80049da:	bf00      	nop
 80049dc:	58004000 	.word	0x58004000
 80049e0:	20000078 	.word	0x20000078
 80049e4:	20000080 	.word	0x20000080

080049e8 <HAL_RCC_GetPCLK1Freq>:
{
 80049e8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80049ea:	f7ff fc73 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80049ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f2:	4a04      	ldr	r2, [pc, #16]	; (8004a04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80049fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80049fe:	40d8      	lsrs	r0, r3
 8004a00:	bd08      	pop	{r3, pc}
 8004a02:	bf00      	nop
 8004a04:	0800d03c 	.word	0x0800d03c

08004a08 <HAL_RCC_GetPCLK2Freq>:
{
 8004a08:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004a0a:	f7ff fc63 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a12:	4a04      	ldr	r2, [pc, #16]	; (8004a24 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004a1e:	40d8      	lsrs	r0, r3
 8004a20:	bd08      	pop	{r3, pc}
 8004a22:	bf00      	nop
 8004a24:	0800d03c 	.word	0x0800d03c

08004a28 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8004a30:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004a34:	4770      	bx	lr

08004a36 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a3a:	0902      	lsrs	r2, r0, #4
 8004a3c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a40:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8004a44:	0100      	lsls	r0, r0, #4
 8004a46:	ea23 0302 	bic.w	r3, r3, r2
 8004a4a:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 8004a4e:	4303      	orrs	r3, r0
 8004a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a54:	4770      	bx	lr

08004a56 <LL_RCC_SetLPTIMClockSource>:
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a5a:	0c02      	lsrs	r2, r0, #16
 8004a5c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a60:	0412      	lsls	r2, r2, #16
 8004a62:	ea23 0302 	bic.w	r3, r3, r2
 8004a66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004a6a:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
}
 8004a6e:	4770      	bx	lr

08004a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a70:	b570      	push	{r4, r5, r6, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a72:	6806      	ldr	r6, [r0, #0]
 8004a74:	f416 3680 	ands.w	r6, r6, #65536	; 0x10000
{
 8004a78:	4604      	mov	r4, r0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a7a:	d038      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004a7c:	f7ff fb26 	bl	80040cc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a80:	f7fe fc42 	bl	8003308 <HAL_GetTick>

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004a84:	4e61      	ldr	r6, [pc, #388]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
    tickstart = HAL_GetTick();
 8004a86:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004a88:	6833      	ldr	r3, [r6, #0]
 8004a8a:	05db      	lsls	r3, r3, #23
 8004a8c:	d529      	bpl.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a94:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004a98:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004a9c:	4291      	cmp	r1, r2
 8004a9e:	d014      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004aa0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004aa4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004aa8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004aac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ab0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004ab4:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8004ab8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004abc:	078d      	lsls	r5, r1, #30
 8004abe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004ac2:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004ac6:	f100 8090 	bmi.w	8004bea <HAL_RCCEx_PeriphCLKConfig+0x17a>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ad0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004ade:	2600      	movs	r6, #0
}
 8004ae0:	e005      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae2:	f7fe fc11 	bl	8003308 <HAL_GetTick>
 8004ae6:	1b40      	subs	r0, r0, r5
 8004ae8:	2802      	cmp	r0, #2
 8004aea:	d9cd      	bls.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aec:	2603      	movs	r6, #3
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aee:	6825      	ldr	r5, [r4, #0]
 8004af0:	07e8      	lsls	r0, r5, #31
 8004af2:	d50a      	bpl.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004af4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004af8:	6862      	ldr	r2, [r4, #4]
 8004afa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004afe:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004b02:	b292      	uxth	r2, r2
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b0a:	07a9      	lsls	r1, r5, #30
 8004b0c:	d50a      	bpl.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8004b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b12:	68a2      	ldr	r2, [r4, #8]
 8004b14:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004b18:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004b1c:	b292      	uxth	r2, r2
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b24:	06aa      	lsls	r2, r5, #26
 8004b26:	d509      	bpl.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004b28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b2c:	6921      	ldr	r1, [r4, #16]
 8004b2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b32:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004b36:	430b      	orrs	r3, r1
 8004b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b3c:	05ab      	lsls	r3, r5, #22
 8004b3e:	d502      	bpl.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b40:	6a20      	ldr	r0, [r4, #32]
 8004b42:	f7ff ff88 	bl	8004a56 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b46:	0568      	lsls	r0, r5, #21
 8004b48:	d502      	bpl.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004b4c:	f7ff ff83 	bl	8004a56 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004b50:	0529      	lsls	r1, r5, #20
 8004b52:	d502      	bpl.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004b54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004b56:	f7ff ff7e 	bl	8004a56 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b5a:	066a      	lsls	r2, r5, #25
 8004b5c:	d502      	bpl.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b5e:	6960      	ldr	r0, [r4, #20]
 8004b60:	f7ff ff69 	bl	8004a36 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b64:	062b      	lsls	r3, r5, #24
 8004b66:	d502      	bpl.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b68:	69a0      	ldr	r0, [r4, #24]
 8004b6a:	f7ff ff64 	bl	8004a36 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b6e:	05e8      	lsls	r0, r5, #23
 8004b70:	d502      	bpl.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b72:	69e0      	ldr	r0, [r4, #28]
 8004b74:	f7ff ff5f 	bl	8004a36 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004b78:	06e9      	lsls	r1, r5, #27
 8004b7a:	d510      	bpl.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004b80:	68e1      	ldr	r1, [r4, #12]
 8004b82:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004b90:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004b94:	bf02      	ittt	eq
 8004b96:	68d3      	ldreq	r3, [r2, #12]
 8004b98:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 8004b9c:	60d3      	streq	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b9e:	042a      	lsls	r2, r5, #16
 8004ba0:	d50e      	bpl.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x150>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ba6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004ba8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004bac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bb6:	b919      	cbnz	r1, 8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004bb8:	68d3      	ldr	r3, [r2, #12]
 8004bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bc0:	046b      	lsls	r3, r5, #17
 8004bc2:	d510      	bpl.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bc8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004bca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004bce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004bd2:	430b      	orrs	r3, r1

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004bd4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004bdc:	d103      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x176>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004bde:	68d3      	ldr	r3, [r2, #12]
 8004be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
}
 8004be6:	4630      	mov	r0, r6
 8004be8:	bd70      	pop	{r4, r5, r6, pc}
        tickstart = HAL_GetTick();
 8004bea:	f7fe fb8d 	bl	8003308 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bee:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004bf2:	4605      	mov	r5, r0
        while (LL_RCC_LSE_IsReady() != 1U)
 8004bf4:	f7ff ff18 	bl	8004a28 <LL_RCC_LSE_IsReady>
 8004bf8:	2801      	cmp	r0, #1
 8004bfa:	f43f af66 	beq.w	8004aca <HAL_RCCEx_PeriphCLKConfig+0x5a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfe:	f7fe fb83 	bl	8003308 <HAL_GetTick>
 8004c02:	1b40      	subs	r0, r0, r5
 8004c04:	42b0      	cmp	r0, r6
 8004c06:	d9f5      	bls.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8004c08:	e770      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c0a:	bf00      	nop
 8004c0c:	58000400 	.word	0x58000400

08004c10 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004c10:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004c12:	4c0a      	ldr	r4, [pc, #40]	; (8004c3c <HAL_RTC_WaitForSynchro+0x2c>)
 8004c14:	68e3      	ldr	r3, [r4, #12]
 8004c16:	f023 0320 	bic.w	r3, r3, #32
 8004c1a:	60e3      	str	r3, [r4, #12]

  tickstart = HAL_GetTick();
 8004c1c:	f7fe fb74 	bl	8003308 <HAL_GetTick>
 8004c20:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004c22:	68e3      	ldr	r3, [r4, #12]
 8004c24:	069b      	lsls	r3, r3, #26
 8004c26:	d501      	bpl.n	8004c2c <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004c28:	2000      	movs	r0, #0
}
 8004c2a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c2c:	f7fe fb6c 	bl	8003308 <HAL_GetTick>
 8004c30:	1b40      	subs	r0, r0, r5
 8004c32:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004c36:	d9f4      	bls.n	8004c22 <HAL_RTC_WaitForSynchro+0x12>
      return HAL_TIMEOUT;
 8004c38:	2003      	movs	r0, #3
 8004c3a:	e7f6      	b.n	8004c2a <HAL_RTC_WaitForSynchro+0x1a>
 8004c3c:	40002800 	.word	0x40002800

08004c40 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004c44:	4d11      	ldr	r5, [pc, #68]	; (8004c8c <RTC_EnterInitMode+0x4c>)
 8004c46:	68ec      	ldr	r4, [r5, #12]
 8004c48:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 8004c4c:	4607      	mov	r7, r0
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004c4e:	d11a      	bne.n	8004c86 <RTC_EnterInitMode+0x46>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004c50:	68eb      	ldr	r3, [r5, #12]
 8004c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c56:	60eb      	str	r3, [r5, #12]

    tickstart = HAL_GetTick();
 8004c58:	f7fe fb56 	bl	8003308 <HAL_GetTick>
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c5c:	f04f 0803 	mov.w	r8, #3
    tickstart = HAL_GetTick();
 8004c60:	4606      	mov	r6, r0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004c62:	68eb      	ldr	r3, [r5, #12]
 8004c64:	065b      	lsls	r3, r3, #25
 8004c66:	d401      	bmi.n	8004c6c <RTC_EnterInitMode+0x2c>
 8004c68:	2c03      	cmp	r4, #3
 8004c6a:	d102      	bne.n	8004c72 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
}
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004c72:	f7fe fb49 	bl	8003308 <HAL_GetTick>
 8004c76:	1b80      	subs	r0, r0, r6
 8004c78:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c7c:	bf84      	itt	hi
 8004c7e:	f887 802d 	strbhi.w	r8, [r7, #45]	; 0x2d
        status = HAL_TIMEOUT;
 8004c82:	2403      	movhi	r4, #3
 8004c84:	e7ed      	b.n	8004c62 <RTC_EnterInitMode+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004c86:	2400      	movs	r4, #0
 8004c88:	e7f0      	b.n	8004c6c <RTC_EnterInitMode+0x2c>
 8004c8a:	bf00      	nop
 8004c8c:	40002800 	.word	0x40002800

08004c90 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c90:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004c92:	4c0f      	ldr	r4, [pc, #60]	; (8004cd0 <RTC_ExitInitMode+0x40>)
 8004c94:	68e3      	ldr	r3, [r4, #12]
 8004c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c9a:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004c9c:	69a3      	ldr	r3, [r4, #24]
 8004c9e:	069b      	lsls	r3, r3, #26
{
 8004ca0:	4605      	mov	r5, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004ca2:	d406      	bmi.n	8004cb2 <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ca4:	f7ff ffb4 	bl	8004c10 <HAL_RTC_WaitForSynchro>
 8004ca8:	b110      	cbz	r0, 8004cb0 <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004caa:	2003      	movs	r0, #3
 8004cac:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8004cb0:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004cb2:	69a3      	ldr	r3, [r4, #24]
 8004cb4:	f023 0320 	bic.w	r3, r3, #32
 8004cb8:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cba:	f7ff ffa9 	bl	8004c10 <HAL_RTC_WaitForSynchro>
 8004cbe:	b110      	cbz	r0, 8004cc6 <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cc0:	2003      	movs	r0, #3
 8004cc2:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004cc6:	69a3      	ldr	r3, [r4, #24]
 8004cc8:	f043 0320 	orr.w	r3, r3, #32
 8004ccc:	61a3      	str	r3, [r4, #24]
  return status;
 8004cce:	e7ef      	b.n	8004cb0 <RTC_ExitInitMode+0x20>
 8004cd0:	40002800 	.word	0x40002800

08004cd4 <HAL_RTC_Init>:
{
 8004cd4:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	d04b      	beq.n	8004d74 <HAL_RTC_Init+0xa0>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004cdc:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004ce0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004ce4:	b91b      	cbnz	r3, 8004cee <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8004ce6:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8004cea:	f7fe f8a3 	bl	8002e34 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004cee:	2302      	movs	r3, #2
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004cf0:	4d21      	ldr	r5, [pc, #132]	; (8004d78 <HAL_RTC_Init+0xa4>)
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004cf2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004cf6:	68eb      	ldr	r3, [r5, #12]
 8004cf8:	06db      	lsls	r3, r3, #27
 8004cfa:	d432      	bmi.n	8004d62 <HAL_RTC_Init+0x8e>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cfc:	23ca      	movs	r3, #202	; 0xca
 8004cfe:	626b      	str	r3, [r5, #36]	; 0x24
 8004d00:	2353      	movs	r3, #83	; 0x53
 8004d02:	626b      	str	r3, [r5, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8004d04:	4620      	mov	r0, r4
 8004d06:	f7ff ff9b 	bl	8004c40 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8004d0a:	bb78      	cbnz	r0, 8004d6c <HAL_RTC_Init+0x98>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004d0c:	69ab      	ldr	r3, [r5, #24]
 8004d0e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d16:	61ab      	str	r3, [r5, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004d18:	6921      	ldr	r1, [r4, #16]
 8004d1a:	6863      	ldr	r3, [r4, #4]
 8004d1c:	69aa      	ldr	r2, [r5, #24]
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	4313      	orrs	r3, r2
 8004d22:	69a2      	ldr	r2, [r4, #24]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61ab      	str	r3, [r5, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004d28:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8004d2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d30:	612b      	str	r3, [r5, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004d32:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 8004d36:	68ea      	ldr	r2, [r5, #12]
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60eb      	str	r3, [r5, #12]
        status = RTC_ExitInitMode(hrtc);
 8004d42:	4620      	mov	r0, r4
 8004d44:	f7ff ffa4 	bl	8004c90 <RTC_ExitInitMode>
        if (status == HAL_OK)
 8004d48:	b980      	cbnz	r0, 8004d6c <HAL_RTC_Init+0x98>
          MODIFY_REG(RTC->CR, \
 8004d4a:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8004d4e:	69aa      	ldr	r2, [r5, #24]
 8004d50:	430b      	orrs	r3, r1
 8004d52:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8004d56:	4313      	orrs	r3, r2
 8004d58:	6962      	ldr	r2, [r4, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	61ab      	str	r3, [r5, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d5e:	23ff      	movs	r3, #255	; 0xff
 8004d60:	626b      	str	r3, [r5, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_READY;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8004d68:	2000      	movs	r0, #0
 8004d6a:	e002      	b.n	8004d72 <HAL_RTC_Init+0x9e>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d6c:	4b02      	ldr	r3, [pc, #8]	; (8004d78 <HAL_RTC_Init+0xa4>)
 8004d6e:	22ff      	movs	r2, #255	; 0xff
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d74:	2001      	movs	r0, #1
 8004d76:	e7fc      	b.n	8004d72 <HAL_RTC_Init+0x9e>
 8004d78:	40002800 	.word	0x40002800

08004d7c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004d7c:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8004d7e:	2809      	cmp	r0, #9
 8004d80:	d803      	bhi.n	8004d8a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    tmp_Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004d82:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8004d86:	b2c0      	uxtb	r0, r0
 8004d88:	4770      	bx	lr
    tmp_Value -= 10U;
 8004d8a:	380a      	subs	r0, #10
    bcdhigh++;
 8004d8c:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8004d8e:	b2c0      	uxtb	r0, r0
 8004d90:	e7f5      	b.n	8004d7e <RTC_ByteToBcd2+0x2>
	...

08004d94 <HAL_RTC_SetTime>:
{
 8004d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8004d98:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004d9c:	2b01      	cmp	r3, #1
{
 8004d9e:	4605      	mov	r5, r0
 8004da0:	460e      	mov	r6, r1
 8004da2:	4690      	mov	r8, r2
 8004da4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 8004da8:	d059      	beq.n	8004e5e <HAL_RTC_SetTime+0xca>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004daa:	4f2e      	ldr	r7, [pc, #184]	; (8004e64 <HAL_RTC_SetTime+0xd0>)
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dac:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  __HAL_LOCK(hrtc);
 8004db0:	2201      	movs	r2, #1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004db2:	23ca      	movs	r3, #202	; 0xca
  __HAL_LOCK(hrtc);
 8004db4:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dba:	2353      	movs	r3, #83	; 0x53
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004dbe:	f7ff ff3f 	bl	8004c40 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004dc2:	bb88      	cbnz	r0, 8004e28 <HAL_RTC_SetTime+0x94>
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dce:	d02b      	beq.n	8004e28 <HAL_RTC_SetTime+0x94>
      if (Format == RTC_FORMAT_BIN)
 8004dd0:	7830      	ldrb	r0, [r6, #0]
 8004dd2:	7874      	ldrb	r4, [r6, #1]
 8004dd4:	78b1      	ldrb	r1, [r6, #2]
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004dd6:	69bb      	ldr	r3, [r7, #24]
      if (Format == RTC_FORMAT_BIN)
 8004dd8:	f1b8 0f00 	cmp.w	r8, #0
 8004ddc:	d133      	bne.n	8004e46 <HAL_RTC_SetTime+0xb2>
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004dde:	f013 0340 	ands.w	r3, r3, #64	; 0x40
          sTime->TimeFormat = 0x00U;
 8004de2:	bf08      	it	eq
 8004de4:	70f3      	strbeq	r3, [r6, #3]
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004de6:	f7ff ffc9 	bl	8004d7c <RTC_ByteToBcd2>
 8004dea:	4607      	mov	r7, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004dec:	4620      	mov	r0, r4
 8004dee:	f7ff ffc5 	bl	8004d7c <RTC_ByteToBcd2>
 8004df2:	4602      	mov	r2, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004df4:	4608      	mov	r0, r1
 8004df6:	f7ff ffc1 	bl	8004d7c <RTC_ByteToBcd2>
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004dfa:	78f3      	ldrb	r3, [r6, #3]
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004dfc:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8004e00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004e04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8004e08:	4a16      	ldr	r2, [pc, #88]	; (8004e64 <HAL_RTC_SetTime+0xd0>)
 8004e0a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004e0e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e12:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8004e14:	6993      	ldr	r3, [r2, #24]
 8004e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e1a:	6193      	str	r3, [r2, #24]
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8004e1c:	e9d6 3003 	ldrd	r3, r0, [r6, #12]
 8004e20:	6991      	ldr	r1, [r2, #24]
 8004e22:	4303      	orrs	r3, r0
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6193      	str	r3, [r2, #24]
  status = RTC_ExitInitMode(hrtc);
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f7ff ff31 	bl	8004c90 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <HAL_RTC_SetTime+0xd0>)
 8004e30:	22ff      	movs	r2, #255	; 0xff
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8004e34:	b910      	cbnz	r0, 8004e3c <HAL_RTC_SetTime+0xa8>
    hrtc->State = HAL_RTC_STATE_READY;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 8004e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004e46:	f013 0340 	ands.w	r3, r3, #64	; 0x40
          sTime->TimeFormat = 0x00U;
 8004e4a:	bf08      	it	eq
 8004e4c:	70f3      	strbeq	r3, [r6, #3]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e4e:	0224      	lsls	r4, r4, #8
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004e50:	78f2      	ldrb	r2, [r6, #3]
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e52:	ea44 4300 	orr.w	r3, r4, r0, lsl #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e56:	430b      	orrs	r3, r1
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e58:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8004e5c:	e7d4      	b.n	8004e08 <HAL_RTC_SetTime+0x74>
  __HAL_LOCK(hrtc);
 8004e5e:	4618      	mov	r0, r3
 8004e60:	e7ef      	b.n	8004e42 <HAL_RTC_SetTime+0xae>
 8004e62:	bf00      	nop
 8004e64:	40002800 	.word	0x40002800

08004e68 <HAL_RTC_SetDate>:
{
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004e6a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004e6e:	2b01      	cmp	r3, #1
{
 8004e70:	4605      	mov	r5, r0
 8004e72:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8004e76:	d03a      	beq.n	8004eee <HAL_RTC_SetDate+0x86>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e7e:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004e82:	780c      	ldrb	r4, [r1, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004e84:	78c8      	ldrb	r0, [r1, #3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e86:	784e      	ldrb	r6, [r1, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004e88:	788f      	ldrb	r7, [r1, #2]
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004e8a:	0364      	lsls	r4, r4, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e8c:	bb82      	cbnz	r2, 8004ef0 <HAL_RTC_SetDate+0x88>
 8004e8e:	06f3      	lsls	r3, r6, #27
 8004e90:	d503      	bpl.n	8004e9a <HAL_RTC_SetDate+0x32>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e92:	f026 0610 	bic.w	r6, r6, #16
 8004e96:	360a      	adds	r6, #10
 8004e98:	704e      	strb	r6, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004e9a:	f7ff ff6f 	bl	8004d7c <RTC_ByteToBcd2>
 8004e9e:	4606      	mov	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ea0:	7848      	ldrb	r0, [r1, #1]
 8004ea2:	f7ff ff6b 	bl	8004d7c <RTC_ByteToBcd2>
 8004ea6:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	f7ff ff67 	bl	8004d7c <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004eae:	ea40 0304 	orr.w	r3, r0, r4
 8004eb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004eb6:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eba:	4e10      	ldr	r6, [pc, #64]	; (8004efc <HAL_RTC_SetDate+0x94>)
 8004ebc:	23ca      	movs	r3, #202	; 0xca
 8004ebe:	6273      	str	r3, [r6, #36]	; 0x24
 8004ec0:	2353      	movs	r3, #83	; 0x53
 8004ec2:	6273      	str	r3, [r6, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	f7ff febb 	bl	8004c40 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004eca:	b938      	cbnz	r0, 8004edc <HAL_RTC_SetDate+0x74>
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8004ecc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8004ed0:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8004ed4:	6074      	str	r4, [r6, #4]
    status = RTC_ExitInitMode(hrtc);
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f7ff feda 	bl	8004c90 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004edc:	23ff      	movs	r3, #255	; 0xff
 8004ede:	6273      	str	r3, [r6, #36]	; 0x24
  if (status == HAL_OK)
 8004ee0:	b910      	cbnz	r0, 8004ee8 <HAL_RTC_SetDate+0x80>
    hrtc->State = HAL_RTC_STATE_READY ;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 8004eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004ef0:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8004ef4:	433c      	orrs	r4, r7
 8004ef6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8004efa:	e7de      	b.n	8004eba <HAL_RTC_SetDate+0x52>
 8004efc:	40002800 	.word	0x40002800

08004f00 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8004f00:	0903      	lsrs	r3, r0, #4
 8004f02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004f06:	f000 000f 	and.w	r0, r0, #15
 8004f0a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8004f0e:	b2c0      	uxtb	r0, r0
 8004f10:	4770      	bx	lr
	...

08004f14 <HAL_RTC_GetTime>:
{
 8004f14:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8004f16:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <HAL_RTC_GetTime+0x54>)
 8004f18:	6898      	ldr	r0, [r3, #8]
 8004f1a:	6048      	str	r0, [r1, #4]
  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004f1c:	68d8      	ldr	r0, [r3, #12]
 8004f1e:	f400 7040 	and.w	r0, r0, #768	; 0x300
 8004f22:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004f26:	d01c      	beq.n	8004f62 <HAL_RTC_GetTime+0x4e>
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8004f28:	6918      	ldr	r0, [r3, #16]
 8004f2a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8004f2e:	6088      	str	r0, [r1, #8]
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8004f30:	681b      	ldr	r3, [r3, #0]
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004f32:	f3c3 4005 	ubfx	r0, r3, #16, #6
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004f36:	f3c3 2506 	ubfx	r5, r3, #8, #7
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004f3a:	f003 047f 	and.w	r4, r3, #127	; 0x7f
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004f3e:	f3c3 5380 	ubfx	r3, r3, #22, #1
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004f42:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004f44:	704d      	strb	r5, [r1, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004f46:	708c      	strb	r4, [r1, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004f48:	70cb      	strb	r3, [r1, #3]
    if (Format == RTC_FORMAT_BIN)
 8004f4a:	b952      	cbnz	r2, 8004f62 <HAL_RTC_GetTime+0x4e>
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004f4c:	f7ff ffd8 	bl	8004f00 <RTC_Bcd2ToByte>
 8004f50:	7008      	strb	r0, [r1, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004f52:	4628      	mov	r0, r5
 8004f54:	f7ff ffd4 	bl	8004f00 <RTC_Bcd2ToByte>
 8004f58:	7048      	strb	r0, [r1, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f7ff ffd0 	bl	8004f00 <RTC_Bcd2ToByte>
 8004f60:	7088      	strb	r0, [r1, #2]
}
 8004f62:	2000      	movs	r0, #0
 8004f64:	bd38      	pop	{r3, r4, r5, pc}
 8004f66:	bf00      	nop
 8004f68:	40002800 	.word	0x40002800

08004f6c <HAL_RTC_GetDate>:
{
 8004f6c:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <HAL_RTC_GetDate+0x3c>)
 8004f70:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004f72:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004f76:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004f7a:	f003 043f 	and.w	r4, r3, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004f7e:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004f82:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004f84:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004f86:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004f88:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8004f8a:	b952      	cbnz	r2, 8004fa2 <HAL_RTC_GetDate+0x36>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004f8c:	f7ff ffb8 	bl	8004f00 <RTC_Bcd2ToByte>
 8004f90:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004f92:	4628      	mov	r0, r5
 8004f94:	f7ff ffb4 	bl	8004f00 <RTC_Bcd2ToByte>
 8004f98:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f7ff ffb0 	bl	8004f00 <RTC_Bcd2ToByte>
 8004fa0:	7088      	strb	r0, [r1, #2]
}
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	bd38      	pop	{r3, r4, r5, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40002800 	.word	0x40002800

08004fac <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fae:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004fb2:	2b01      	cmp	r3, #1
{
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8004fba:	d02c      	beq.n	8005016 <HAL_RTCEx_DeactivateWakeUpTimer+0x6a>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fbc:	4d16      	ldr	r5, [pc, #88]	; (8005018 <HAL_RTCEx_DeactivateWakeUpTimer+0x6c>)
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fbe:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
  __HAL_LOCK(hrtc);
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fc8:	23ca      	movs	r3, #202	; 0xca
 8004fca:	626b      	str	r3, [r5, #36]	; 0x24
 8004fcc:	2353      	movs	r3, #83	; 0x53
 8004fce:	626b      	str	r3, [r5, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8004fd0:	69ab      	ldr	r3, [r5, #24]
 8004fd2:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8004fd6:	61ab      	str	r3, [r5, #24]

  tickstart = HAL_GetTick();
 8004fd8:	f7fe f996 	bl	8003308 <HAL_GetTick>
 8004fdc:	4607      	mov	r7, r0
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8004fde:	68ee      	ldr	r6, [r5, #12]
 8004fe0:	f016 0604 	ands.w	r6, r6, #4
 8004fe4:	d00a      	beq.n	8004ffc <HAL_RTCEx_DeactivateWakeUpTimer+0x50>
      return HAL_TIMEOUT;
    }
  }

  /* Clear wakeup timer flag */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	65eb      	str	r3, [r5, #92]	; 0x5c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fea:	23ff      	movs	r3, #255	; 0xff
 8004fec:	626b      	str	r3, [r5, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fee:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8004ff6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  return HAL_OK;
 8004ffa:	e00c      	b.n	8005016 <HAL_RTCEx_DeactivateWakeUpTimer+0x6a>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ffc:	f7fe f984 	bl	8003308 <HAL_GetTick>
 8005000:	1bc0      	subs	r0, r0, r7
 8005002:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005006:	d9ea      	bls.n	8004fde <HAL_RTCEx_DeactivateWakeUpTimer+0x32>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005008:	23ff      	movs	r3, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800500a:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800500c:	626b      	str	r3, [r5, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800500e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      __HAL_UNLOCK(hrtc);
 8005012:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 8005016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005018:	40002800 	.word	0x40002800

0800501c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800501c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005020:	461f      	mov	r7, r3
 8005022:	4689      	mov	r9, r1
 8005024:	4690      	mov	r8, r2
 8005026:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005028:	f7fe f96e 	bl	8003308 <HAL_GetTick>
 800502c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800502e:	443d      	add	r5, r7
 8005030:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8005032:	f7fe f969 	bl	8003308 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005036:	4b26      	ldr	r3, [pc, #152]	; (80050d0 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8005038:	681e      	ldr	r6, [r3, #0]
 800503a:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 800503e:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8005040:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005042:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005044:	6822      	ldr	r2, [r4, #0]
 8005046:	6893      	ldr	r3, [r2, #8]
 8005048:	ea39 0303 	bics.w	r3, r9, r3
 800504c:	bf0c      	ite	eq
 800504e:	2301      	moveq	r3, #1
 8005050:	2300      	movne	r3, #0
 8005052:	4543      	cmp	r3, r8
 8005054:	d101      	bne.n	800505a <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8005056:	2000      	movs	r0, #0
 8005058:	e02e      	b.n	80050b8 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 800505a:	1c7b      	adds	r3, r7, #1
 800505c:	d0f3      	beq.n	8005046 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800505e:	f7fe f953 	bl	8003308 <HAL_GetTick>
 8005062:	eba0 000a 	sub.w	r0, r0, sl
 8005066:	42a8      	cmp	r0, r5
 8005068:	d329      	bcc.n	80050be <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005072:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005074:	6862      	ldr	r2, [r4, #4]
 8005076:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800507a:	d10a      	bne.n	8005092 <SPI_WaitFlagStateUntilTimeout+0x76>
 800507c:	68a2      	ldr	r2, [r4, #8]
 800507e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005082:	d002      	beq.n	800508a <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005084:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005088:	d103      	bne.n	8005092 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005090:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005092:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005094:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005098:	d107      	bne.n	80050aa <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80050b0:	2300      	movs	r3, #0
 80050b2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 80050b6:	2003      	movs	r0, #3
}
 80050b8:	b002      	add	sp, #8
 80050ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 80050be:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80050c0:	2b00      	cmp	r3, #0
      count--;
 80050c2:	9b01      	ldr	r3, [sp, #4]
 80050c4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 80050c8:	bf08      	it	eq
 80050ca:	2500      	moveq	r5, #0
      count--;
 80050cc:	9301      	str	r3, [sp, #4]
 80050ce:	e7b9      	b.n	8005044 <SPI_WaitFlagStateUntilTimeout+0x28>
 80050d0:	20000078 	.word	0x20000078

080050d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d8:	4699      	mov	r9, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	f88d 3003 	strb.w	r3, [sp, #3]
{
 80050e0:	4604      	mov	r4, r0
 80050e2:	4688      	mov	r8, r1
 80050e4:	4617      	mov	r7, r2

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80050e6:	f7fe f90f 	bl	8003308 <HAL_GetTick>
 80050ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050ec:	444d      	add	r5, r9
 80050ee:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80050f0:	f7fe f90a 	bl	8003308 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80050f4:	4b2c      	ldr	r3, [pc, #176]	; (80051a8 <SPI_WaitFifoStateUntilTimeout+0xd4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80050f6:	f8d4 b000 	ldr.w	fp, [r4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80050fa:	681e      	ldr	r6, [r3, #0]
 80050fc:	2323      	movs	r3, #35	; 0x23
 80050fe:	435e      	muls	r6, r3
 8005100:	0d36      	lsrs	r6, r6, #20
 8005102:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8005104:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005106:	9601      	str	r6, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005108:	6822      	ldr	r2, [r4, #0]
 800510a:	6893      	ldr	r3, [r2, #8]
 800510c:	ea03 0308 	and.w	r3, r3, r8
 8005110:	42bb      	cmp	r3, r7
 8005112:	d101      	bne.n	8005118 <SPI_WaitFifoStateUntilTimeout+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 8005114:	2000      	movs	r0, #0
 8005116:	e03a      	b.n	800518e <SPI_WaitFifoStateUntilTimeout+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005118:	f5b8 6fc0 	cmp.w	r8, #1536	; 0x600
 800511c:	d107      	bne.n	800512e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800511e:	b937      	cbnz	r7, 800512e <SPI_WaitFifoStateUntilTimeout+0x5a>
      tmpreg8 = *ptmpreg8;
 8005120:	f89b 300c 	ldrb.w	r3, [fp, #12]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800512a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 800512e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8005132:	d0ea      	beq.n	800510a <SPI_WaitFifoStateUntilTimeout+0x36>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005134:	f7fe f8e8 	bl	8003308 <HAL_GetTick>
 8005138:	eba0 000a 	sub.w	r0, r0, sl
 800513c:	42a8      	cmp	r0, r5
 800513e:	d329      	bcc.n	8005194 <SPI_WaitFifoStateUntilTimeout+0xc0>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005148:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800514a:	6862      	ldr	r2, [r4, #4]
 800514c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005150:	d10a      	bne.n	8005168 <SPI_WaitFifoStateUntilTimeout+0x94>
 8005152:	68a2      	ldr	r2, [r4, #8]
 8005154:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005158:	d002      	beq.n	8005160 <SPI_WaitFifoStateUntilTimeout+0x8c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800515a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800515e:	d103      	bne.n	8005168 <SPI_WaitFifoStateUntilTimeout+0x94>
          __HAL_SPI_DISABLE(hspi);
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005166:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005168:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800516a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800516e:	d107      	bne.n	8005180 <SPI_WaitFifoStateUntilTimeout+0xac>
          SPI_RESET_CRC(hspi);
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800517e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005180:	2301      	movs	r3, #1
 8005182:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8005186:	2300      	movs	r3, #0
 8005188:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 800518c:	2003      	movs	r0, #3
}
 800518e:	b003      	add	sp, #12
 8005190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (count == 0U)
 8005194:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8005196:	2b00      	cmp	r3, #0
      count--;
 8005198:	9b01      	ldr	r3, [sp, #4]
 800519a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 800519e:	bf08      	it	eq
 80051a0:	2500      	moveq	r5, #0
      count--;
 80051a2:	9301      	str	r3, [sp, #4]
 80051a4:	e7b0      	b.n	8005108 <SPI_WaitFifoStateUntilTimeout+0x34>
 80051a6:	bf00      	nop
 80051a8:	20000078 	.word	0x20000078

080051ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051ae:	460b      	mov	r3, r1
 80051b0:	9200      	str	r2, [sp, #0]
{
 80051b2:	460d      	mov	r5, r1
 80051b4:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051b6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80051ba:	2200      	movs	r2, #0
{
 80051bc:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051be:	f7ff ff89 	bl	80050d4 <SPI_WaitFifoStateUntilTimeout>
 80051c2:	4602      	mov	r2, r0
 80051c4:	b128      	cbz	r0, 80051d2 <SPI_EndRxTxTransaction+0x26>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80051c8:	f043 0320 	orr.w	r3, r3, #32
 80051cc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80051ce:	2003      	movs	r0, #3
 80051d0:	e011      	b.n	80051f6 <SPI_EndRxTxTransaction+0x4a>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051d2:	9600      	str	r6, [sp, #0]
 80051d4:	462b      	mov	r3, r5
 80051d6:	2180      	movs	r1, #128	; 0x80
 80051d8:	4620      	mov	r0, r4
 80051da:	f7ff ff1f 	bl	800501c <SPI_WaitFlagStateUntilTimeout>
 80051de:	4602      	mov	r2, r0
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d1f0      	bne.n	80051c6 <SPI_EndRxTxTransaction+0x1a>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051e4:	9600      	str	r6, [sp, #0]
 80051e6:	462b      	mov	r3, r5
 80051e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051ec:	4620      	mov	r0, r4
 80051ee:	f7ff ff71 	bl	80050d4 <SPI_WaitFifoStateUntilTimeout>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d1e7      	bne.n	80051c6 <SPI_EndRxTxTransaction+0x1a>
  }

  return HAL_OK;
}
 80051f6:	b002      	add	sp, #8
 80051f8:	bd70      	pop	{r4, r5, r6, pc}

080051fa <HAL_SPI_Init>:
{
 80051fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 80051fc:	4604      	mov	r4, r0
 80051fe:	2800      	cmp	r0, #0
 8005200:	d07a      	beq.n	80052f8 <HAL_SPI_Init+0xfe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005202:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d14f      	bne.n	80052a8 <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005208:	6842      	ldr	r2, [r0, #4]
 800520a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800520e:	d000      	beq.n	8005212 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005210:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005212:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005216:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800521a:	b923      	cbnz	r3, 8005226 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 800521c:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005220:	4620      	mov	r0, r4
 8005222:	f7fd fe5b 	bl	8002edc <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8005226:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005228:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800522a:	2302      	movs	r3, #2
 800522c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005230:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005232:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8005236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800523a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	d85c      	bhi.n	80052fc <HAL_SPI_Init+0x102>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005242:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005246:	d000      	beq.n	800524a <HAL_SPI_Init+0x50>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005248:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800524a:	6863      	ldr	r3, [r4, #4]
 800524c:	68a7      	ldr	r7, [r4, #8]
 800524e:	69a0      	ldr	r0, [r4, #24]
 8005250:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005252:	f407 4704 	and.w	r7, r7, #33792	; 0x8400
 8005256:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800525a:	433b      	orrs	r3, r7
 800525c:	6927      	ldr	r7, [r4, #16]
 800525e:	f007 0702 	and.w	r7, r7, #2
 8005262:	433b      	orrs	r3, r7
 8005264:	6967      	ldr	r7, [r4, #20]
 8005266:	f007 0701 	and.w	r7, r7, #1
 800526a:	433b      	orrs	r3, r7
 800526c:	f400 7700 	and.w	r7, r0, #512	; 0x200
 8005270:	433b      	orrs	r3, r7
 8005272:	69e7      	ldr	r7, [r4, #28]
 8005274:	f007 0738 	and.w	r7, r7, #56	; 0x38
 8005278:	433b      	orrs	r3, r7
 800527a:	6a27      	ldr	r7, [r4, #32]
 800527c:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8005280:	433b      	orrs	r3, r7
 8005282:	f406 5700 	and.w	r7, r6, #8192	; 0x2000
 8005286:	433b      	orrs	r3, r7
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005288:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800528c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800528e:	d111      	bne.n	80052b4 <HAL_SPI_Init+0xba>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005290:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005292:	bb73      	cbnz	r3, 80052f2 <HAL_SPI_Init+0xf8>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005294:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005298:	d90a      	bls.n	80052b0 <HAL_SPI_Init+0xb6>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800529a:	2302      	movs	r3, #2
 800529c:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800529e:	6813      	ldr	r3, [r2, #0]
 80052a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	e005      	b.n	80052b4 <HAL_SPI_Init+0xba>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052a8:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ae:	e7b0      	b.n	8005212 <HAL_SPI_Init+0x18>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80052b0:	2301      	movs	r3, #1
 80052b2:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052b6:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80052b8:	f003 0310 	and.w	r3, r3, #16
 80052bc:	f007 0708 	and.w	r7, r7, #8
 80052c0:	433b      	orrs	r3, r7
 80052c2:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80052c6:	0c00      	lsrs	r0, r0, #16
 80052c8:	f000 0004 	and.w	r0, r0, #4
 80052cc:	430b      	orrs	r3, r1
 80052ce:	4303      	orrs	r3, r0
 80052d0:	432b      	orrs	r3, r5
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052d2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052d6:	6053      	str	r3, [r2, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80052d8:	bf04      	itt	eq
 80052da:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
 80052dc:	6113      	streq	r3, [r2, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052de:	69d3      	ldr	r3, [r2, #28]
 80052e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052e4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052e6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80052e8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ea:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052ec:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80052f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d1de      	bne.n	80052b4 <HAL_SPI_Init+0xba>
 80052f6:	e7d2      	b.n	800529e <HAL_SPI_Init+0xa4>
    return HAL_ERROR;
 80052f8:	2001      	movs	r0, #1
 80052fa:	e7f9      	b.n	80052f0 <HAL_SPI_Init+0xf6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052fc:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052fe:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 8005302:	e7a0      	b.n	8005246 <HAL_SPI_Init+0x4c>

08005304 <HAL_SPI_Transmit>:
{
 8005304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005308:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800530a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800530e:	2b01      	cmp	r3, #1
{
 8005310:	4604      	mov	r4, r0
 8005312:	460d      	mov	r5, r1
 8005314:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8005316:	f000 80c9 	beq.w	80054ac <HAL_SPI_Transmit+0x1a8>
 800531a:	2301      	movs	r3, #1
 800531c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005320:	f7fd fff2 	bl	8003308 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005324:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005328:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800532a:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800532c:	b2d8      	uxtb	r0, r3
 800532e:	f040 80bb 	bne.w	80054a8 <HAL_SPI_Transmit+0x1a4>
  if ((pData == NULL) || (Size == 0U))
 8005332:	2d00      	cmp	r5, #0
 8005334:	d079      	beq.n	800542a <HAL_SPI_Transmit+0x126>
 8005336:	f1b8 0f00 	cmp.w	r8, #0
 800533a:	d076      	beq.n	800542a <HAL_SPI_Transmit+0x126>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800533c:	2303      	movs	r3, #3
 800533e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005342:	2300      	movs	r3, #0
 8005344:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8005346:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 800534a:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800534e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005350:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005354:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005358:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800535a:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800535c:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800535e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 8005362:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005366:	d107      	bne.n	8005378 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 8005368:	6833      	ldr	r3, [r6, #0]
 800536a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800536e:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8005370:	6833      	ldr	r3, [r6, #0]
 8005372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005376:	6033      	str	r3, [r6, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005378:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800537a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800537e:	d107      	bne.n	8005390 <HAL_SPI_Transmit+0x8c>
    SPI_RESET_CRC(hspi);
 8005380:	6833      	ldr	r3, [r6, #0]
 8005382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005386:	6033      	str	r3, [r6, #0]
 8005388:	6833      	ldr	r3, [r6, #0]
 800538a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800538e:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005390:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005392:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005394:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8005396:	bf5e      	ittt	pl
 8005398:	6833      	ldrpl	r3, [r6, #0]
 800539a:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800539e:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053a0:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053a4:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053a6:	d949      	bls.n	800543c <HAL_SPI_Transmit+0x138>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053a8:	b113      	cbz	r3, 80053b0 <HAL_SPI_Transmit+0xac>
 80053aa:	f1b8 0f01 	cmp.w	r8, #1
 80053ae:	d107      	bne.n	80053c0 <HAL_SPI_Transmit+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053b0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80053b4:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b6:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80053b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29b      	uxth	r3, r3
 80053be:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80053c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	b9f3      	cbnz	r3, 8005404 <HAL_SPI_Transmit+0x100>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80053c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053cc:	d104      	bne.n	80053d8 <HAL_SPI_Transmit+0xd4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	6813      	ldr	r3, [r2, #0]
 80053d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053d6:	6013      	str	r3, [r2, #0]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053d8:	464a      	mov	r2, r9
 80053da:	4639      	mov	r1, r7
 80053dc:	4620      	mov	r0, r4
 80053de:	f7ff fee5 	bl	80051ac <SPI_EndRxTxTransaction>
 80053e2:	b108      	cbz	r0, 80053e8 <HAL_SPI_Transmit+0xe4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053e4:	2320      	movs	r3, #32
 80053e6:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053e8:	68a3      	ldr	r3, [r4, #8]
 80053ea:	b933      	cbnz	r3, 80053fa <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ec:	9301      	str	r3, [sp, #4]
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	9201      	str	r2, [sp, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	9301      	str	r3, [sp, #4]
 80053f8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053fa:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80053fc:	3800      	subs	r0, #0
 80053fe:	bf18      	it	ne
 8005400:	2001      	movne	r0, #1
error:
 8005402:	e012      	b.n	800542a <HAL_SPI_Transmit+0x126>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005404:	6822      	ldr	r2, [r4, #0]
 8005406:	6893      	ldr	r3, [r2, #8]
 8005408:	079d      	lsls	r5, r3, #30
 800540a:	d505      	bpl.n	8005418 <HAL_SPI_Transmit+0x114>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800540c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800540e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005412:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005414:	63a3      	str	r3, [r4, #56]	; 0x38
 8005416:	e7cf      	b.n	80053b8 <HAL_SPI_Transmit+0xb4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005418:	f7fd ff76 	bl	8003308 <HAL_GetTick>
 800541c:	eba0 0009 	sub.w	r0, r0, r9
 8005420:	42b8      	cmp	r0, r7
 8005422:	d3cd      	bcc.n	80053c0 <HAL_SPI_Transmit+0xbc>
 8005424:	1c78      	adds	r0, r7, #1
 8005426:	d0cb      	beq.n	80053c0 <HAL_SPI_Transmit+0xbc>
          errorcode = HAL_TIMEOUT;
 8005428:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800542a:	2301      	movs	r3, #1
 800542c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005430:	2300      	movs	r3, #0
 8005432:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005436:	b003      	add	sp, #12
 8005438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800543c:	b113      	cbz	r3, 8005444 <HAL_SPI_Transmit+0x140>
 800543e:	f1b8 0f01 	cmp.w	r8, #1
 8005442:	d113      	bne.n	800546c <HAL_SPI_Transmit+0x168>
      if (hspi->TxXferCount > 1U)
 8005444:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b01      	cmp	r3, #1
 800544a:	d906      	bls.n	800545a <HAL_SPI_Transmit+0x156>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800544c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005450:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005452:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005454:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005456:	3b02      	subs	r3, #2
 8005458:	e006      	b.n	8005468 <HAL_SPI_Transmit+0x164>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800545a:	782b      	ldrb	r3, [r5, #0]
 800545c:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 800545e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005460:	3301      	adds	r3, #1
 8005462:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005464:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005466:	3b01      	subs	r3, #1
 8005468:	b29b      	uxth	r3, r3
 800546a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800546c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0a8      	beq.n	80053c6 <HAL_SPI_Transmit+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005474:	6822      	ldr	r2, [r4, #0]
 8005476:	6893      	ldr	r3, [r2, #8]
 8005478:	0799      	lsls	r1, r3, #30
 800547a:	d50c      	bpl.n	8005496 <HAL_SPI_Transmit+0x192>
        if (hspi->TxXferCount > 1U)
 800547c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800547e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8005480:	b289      	uxth	r1, r1
 8005482:	2901      	cmp	r1, #1
 8005484:	d904      	bls.n	8005490 <HAL_SPI_Transmit+0x18c>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005486:	f833 1b02 	ldrh.w	r1, [r3], #2
 800548a:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800548c:	63a3      	str	r3, [r4, #56]	; 0x38
 800548e:	e7e1      	b.n	8005454 <HAL_SPI_Transmit+0x150>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8005494:	e7e3      	b.n	800545e <HAL_SPI_Transmit+0x15a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005496:	f7fd ff37 	bl	8003308 <HAL_GetTick>
 800549a:	eba0 0009 	sub.w	r0, r0, r9
 800549e:	42b8      	cmp	r0, r7
 80054a0:	d3e4      	bcc.n	800546c <HAL_SPI_Transmit+0x168>
 80054a2:	1c7b      	adds	r3, r7, #1
 80054a4:	d0e2      	beq.n	800546c <HAL_SPI_Transmit+0x168>
 80054a6:	e7bf      	b.n	8005428 <HAL_SPI_Transmit+0x124>
    errorcode = HAL_BUSY;
 80054a8:	2002      	movs	r0, #2
 80054aa:	e7be      	b.n	800542a <HAL_SPI_Transmit+0x126>
  __HAL_LOCK(hspi);
 80054ac:	2002      	movs	r0, #2
 80054ae:	e7c2      	b.n	8005436 <HAL_SPI_Transmit+0x132>

080054b0 <HAL_SPI_TransmitReceive>:
{
 80054b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054b4:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 80054ba:	f88d 300b 	strb.w	r3, [sp, #11]
  __HAL_LOCK(hspi);
 80054be:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80054c2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 80054c4:	2b01      	cmp	r3, #1
{
 80054c6:	4604      	mov	r4, r0
 80054c8:	460e      	mov	r6, r1
 80054ca:	4692      	mov	sl, r2
  __HAL_LOCK(hspi);
 80054cc:	f000 81b0 	beq.w	8005830 <HAL_SPI_TransmitReceive+0x380>
 80054d0:	2301      	movs	r3, #1
 80054d2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80054d6:	f7fd ff17 	bl	8003308 <HAL_GetTick>
  tmp_state           = hspi->State;
 80054da:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80054de:	e9d4 5200 	ldrd	r5, r2, [r4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054e2:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80054e4:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 80054e6:	fa5f fc83 	uxtb.w	ip, r3
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80054ea:	6828      	ldr	r0, [r5, #0]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80054ec:	6869      	ldr	r1, [r5, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054ee:	d00b      	beq.n	8005508 <HAL_SPI_TransmitReceive+0x58>
 80054f0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80054f4:	f040 819a 	bne.w	800582c <HAL_SPI_TransmitReceive+0x37c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054f8:	68a3      	ldr	r3, [r4, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f040 8196 	bne.w	800582c <HAL_SPI_TransmitReceive+0x37c>
 8005500:	f1bc 0f04 	cmp.w	ip, #4
 8005504:	f040 8192 	bne.w	800582c <HAL_SPI_TransmitReceive+0x37c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005508:	2e00      	cmp	r6, #0
 800550a:	f000 8172 	beq.w	80057f2 <HAL_SPI_TransmitReceive+0x342>
 800550e:	f1ba 0f00 	cmp.w	sl, #0
 8005512:	f000 816e 	beq.w	80057f2 <HAL_SPI_TransmitReceive+0x342>
 8005516:	f1b9 0f00 	cmp.w	r9, #0
 800551a:	f000 816a 	beq.w	80057f2 <HAL_SPI_TransmitReceive+0x342>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800551e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005522:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005526:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005528:	bf1c      	itt	ne
 800552a:	2305      	movne	r3, #5
 800552c:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005530:	2300      	movs	r3, #0
 8005532:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8005534:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005538:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 800553a:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800553e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 8005542:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005546:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005548:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800554c:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005550:	d107      	bne.n	8005562 <HAL_SPI_TransmitReceive+0xb2>
    SPI_RESET_CRC(hspi);
 8005552:	682b      	ldr	r3, [r5, #0]
 8005554:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005558:	602b      	str	r3, [r5, #0]
 800555a:	682b      	ldr	r3, [r5, #0]
 800555c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005560:	602b      	str	r3, [r5, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005562:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005566:	686b      	ldr	r3, [r5, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005568:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 800556c:	d802      	bhi.n	8005574 <HAL_SPI_TransmitReceive+0xc4>
 800556e:	f1b9 0f01 	cmp.w	r9, #1
 8005572:	d03a      	beq.n	80055ea <HAL_SPI_TransmitReceive+0x13a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005578:	606b      	str	r3, [r5, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800557a:	682b      	ldr	r3, [r5, #0]
 800557c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800557e:	bf5e      	ittt	pl
 8005580:	682b      	ldrpl	r3, [r5, #0]
 8005582:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8005586:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005588:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 800558c:	d97f      	bls.n	800568e <HAL_SPI_TransmitReceive+0x1de>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800558e:	b112      	cbz	r2, 8005596 <HAL_SPI_TransmitReceive+0xe6>
 8005590:	f1b9 0f01 	cmp.w	r9, #1
 8005594:	d107      	bne.n	80055a6 <HAL_SPI_TransmitReceive+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005596:	f836 3b02 	ldrh.w	r3, [r6], #2
 800559a:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 800559c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800559e:	63a6      	str	r6, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80055a6:	f04f 0901 	mov.w	r9, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80055aa:	f000 0604 	and.w	r6, r0, #4
 80055ae:	f001 0508 	and.w	r5, r1, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	b9db      	cbnz	r3, 80055f0 <HAL_SPI_TransmitReceive+0x140>
 80055b8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80055bc:	b29b      	uxth	r3, r3
 80055be:	b9bb      	cbnz	r3, 80055f0 <HAL_SPI_TransmitReceive+0x140>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80055c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c6:	f040 80fd 	bne.w	80057c4 <HAL_SPI_TransmitReceive+0x314>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80055ca:	2201      	movs	r2, #1
 80055cc:	f8cd 8000 	str.w	r8, [sp]
 80055d0:	463b      	mov	r3, r7
 80055d2:	4611      	mov	r1, r2
 80055d4:	4620      	mov	r0, r4
 80055d6:	f7ff fd21 	bl	800501c <SPI_WaitFlagStateUntilTimeout>
 80055da:	2800      	cmp	r0, #0
 80055dc:	f000 80ea 	beq.w	80057b4 <HAL_SPI_TransmitReceive+0x304>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80055e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80055e2:	f043 0302 	orr.w	r3, r3, #2
 80055e6:	6623      	str	r3, [r4, #96]	; 0x60
 80055e8:	e02a      	b.n	8005640 <HAL_SPI_TransmitReceive+0x190>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055ee:	e7c3      	b.n	8005578 <HAL_SPI_TransmitReceive+0xc8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	0790      	lsls	r0, r2, #30
 80055f6:	d507      	bpl.n	8005608 <HAL_SPI_TransmitReceive+0x158>
 80055f8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80055fa:	b292      	uxth	r2, r2
 80055fc:	b122      	cbz	r2, 8005608 <HAL_SPI_TransmitReceive+0x158>
 80055fe:	f1b9 0f00 	cmp.w	r9, #0
 8005602:	d128      	bne.n	8005656 <HAL_SPI_TransmitReceive+0x1a6>
        txallowed = 0U;
 8005604:	f04f 0900 	mov.w	r9, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005608:	6899      	ldr	r1, [r3, #8]
 800560a:	f011 0101 	ands.w	r1, r1, #1
 800560e:	d00f      	beq.n	8005630 <HAL_SPI_TransmitReceive+0x180>
 8005610:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005614:	b292      	uxth	r2, r2
 8005616:	b15a      	cbz	r2, 8005630 <HAL_SPI_TransmitReceive+0x180>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800561c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005620:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005622:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005626:	3b01      	subs	r3, #1
 8005628:	b29b      	uxth	r3, r3
 800562a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800562e:	4689      	mov	r9, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005630:	f7fd fe6a 	bl	8003308 <HAL_GetTick>
 8005634:	eba0 0008 	sub.w	r0, r0, r8
 8005638:	42b8      	cmp	r0, r7
 800563a:	d3ba      	bcc.n	80055b2 <HAL_SPI_TransmitReceive+0x102>
 800563c:	1c79      	adds	r1, r7, #1
 800563e:	d0b8      	beq.n	80055b2 <HAL_SPI_TransmitReceive+0x102>
          errorcode = HAL_TIMEOUT;
 8005640:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005642:	2301      	movs	r3, #1
 8005644:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005648:	2300      	movs	r3, #0
 800564a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800564e:	4628      	mov	r0, r5
 8005650:	b004      	add	sp, #16
 8005652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005656:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005658:	f832 1b02 	ldrh.w	r1, [r2], #2
 800565c:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800565e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005660:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005662:	3a01      	subs	r2, #1
 8005664:	b292      	uxth	r2, r2
 8005666:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005668:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800566a:	b292      	uxth	r2, r2
 800566c:	2a00      	cmp	r2, #0
 800566e:	d1c9      	bne.n	8005604 <HAL_SPI_TransmitReceive+0x154>
 8005670:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005672:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005676:	d1c5      	bne.n	8005604 <HAL_SPI_TransmitReceive+0x154>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005678:	b926      	cbnz	r6, 8005684 <HAL_SPI_TransmitReceive+0x1d4>
 800567a:	b11d      	cbz	r5, 8005684 <HAL_SPI_TransmitReceive+0x1d4>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005682:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	e7ba      	b.n	8005604 <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800568e:	b112      	cbz	r2, 8005696 <HAL_SPI_TransmitReceive+0x1e6>
 8005690:	f1b9 0f01 	cmp.w	r9, #1
 8005694:	d10b      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x1fe>
      if (hspi->TxXferCount > 1U)
 8005696:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b01      	cmp	r3, #1
 800569c:	d94b      	bls.n	8005736 <HAL_SPI_TransmitReceive+0x286>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800569e:	f836 3b02 	ldrh.w	r3, [r6], #2
 80056a2:	60eb      	str	r3, [r5, #12]
        hspi->TxXferCount -= 2U;
 80056a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a6:	63a6      	str	r6, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056a8:	3b02      	subs	r3, #2
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80056ae:	2501      	movs	r5, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80056b0:	f000 0604 	and.w	r6, r0, #4
 80056b4:	f001 0908 	and.w	r9, r1, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	b92b      	cbnz	r3, 80056ca <HAL_SPI_TransmitReceive+0x21a>
 80056be:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f43f af7b 	beq.w	80055c0 <HAL_SPI_TransmitReceive+0x110>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056ca:	6821      	ldr	r1, [r4, #0]
 80056cc:	688b      	ldr	r3, [r1, #8]
 80056ce:	079a      	lsls	r2, r3, #30
 80056d0:	d505      	bpl.n	80056de <HAL_SPI_TransmitReceive+0x22e>
 80056d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	b113      	cbz	r3, 80056de <HAL_SPI_TransmitReceive+0x22e>
 80056d8:	2d00      	cmp	r5, #0
 80056da:	d134      	bne.n	8005746 <HAL_SPI_TransmitReceive+0x296>
        txallowed = 0U;
 80056dc:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056de:	6821      	ldr	r1, [r4, #0]
 80056e0:	688b      	ldr	r3, [r1, #8]
 80056e2:	f013 0301 	ands.w	r3, r3, #1
 80056e6:	d01d      	beq.n	8005724 <HAL_SPI_TransmitReceive+0x274>
 80056e8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80056ec:	b292      	uxth	r2, r2
 80056ee:	b1ca      	cbz	r2, 8005724 <HAL_SPI_TransmitReceive+0x274>
        if (hspi->RxXferCount > 1U)
 80056f0:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
        if (hspi->RxXferCount > 1U)
 80056f6:	b280      	uxth	r0, r0
 80056f8:	2801      	cmp	r0, #1
 80056fa:	d94f      	bls.n	800579c <HAL_SPI_TransmitReceive+0x2ec>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056fc:	68c8      	ldr	r0, [r1, #12]
 80056fe:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005702:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005704:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005708:	3a02      	subs	r2, #2
 800570a:	b292      	uxth	r2, r2
 800570c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005710:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005714:	b292      	uxth	r2, r2
 8005716:	2a01      	cmp	r2, #1
 8005718:	d803      	bhi.n	8005722 <HAL_SPI_TransmitReceive+0x272>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800571a:	684a      	ldr	r2, [r1, #4]
 800571c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005720:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 8005722:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005724:	f7fd fdf0 	bl	8003308 <HAL_GetTick>
 8005728:	eba0 0008 	sub.w	r0, r0, r8
 800572c:	42b8      	cmp	r0, r7
 800572e:	d3c3      	bcc.n	80056b8 <HAL_SPI_TransmitReceive+0x208>
 8005730:	1c7b      	adds	r3, r7, #1
 8005732:	d0c1      	beq.n	80056b8 <HAL_SPI_TransmitReceive+0x208>
 8005734:	e784      	b.n	8005640 <HAL_SPI_TransmitReceive+0x190>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005736:	7833      	ldrb	r3, [r6, #0]
 8005738:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr++;
 800573a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800573c:	3301      	adds	r3, #1
 800573e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005740:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005742:	3b01      	subs	r3, #1
 8005744:	e7b1      	b.n	80056aa <HAL_SPI_TransmitReceive+0x1fa>
        if (hspi->TxXferCount > 1U)
 8005746:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005748:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 800574a:	b292      	uxth	r2, r2
 800574c:	2a01      	cmp	r2, #1
 800574e:	d91d      	bls.n	800578c <HAL_SPI_TransmitReceive+0x2dc>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005750:	f833 2b02 	ldrh.w	r2, [r3], #2
 8005754:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005756:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005758:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800575a:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800575c:	b29b      	uxth	r3, r3
 800575e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005760:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005762:	6823      	ldr	r3, [r4, #0]
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005764:	b292      	uxth	r2, r2
 8005766:	2a00      	cmp	r2, #0
 8005768:	d1b8      	bne.n	80056dc <HAL_SPI_TransmitReceive+0x22c>
 800576a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800576c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005770:	d1b4      	bne.n	80056dc <HAL_SPI_TransmitReceive+0x22c>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005772:	b936      	cbnz	r6, 8005782 <HAL_SPI_TransmitReceive+0x2d2>
 8005774:	f1b9 0f00 	cmp.w	r9, #0
 8005778:	d003      	beq.n	8005782 <HAL_SPI_TransmitReceive+0x2d2>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005780:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	e7a7      	b.n	80056dc <HAL_SPI_TransmitReceive+0x22c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	730b      	strb	r3, [r1, #12]
          hspi->pTxBuffPtr++;
 8005790:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005792:	3301      	adds	r3, #1
 8005794:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005796:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005798:	3b01      	subs	r3, #1
 800579a:	e7df      	b.n	800575c <HAL_SPI_TransmitReceive+0x2ac>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800579c:	7b09      	ldrb	r1, [r1, #12]
 800579e:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 80057a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80057a2:	3201      	adds	r2, #1
 80057a4:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80057a6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80057aa:	3a01      	subs	r2, #1
 80057ac:	b292      	uxth	r2, r2
 80057ae:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 80057b2:	e7b6      	b.n	8005722 <HAL_SPI_TransmitReceive+0x272>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057b4:	68e3      	ldr	r3, [r4, #12]
      tmpreg = READ_REG(hspi->Instance->DR);
 80057b6:	6825      	ldr	r5, [r4, #0]
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057b8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80057bc:	d11b      	bne.n	80057f6 <HAL_SPI_TransmitReceive+0x346>
      tmpreg = READ_REG(hspi->Instance->DR);
 80057be:	68eb      	ldr	r3, [r5, #12]
 80057c0:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 80057c2:	9b03      	ldr	r3, [sp, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80057c4:	6822      	ldr	r2, [r4, #0]
 80057c6:	6895      	ldr	r5, [r2, #8]
 80057c8:	f015 0510 	ands.w	r5, r5, #16
 80057cc:	d007      	beq.n	80057de <HAL_SPI_TransmitReceive+0x32e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80057ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80057d0:	f043 0302 	orr.w	r3, r3, #2
 80057d4:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80057d6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80057da:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 80057dc:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057de:	4642      	mov	r2, r8
 80057e0:	4639      	mov	r1, r7
 80057e2:	4620      	mov	r0, r4
 80057e4:	f7ff fce2 	bl	80051ac <SPI_EndRxTxTransaction>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	f43f af2a 	beq.w	8005642 <HAL_SPI_TransmitReceive+0x192>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057ee:	2320      	movs	r3, #32
 80057f0:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80057f2:	2501      	movs	r5, #1
 80057f4:	e725      	b.n	8005642 <HAL_SPI_TransmitReceive+0x192>
      tmpreg8 = *ptmpreg8;
 80057f6:	7b2b      	ldrb	r3, [r5, #12]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 80057fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005802:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005804:	2b02      	cmp	r3, #2
 8005806:	d1dd      	bne.n	80057c4 <HAL_SPI_TransmitReceive+0x314>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005808:	2201      	movs	r2, #1
 800580a:	f8cd 8000 	str.w	r8, [sp]
 800580e:	463b      	mov	r3, r7
 8005810:	4611      	mov	r1, r2
 8005812:	4620      	mov	r0, r4
 8005814:	f7ff fc02 	bl	800501c <SPI_WaitFlagStateUntilTimeout>
 8005818:	2800      	cmp	r0, #0
 800581a:	f47f aee1 	bne.w	80055e0 <HAL_SPI_TransmitReceive+0x130>
        tmpreg8 = *ptmpreg8;
 800581e:	7b2b      	ldrb	r3, [r5, #12]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8005826:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800582a:	e7cb      	b.n	80057c4 <HAL_SPI_TransmitReceive+0x314>
    errorcode = HAL_BUSY;
 800582c:	2502      	movs	r5, #2
 800582e:	e708      	b.n	8005642 <HAL_SPI_TransmitReceive+0x192>
  __HAL_LOCK(hspi);
 8005830:	2502      	movs	r5, #2
 8005832:	e70c      	b.n	800564e <HAL_SPI_TransmitReceive+0x19e>

08005834 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005834:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005838:	2b01      	cmp	r3, #1
 800583a:	d117      	bne.n	800586c <HAL_TIM_Base_Start+0x38>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583e:	4a0c      	ldr	r2, [pc, #48]	; (8005870 <HAL_TIM_Base_Start+0x3c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005840:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005844:	6803      	ldr	r3, [r0, #0]
 8005846:	4293      	cmp	r3, r2
 8005848:	d002      	beq.n	8005850 <HAL_TIM_Base_Start+0x1c>
 800584a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584e:	d107      	bne.n	8005860 <HAL_TIM_Base_Start+0x2c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005850:	6899      	ldr	r1, [r3, #8]
 8005852:	4a08      	ldr	r2, [pc, #32]	; (8005874 <HAL_TIM_Base_Start+0x40>)
 8005854:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005856:	2a06      	cmp	r2, #6
 8005858:	d006      	beq.n	8005868 <HAL_TIM_Base_Start+0x34>
 800585a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800585e:	d003      	beq.n	8005868 <HAL_TIM_Base_Start+0x34>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	f042 0201 	orr.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005868:	2000      	movs	r0, #0
}
 800586a:	4770      	bx	lr
    return HAL_ERROR;
 800586c:	2001      	movs	r0, #1
 800586e:	4770      	bx	lr
 8005870:	40012c00 	.word	0x40012c00
 8005874:	00010007 	.word	0x00010007

08005878 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005878:	6803      	ldr	r3, [r0, #0]
 800587a:	6a19      	ldr	r1, [r3, #32]
 800587c:	f241 1211 	movw	r2, #4369	; 0x1111
 8005880:	4211      	tst	r1, r2
 8005882:	d108      	bne.n	8005896 <HAL_TIM_Base_Stop+0x1e>
 8005884:	6a19      	ldr	r1, [r3, #32]
 8005886:	f240 4244 	movw	r2, #1092	; 0x444
 800588a:	4211      	tst	r1, r2
 800588c:	bf02      	ittt	eq
 800588e:	681a      	ldreq	r2, [r3, #0]
 8005890:	f022 0201 	biceq.w	r2, r2, #1
 8005894:	601a      	streq	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005896:	2301      	movs	r3, #1
 8005898:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 800589c:	2000      	movs	r0, #0
 800589e:	4770      	bx	lr

080058a0 <HAL_TIM_PeriodElapsedCallback>:
 80058a0:	4770      	bx	lr

080058a2 <HAL_TIM_OC_DelayElapsedCallback>:
 80058a2:	4770      	bx	lr

080058a4 <HAL_TIM_IC_CaptureCallback>:
 80058a4:	4770      	bx	lr

080058a6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80058a6:	4770      	bx	lr

080058a8 <HAL_TIM_TriggerCallback>:
 80058a8:	4770      	bx	lr

080058aa <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058aa:	6803      	ldr	r3, [r0, #0]
 80058ac:	691a      	ldr	r2, [r3, #16]
 80058ae:	0791      	lsls	r1, r2, #30
{
 80058b0:	b510      	push	{r4, lr}
 80058b2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058b4:	d50f      	bpl.n	80058d6 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	0792      	lsls	r2, r2, #30
 80058ba:	d50c      	bpl.n	80058d6 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058bc:	f06f 0202 	mvn.w	r2, #2
 80058c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058c2:	2201      	movs	r2, #1
 80058c4:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	0799      	lsls	r1, r3, #30
 80058ca:	f000 8085 	beq.w	80059d8 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	f7ff ffe9 	bl	80058a4 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d2:	2300      	movs	r3, #0
 80058d4:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	0752      	lsls	r2, r2, #29
 80058dc:	d510      	bpl.n	8005900 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	0750      	lsls	r0, r2, #29
 80058e2:	d50d      	bpl.n	8005900 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058e4:	f06f 0204 	mvn.w	r2, #4
 80058e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ea:	2202      	movs	r2, #2
 80058ec:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058f6:	d075      	beq.n	80059e4 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80058f8:	f7ff ffd4 	bl	80058a4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fc:	2300      	movs	r3, #0
 80058fe:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	0711      	lsls	r1, r2, #28
 8005906:	d50f      	bpl.n	8005928 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	0712      	lsls	r2, r2, #28
 800590c:	d50c      	bpl.n	8005928 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800590e:	f06f 0208 	mvn.w	r2, #8
 8005912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005914:	2204      	movs	r2, #4
 8005916:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	079b      	lsls	r3, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800591e:	d067      	beq.n	80059f0 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005920:	f7ff ffc0 	bl	80058a4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005924:	2300      	movs	r3, #0
 8005926:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	06d0      	lsls	r0, r2, #27
 800592e:	d510      	bpl.n	8005952 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	06d1      	lsls	r1, r2, #27
 8005934:	d50d      	bpl.n	8005952 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005936:	f06f 0210 	mvn.w	r2, #16
 800593a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800593c:	2208      	movs	r2, #8
 800593e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005946:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005948:	d058      	beq.n	80059fc <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800594a:	f7ff ffab 	bl	80058a4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594e:	2300      	movs	r3, #0
 8005950:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	07d2      	lsls	r2, r2, #31
 8005958:	d508      	bpl.n	800596c <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	07d0      	lsls	r0, r2, #31
 800595e:	d505      	bpl.n	800596c <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005960:	f06f 0201 	mvn.w	r2, #1
 8005964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005966:	4620      	mov	r0, r4
 8005968:	f7ff ff9a 	bl	80058a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	0611      	lsls	r1, r2, #24
 8005972:	d508      	bpl.n	8005986 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	0612      	lsls	r2, r2, #24
 8005978:	d505      	bpl.n	8005986 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800597a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800597e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005980:	4620      	mov	r0, r4
 8005982:	f000 f986 	bl	8005c92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	05d0      	lsls	r0, r2, #23
 800598c:	d508      	bpl.n	80059a0 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	0611      	lsls	r1, r2, #24
 8005992:	d505      	bpl.n	80059a0 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005994:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800599a:	4620      	mov	r0, r4
 800599c:	f000 f97a 	bl	8005c94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	0652      	lsls	r2, r2, #25
 80059a6:	d508      	bpl.n	80059ba <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	0650      	lsls	r0, r2, #25
 80059ac:	d505      	bpl.n	80059ba <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059b4:	4620      	mov	r0, r4
 80059b6:	f7ff ff77 	bl	80058a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	0691      	lsls	r1, r2, #26
 80059c0:	d522      	bpl.n	8005a08 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	0692      	lsls	r2, r2, #26
 80059c6:	d51f      	bpl.n	8005a08 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059c8:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059ce:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80059d4:	f000 b95c 	b.w	8005c90 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d8:	f7ff ff63 	bl	80058a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	4620      	mov	r0, r4
 80059de:	f7ff ff62 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
 80059e2:	e776      	b.n	80058d2 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e4:	f7ff ff5d 	bl	80058a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e8:	4620      	mov	r0, r4
 80059ea:	f7ff ff5c 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
 80059ee:	e785      	b.n	80058fc <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f0:	f7ff ff57 	bl	80058a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f4:	4620      	mov	r0, r4
 80059f6:	f7ff ff56 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
 80059fa:	e793      	b.n	8005924 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fc:	f7ff ff51 	bl	80058a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a00:	4620      	mov	r0, r4
 8005a02:	f7ff ff50 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
 8005a06:	e7a2      	b.n	800594e <HAL_TIM_IRQHandler+0xa4>
}
 8005a08:	bd10      	pop	{r4, pc}
	...

08005a0c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a0c:	4a1a      	ldr	r2, [pc, #104]	; (8005a78 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8005a0e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a10:	4290      	cmp	r0, r2
{
 8005a12:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a14:	d002      	beq.n	8005a1c <TIM_Base_SetConfig+0x10>
 8005a16:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005a1a:	d109      	bne.n	8005a30 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8005a1c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a22:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8005a24:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a28:	d009      	beq.n	8005a3e <TIM_Base_SetConfig+0x32>
 8005a2a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005a2e:	d006      	beq.n	8005a3e <TIM_Base_SetConfig+0x32>
 8005a30:	4a12      	ldr	r2, [pc, #72]	; (8005a7c <TIM_Base_SetConfig+0x70>)
 8005a32:	4290      	cmp	r0, r2
 8005a34:	d003      	beq.n	8005a3e <TIM_Base_SetConfig+0x32>
 8005a36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a3a:	4290      	cmp	r0, r2
 8005a3c:	d103      	bne.n	8005a46 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a3e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a44:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a46:	694a      	ldr	r2, [r1, #20]
 8005a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a4c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005a4e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a50:	688b      	ldr	r3, [r1, #8]
 8005a52:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a54:	680b      	ldr	r3, [r1, #0]
 8005a56:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a58:	4b07      	ldr	r3, [pc, #28]	; (8005a78 <TIM_Base_SetConfig+0x6c>)
 8005a5a:	4298      	cmp	r0, r3
 8005a5c:	d007      	beq.n	8005a6e <TIM_Base_SetConfig+0x62>
 8005a5e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8005a62:	4298      	cmp	r0, r3
 8005a64:	d003      	beq.n	8005a6e <TIM_Base_SetConfig+0x62>
 8005a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a6a:	4298      	cmp	r0, r3
 8005a6c:	d101      	bne.n	8005a72 <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a6e:	690b      	ldr	r3, [r1, #16]
 8005a70:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a72:	2301      	movs	r3, #1
 8005a74:	6143      	str	r3, [r0, #20]
}
 8005a76:	bd10      	pop	{r4, pc}
 8005a78:	40012c00 	.word	0x40012c00
 8005a7c:	40014400 	.word	0x40014400

08005a80 <HAL_TIM_Base_Init>:
{
 8005a80:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005a82:	4604      	mov	r4, r0
 8005a84:	b350      	cbz	r0, 8005adc <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a8e:	b91b      	cbnz	r3, 8005a98 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005a90:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005a94:	f7fd fb04 	bl	80030a0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a98:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a9a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa0:	1d21      	adds	r1, r4, #4
 8005aa2:	f7ff ffb3 	bl	8005a0c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8005aac:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005ab2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005ab6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005aba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005abe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005aca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ace:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005ad2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005ad6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005ada:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005adc:	2001      	movs	r0, #1
 8005ade:	e7fc      	b.n	8005ada <HAL_TIM_Base_Init+0x5a>

08005ae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ae0:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ae2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ae4:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ae6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aea:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005aee:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af0:	6082      	str	r2, [r0, #8]
}
 8005af2:	bd10      	pop	{r4, pc}

08005af4 <HAL_TIM_ConfigClockSource>:
{
 8005af4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005af6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005afa:	2b01      	cmp	r3, #1
{
 8005afc:	4604      	mov	r4, r0
 8005afe:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005b02:	f000 8095 	beq.w	8005c30 <HAL_TIM_ConfigClockSource+0x13c>
  htim->State = HAL_TIM_STATE_BUSY;
 8005b06:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005b0a:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8005b0c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8005b0e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005b12:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b14:	4b47      	ldr	r3, [pc, #284]	; (8005c34 <HAL_TIM_ConfigClockSource+0x140>)
 8005b16:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8005b18:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005b1a:	680b      	ldr	r3, [r1, #0]
 8005b1c:	2b60      	cmp	r3, #96	; 0x60
 8005b1e:	d054      	beq.n	8005bca <HAL_TIM_ConfigClockSource+0xd6>
 8005b20:	d837      	bhi.n	8005b92 <HAL_TIM_ConfigClockSource+0x9e>
 8005b22:	2b40      	cmp	r3, #64	; 0x40
 8005b24:	d06b      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x10a>
 8005b26:	d819      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x68>
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	d00d      	beq.n	8005b48 <HAL_TIM_ConfigClockSource+0x54>
 8005b2c:	d80a      	bhi.n	8005b44 <HAL_TIM_ConfigClockSource+0x50>
 8005b2e:	f033 0110 	bics.w	r1, r3, #16
 8005b32:	d009      	beq.n	8005b48 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8005b34:	2301      	movs	r3, #1
 8005b36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005b40:	4610      	mov	r0, r2
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8005b44:	2b30      	cmp	r3, #48	; 0x30
 8005b46:	d1f5      	bne.n	8005b34 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8005b48:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b4a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005b4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b52:	431a      	orrs	r2, r3
 8005b54:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8005b58:	6082      	str	r2, [r0, #8]
 8005b5a:	e02b      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8005b5c:	2b50      	cmp	r3, #80	; 0x50
 8005b5e:	d1e9      	bne.n	8005b34 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 8005b60:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005b62:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005b64:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b66:	6a03      	ldr	r3, [r0, #32]
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b6e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b70:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b78:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005b7c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005b7e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005b80:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005b82:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b8c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005b90:	e00f      	b.n	8005bb2 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8005b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b96:	d00d      	beq.n	8005bb4 <HAL_TIM_ConfigClockSource+0xc0>
 8005b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b9c:	d00c      	beq.n	8005bb8 <HAL_TIM_ConfigClockSource+0xc4>
 8005b9e:	2b70      	cmp	r3, #112	; 0x70
 8005ba0:	d1c8      	bne.n	8005b34 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8005ba2:	68cb      	ldr	r3, [r1, #12]
 8005ba4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005ba8:	f7ff ff9a 	bl	8005ae0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005bac:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8005bb2:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	e7bd      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8005bb8:	68cb      	ldr	r3, [r1, #12]
 8005bba:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005bbe:	f7ff ff8f 	bl	8005ae0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bc2:	6883      	ldr	r3, [r0, #8]
 8005bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bc8:	e7f3      	b.n	8005bb2 <HAL_TIM_ConfigClockSource+0xbe>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bca:	6a03      	ldr	r3, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8005bcc:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005bce:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd0:	f023 0310 	bic.w	r3, r3, #16
 8005bd4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bd6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005bd8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bda:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005be2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005be6:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005bea:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005bec:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005bee:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bf0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bf8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8005bfc:	e7d9      	b.n	8005bb2 <HAL_TIM_ConfigClockSource+0xbe>
                               sClockSourceConfig->ClockPolarity,
 8005bfe:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005c00:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005c02:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c04:	6a03      	ldr	r3, [r0, #32]
 8005c06:	f023 0301 	bic.w	r3, r3, #1
 8005c0a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c0c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c0e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c16:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005c1a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005c1c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005c1e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005c20:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c22:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c2a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8005c2e:	e7c0      	b.n	8005bb2 <HAL_TIM_ConfigClockSource+0xbe>
  __HAL_LOCK(htim);
 8005c30:	4602      	mov	r2, r0
 8005c32:	e785      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x4c>
 8005c34:	ffce0088 	.word	0xffce0088

08005c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c38:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c3a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005c3e:	2b01      	cmp	r3, #1
{
 8005c40:	4602      	mov	r2, r0
 8005c42:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005c46:	d020      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0x52>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c4c:	4d0f      	ldr	r5, [pc, #60]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 = htim->Instance->CR2;
 8005c4e:	6810      	ldr	r0, [r2, #0]
 8005c50:	6843      	ldr	r3, [r0, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005c52:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c54:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c56:	bf02      	ittt	eq
 8005c58:	684e      	ldreq	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c5a:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c5e:	4333      	orreq	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c60:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c66:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c68:	42a8      	cmp	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8005c6a:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c6c:	d002      	beq.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005c6e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005c72:	d104      	bne.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c74:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c76:	f024 0380 	bic.w	r3, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c7a:	430b      	orrs	r3, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c7c:	6083      	str	r3, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c7e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8005c80:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005c82:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005c86:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
 8005c8c:	40012c00 	.word	0x40012c00

08005c90 <HAL_TIMEx_CommutCallback>:
 8005c90:	4770      	bx	lr

08005c92 <HAL_TIMEx_BreakCallback>:
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIMEx_Break2Callback>:
 8005c94:	4770      	bx	lr
	...

08005c98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c98:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c9a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	e852 3f00 	ldrex	r3, [r2]
 8005ca0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005ca8:	6802      	ldr	r2, [r0, #0]
 8005caa:	2900      	cmp	r1, #0
 8005cac:	d1f5      	bne.n	8005c9a <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cae:	4c0f      	ldr	r4, [pc, #60]	; (8005cec <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	f102 0308 	add.w	r3, r2, #8
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	f102 0c08 	add.w	ip, r2, #8
 8005cbe:	e84c 3100 	strex	r1, r3, [ip]
 8005cc2:	2900      	cmp	r1, #0
 8005cc4:	d1f4      	bne.n	8005cb0 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d107      	bne.n	8005cdc <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ccc:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	e842 3100 	strex	r1, r3, [r2]
 8005cd8:	2900      	cmp	r1, #0
 8005cda:	d1f7      	bne.n	8005ccc <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cdc:	2320      	movs	r3, #32
 8005cde:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ce6:	6743      	str	r3, [r0, #116]	; 0x74
}
 8005ce8:	bd10      	pop	{r4, pc}
 8005cea:	bf00      	nop
 8005cec:	effffffe 	.word	0xeffffffe

08005cf0 <HAL_UART_TxCpltCallback>:
 8005cf0:	4770      	bx	lr

08005cf2 <HAL_UART_ErrorCallback>:
 8005cf2:	4770      	bx	lr

08005cf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cf4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cf6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005cfe:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d02:	f7ff fff6 	bl	8005cf2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d06:	bd08      	pop	{r3, pc}

08005d08 <HAL_UARTEx_RxEventCallback>:
}
 8005d08:	4770      	bx	lr
	...

08005d0c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d0c:	6803      	ldr	r3, [r0, #0]
 8005d0e:	69d9      	ldr	r1, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d10:	681a      	ldr	r2, [r3, #0]
{
 8005d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (errorflags == 0U)
 8005d16:	f640 060f 	movw	r6, #2063	; 0x80f
 8005d1a:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d1c:	689d      	ldr	r5, [r3, #8]
{
 8005d1e:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8005d20:	d110      	bne.n	8005d44 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d22:	068e      	lsls	r6, r1, #26
 8005d24:	f140 8097 	bpl.w	8005e56 <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d28:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d2c:	f005 5780 	and.w	r7, r5, #268435456	; 0x10000000
 8005d30:	433e      	orrs	r6, r7
 8005d32:	f000 8090 	beq.w	8005e56 <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 8005d36:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8085 	beq.w	8005e48 <HAL_UART_IRQHandler+0x13c>
}
 8005d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d42:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d44:	4eab      	ldr	r6, [pc, #684]	; (8005ff4 <HAL_UART_IRQHandler+0x2e8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d46:	48ac      	ldr	r0, [pc, #688]	; (8005ff8 <HAL_UART_IRQHandler+0x2ec>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d48:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d4a:	4010      	ands	r0, r2
 8005d4c:	4330      	orrs	r0, r6
 8005d4e:	f000 8082 	beq.w	8005e56 <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d52:	07cf      	lsls	r7, r1, #31
 8005d54:	d509      	bpl.n	8005d6a <HAL_UART_IRQHandler+0x5e>
 8005d56:	05d0      	lsls	r0, r2, #23
 8005d58:	d507      	bpl.n	8005d6a <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d5e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8005d62:	f040 0001 	orr.w	r0, r0, #1
 8005d66:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d6a:	078f      	lsls	r7, r1, #30
 8005d6c:	d509      	bpl.n	8005d82 <HAL_UART_IRQHandler+0x76>
 8005d6e:	07e8      	lsls	r0, r5, #31
 8005d70:	d507      	bpl.n	8005d82 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d72:	2002      	movs	r0, #2
 8005d74:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d76:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8005d7a:	f040 0004 	orr.w	r0, r0, #4
 8005d7e:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d82:	074f      	lsls	r7, r1, #29
 8005d84:	d509      	bpl.n	8005d9a <HAL_UART_IRQHandler+0x8e>
 8005d86:	07e8      	lsls	r0, r5, #31
 8005d88:	d507      	bpl.n	8005d9a <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d8a:	2004      	movs	r0, #4
 8005d8c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d8e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8005d92:	f040 0002 	orr.w	r0, r0, #2
 8005d96:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d9a:	070f      	lsls	r7, r1, #28
 8005d9c:	d50b      	bpl.n	8005db6 <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d9e:	f002 0020 	and.w	r0, r2, #32
 8005da2:	4330      	orrs	r0, r6
 8005da4:	d007      	beq.n	8005db6 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005da6:	2008      	movs	r0, #8
 8005da8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005daa:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8005dae:	f040 0008 	orr.w	r0, r0, #8
 8005db2:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005db6:	050e      	lsls	r6, r1, #20
 8005db8:	d50a      	bpl.n	8005dd0 <HAL_UART_IRQHandler+0xc4>
 8005dba:	0150      	lsls	r0, r2, #5
 8005dbc:	d508      	bpl.n	8005dd0 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dbe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005dc2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dc4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005dc8:	f043 0320 	orr.w	r3, r3, #32
 8005dcc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dd0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d037      	beq.n	8005e48 <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005dd8:	068b      	lsls	r3, r1, #26
 8005dda:	d509      	bpl.n	8005df0 <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ddc:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005de0:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8005de4:	432a      	orrs	r2, r5
 8005de6:	d003      	beq.n	8005df0 <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 8005de8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005dea:	b10b      	cbz	r3, 8005df0 <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 8005dec:	4620      	mov	r0, r4
 8005dee:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005df0:	6826      	ldr	r6, [r4, #0]
      errorcode = huart->ErrorCode;
 8005df2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005df6:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005df8:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e00:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 8005e04:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e06:	d021      	beq.n	8005e4c <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 8005e08:	f7ff ff46 	bl	8005c98 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0c:	68b3      	ldr	r3, [r6, #8]
 8005e0e:	065f      	lsls	r7, r3, #25
 8005e10:	d517      	bpl.n	8005e42 <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e12:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	f102 0308 	add.w	r3, r2, #8
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	3208      	adds	r2, #8
 8005e22:	e842 3100 	strex	r1, r3, [r2]
 8005e26:	2900      	cmp	r1, #0
 8005e28:	d1f3      	bne.n	8005e12 <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 8005e2a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005e2e:	b140      	cbz	r0, 8005e42 <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e30:	4b72      	ldr	r3, [pc, #456]	; (8005ffc <HAL_UART_IRQHandler+0x2f0>)
 8005e32:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e34:	f7fd fff7 	bl	8003e26 <HAL_DMA_Abort_IT>
 8005e38:	b130      	cbz	r0, 8005e48 <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e3a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005e3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005e40:	e77d      	b.n	8005d3e <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 8005e42:	4620      	mov	r0, r4
 8005e44:	f7ff ff55 	bl	8005cf2 <HAL_UART_ErrorCallback>
}
 8005e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 8005e4c:	f7ff ff51 	bl	8005cf2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e50:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 8005e54:	e7f8      	b.n	8005e48 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e56:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005e58:	2801      	cmp	r0, #1
 8005e5a:	f040 8089 	bne.w	8005f70 <HAL_UART_IRQHandler+0x264>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e5e:	06ce      	lsls	r6, r1, #27
 8005e60:	f140 8086 	bpl.w	8005f70 <HAL_UART_IRQHandler+0x264>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e64:	06d0      	lsls	r0, r2, #27
 8005e66:	f140 8083 	bpl.w	8005f70 <HAL_UART_IRQHandler+0x264>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e6a:	2210      	movs	r2, #16
 8005e6c:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	0651      	lsls	r1, r2, #25
 8005e72:	d54b      	bpl.n	8005f0c <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e74:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005e78:	6811      	ldr	r1, [r2, #0]
 8005e7a:	684a      	ldr	r2, [r1, #4]
 8005e7c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8005e7e:	2a00      	cmp	r2, #0
 8005e80:	d0e2      	beq.n	8005e48 <HAL_UART_IRQHandler+0x13c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e82:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8005e86:	4290      	cmp	r0, r2
 8005e88:	d9de      	bls.n	8005e48 <HAL_UART_IRQHandler+0x13c>
        huart->RxXferCount = nb_remaining_rx_data;
 8005e8a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e8e:	680a      	ldr	r2, [r1, #0]
 8005e90:	0692      	lsls	r2, r2, #26
 8005e92:	d42f      	bmi.n	8005ef4 <HAL_UART_IRQHandler+0x1e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e94:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	e843 2100 	strex	r1, r2, [r3]
 8005ea0:	2900      	cmp	r1, #0
 8005ea2:	d1f7      	bne.n	8005e94 <HAL_UART_IRQHandler+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	f103 0208 	add.w	r2, r3, #8
 8005ea8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eac:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb0:	f103 0008 	add.w	r0, r3, #8
 8005eb4:	e840 2100 	strex	r1, r2, [r0]
 8005eb8:	2900      	cmp	r1, #0
 8005eba:	d1f3      	bne.n	8005ea4 <HAL_UART_IRQHandler+0x198>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	f103 0208 	add.w	r2, r3, #8
 8005ec0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	f103 0008 	add.w	r0, r3, #8
 8005ecc:	e840 2100 	strex	r1, r2, [r0]
 8005ed0:	2900      	cmp	r1, #0
 8005ed2:	d1f3      	bne.n	8005ebc <HAL_UART_IRQHandler+0x1b0>
          huart->RxState = HAL_UART_STATE_READY;
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eda:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	e843 2100 	strex	r1, r2, [r3]
 8005ee8:	2900      	cmp	r1, #0
 8005eea:	d1f7      	bne.n	8005edc <HAL_UART_IRQHandler+0x1d0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005eec:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005ef0:	f7fd ff64 	bl	8003dbc <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ef8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005efc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005f00:	1ac9      	subs	r1, r1, r3
 8005f02:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f04:	4620      	mov	r0, r4
 8005f06:	f7ff feff 	bl	8005d08 <HAL_UARTEx_RxEventCallback>
 8005f0a:	e79d      	b.n	8005e48 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f0c:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8005f10:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f14:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 8005f18:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f1a:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d093      	beq.n	8005e48 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f20:	1a89      	subs	r1, r1, r2
 8005f22:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005f24:	2900      	cmp	r1, #0
 8005f26:	d08f      	beq.n	8005e48 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f30:	e843 2000 	strex	r0, r2, [r3]
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d1f7      	bne.n	8005f28 <HAL_UART_IRQHandler+0x21c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f38:	4d31      	ldr	r5, [pc, #196]	; (8006000 <HAL_UART_IRQHandler+0x2f4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	f103 0208 	add.w	r2, r3, #8
 8005f3e:	e852 2f00 	ldrex	r2, [r2]
 8005f42:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	f103 0608 	add.w	r6, r3, #8
 8005f48:	e846 2000 	strex	r0, r2, [r6]
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d1f4      	bne.n	8005f3a <HAL_UART_IRQHandler+0x22e>
        huart->RxState = HAL_UART_STATE_READY;
 8005f50:	2220      	movs	r2, #32
 8005f52:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8005f56:	6760      	str	r0, [r4, #116]	; 0x74
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f58:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f5e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	e843 2000 	strex	r0, r2, [r3]
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d1f7      	bne.n	8005f5a <HAL_UART_IRQHandler+0x24e>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	6723      	str	r3, [r4, #112]	; 0x70
 8005f6e:	e7c9      	b.n	8005f04 <HAL_UART_IRQHandler+0x1f8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f70:	02cf      	lsls	r7, r1, #11
 8005f72:	d509      	bpl.n	8005f88 <HAL_UART_IRQHandler+0x27c>
 8005f74:	026e      	lsls	r6, r5, #9
 8005f76:	d507      	bpl.n	8005f88 <HAL_UART_IRQHandler+0x27c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8005f7c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f7e:	621a      	str	r2, [r3, #32]
}
 8005f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8005f84:	f000 bae6 	b.w	8006554 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005f88:	0608      	lsls	r0, r1, #24
 8005f8a:	d50b      	bpl.n	8005fa4 <HAL_UART_IRQHandler+0x298>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005f8c:	f002 0080 	and.w	r0, r2, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f90:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
 8005f94:	4328      	orrs	r0, r5
 8005f96:	d005      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x298>
    if (huart->TxISR != NULL)
 8005f98:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f43f af54 	beq.w	8005e48 <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	e6cc      	b.n	8005d3e <HAL_UART_IRQHandler+0x32>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fa4:	064f      	lsls	r7, r1, #25
 8005fa6:	d511      	bpl.n	8005fcc <HAL_UART_IRQHandler+0x2c0>
 8005fa8:	0656      	lsls	r6, r2, #25
 8005faa:	d50f      	bpl.n	8005fcc <HAL_UART_IRQHandler+0x2c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	e843 2100 	strex	r1, r2, [r3]
 8005fb8:	2900      	cmp	r1, #0
 8005fba:	d1f7      	bne.n	8005fac <HAL_UART_IRQHandler+0x2a0>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fbc:	2320      	movs	r3, #32
 8005fbe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fc2:	67a1      	str	r1, [r4, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f7ff fe93 	bl	8005cf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fca:	e73d      	b.n	8005e48 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005fcc:	020d      	lsls	r5, r1, #8
 8005fce:	d506      	bpl.n	8005fde <HAL_UART_IRQHandler+0x2d2>
 8005fd0:	0050      	lsls	r0, r2, #1
 8005fd2:	d504      	bpl.n	8005fde <HAL_UART_IRQHandler+0x2d2>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005fd4:	4620      	mov	r0, r4
}
 8005fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005fda:	f000 babd 	b.w	8006558 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005fde:	01cb      	lsls	r3, r1, #7
 8005fe0:	f57f af32 	bpl.w	8005e48 <HAL_UART_IRQHandler+0x13c>
 8005fe4:	2a00      	cmp	r2, #0
 8005fe6:	f6bf af2f 	bge.w	8005e48 <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005fea:	4620      	mov	r0, r4
}
 8005fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ff0:	f000 bab1 	b.w	8006556 <HAL_UARTEx_RxFifoFullCallback>
 8005ff4:	10000001 	.word	0x10000001
 8005ff8:	04000120 	.word	0x04000120
 8005ffc:	08005cf5 	.word	0x08005cf5
 8006000:	effffffe 	.word	0xeffffffe

08006004 <UART_SetConfig>:
{
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006008:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800600a:	6921      	ldr	r1, [r4, #16]
 800600c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800600e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006010:	69c0      	ldr	r0, [r0, #28]
 8006012:	430a      	orrs	r2, r1
 8006014:	6961      	ldr	r1, [r4, #20]
 8006016:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006018:	497d      	ldr	r1, [pc, #500]	; (8006210 <UART_SetConfig+0x20c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800601a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800601c:	4029      	ands	r1, r5
 800601e:	430a      	orrs	r2, r1
 8006020:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	68e1      	ldr	r1, [r4, #12]
 8006026:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800602a:	430a      	orrs	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800602e:	4a79      	ldr	r2, [pc, #484]	; (8006214 <UART_SetConfig+0x210>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006030:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006032:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8006034:	bf1c      	itt	ne
 8006036:	6a22      	ldrne	r2, [r4, #32]
 8006038:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8006040:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8006044:	430a      	orrs	r2, r1
 8006046:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800604c:	f022 020f 	bic.w	r2, r2, #15
 8006050:	430a      	orrs	r2, r1
 8006052:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006054:	4a70      	ldr	r2, [pc, #448]	; (8006218 <UART_SetConfig+0x214>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d11c      	bne.n	8006094 <UART_SetConfig+0x90>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800605a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800606a:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800606e:	3b01      	subs	r3, #1
 8006070:	2b02      	cmp	r3, #2
 8006072:	f200 80c7 	bhi.w	8006204 <UART_SetConfig+0x200>
 8006076:	4a69      	ldr	r2, [pc, #420]	; (800621c <UART_SetConfig+0x218>)
 8006078:	5c9b      	ldrb	r3, [r3, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800607a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800607e:	f040 8089 	bne.w	8006194 <UART_SetConfig+0x190>
    switch (clocksource)
 8006082:	2b08      	cmp	r3, #8
 8006084:	d824      	bhi.n	80060d0 <UART_SetConfig+0xcc>
 8006086:	e8df f003 	tbb	[pc, r3]
 800608a:	c061      	.short	0xc061
 800608c:	23802383 	.word	0x23802383
 8006090:	2323      	.short	0x2323
 8006092:	65          	.byte	0x65
 8006093:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006094:	4a62      	ldr	r2, [pc, #392]	; (8006220 <UART_SetConfig+0x21c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d109      	bne.n	80060ae <UART_SetConfig+0xaa>
 800609a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609e:	4a61      	ldr	r2, [pc, #388]	; (8006224 <UART_SetConfig+0x220>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f003 030c 	and.w	r3, r3, #12
 80060a8:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80060ac:	e7e4      	b.n	8006078 <UART_SetConfig+0x74>
 80060ae:	4a59      	ldr	r2, [pc, #356]	; (8006214 <UART_SetConfig+0x210>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d10d      	bne.n	80060d0 <UART_SetConfig+0xcc>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80060b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c4:	d01a      	beq.n	80060fc <UART_SetConfig+0xf8>
 80060c6:	d805      	bhi.n	80060d4 <UART_SetConfig+0xd0>
 80060c8:	b153      	cbz	r3, 80060e0 <UART_SetConfig+0xdc>
 80060ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ce:	d012      	beq.n	80060f6 <UART_SetConfig+0xf2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060d0:	2001      	movs	r0, #1
 80060d2:	e009      	b.n	80060e8 <UART_SetConfig+0xe4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060d8:	d1fa      	bne.n	80060d0 <UART_SetConfig+0xcc>
        pclk = (uint32_t) LSE_VALUE;
 80060da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80060de:	e00e      	b.n	80060fe <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e0:	f7fe fc82 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80060e4:	b958      	cbnz	r0, 80060fe <UART_SetConfig+0xfa>
 80060e6:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 80060e8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80060ec:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80060ee:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80060f0:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
}
 80060f4:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 80060f6:	f7fe f87f 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
        break;
 80060fa:	e7f3      	b.n	80060e4 <UART_SetConfig+0xe0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060fc:	484a      	ldr	r0, [pc, #296]	; (8006228 <UART_SetConfig+0x224>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060fe:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006100:	4b4a      	ldr	r3, [pc, #296]	; (800622c <UART_SetConfig+0x228>)
 8006102:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006104:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006108:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800610c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006110:	4299      	cmp	r1, r3
 8006112:	d8dd      	bhi.n	80060d0 <UART_SetConfig+0xcc>
 8006114:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006118:	d8da      	bhi.n	80060d0 <UART_SetConfig+0xcc>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800611a:	2300      	movs	r3, #0
 800611c:	4619      	mov	r1, r3
 800611e:	f7fa fb2d 	bl	800077c <__aeabi_uldivmod>
 8006122:	0209      	lsls	r1, r1, #8
 8006124:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006128:	086b      	lsrs	r3, r5, #1
 800612a:	0200      	lsls	r0, r0, #8
 800612c:	18c0      	adds	r0, r0, r3
 800612e:	462a      	mov	r2, r5
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	f141 0100 	adc.w	r1, r1, #0
 8006138:	f7fa fb20 	bl	800077c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800613c:	4b3c      	ldr	r3, [pc, #240]	; (8006230 <UART_SetConfig+0x22c>)
 800613e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006142:	429a      	cmp	r2, r3
 8006144:	d8c4      	bhi.n	80060d0 <UART_SetConfig+0xcc>
          huart->Instance->BRR = usartdiv;
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	60d8      	str	r0, [r3, #12]
 800614a:	e7cc      	b.n	80060e6 <UART_SetConfig+0xe2>
        pclk = HAL_RCC_GetPCLK1Freq();
 800614c:	f7fe fc4c 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006150:	2800      	cmp	r0, #0
 8006152:	d0c8      	beq.n	80060e6 <UART_SetConfig+0xe2>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006154:	6861      	ldr	r1, [r4, #4]
 8006156:	4b35      	ldr	r3, [pc, #212]	; (800622c <UART_SetConfig+0x228>)
 8006158:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800615a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800615e:	fbb0 f2f2 	udiv	r2, r0, r2
 8006162:	084b      	lsrs	r3, r1, #1
 8006164:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006168:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800616c:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006170:	f1a3 0110 	sub.w	r1, r3, #16
 8006174:	4291      	cmp	r1, r2
 8006176:	d8ab      	bhi.n	80060d0 <UART_SetConfig+0xcc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006178:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800617c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800617e:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006180:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006184:	4313      	orrs	r3, r2
 8006186:	60cb      	str	r3, [r1, #12]
 8006188:	e7ad      	b.n	80060e6 <UART_SetConfig+0xe2>
        pclk = HAL_RCC_GetSysClockFreq();
 800618a:	f7fe f835 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
        break;
 800618e:	e7df      	b.n	8006150 <UART_SetConfig+0x14c>
        pclk = (uint32_t) HSI_VALUE;
 8006190:	4825      	ldr	r0, [pc, #148]	; (8006228 <UART_SetConfig+0x224>)
 8006192:	e7df      	b.n	8006154 <UART_SetConfig+0x150>
    switch (clocksource)
 8006194:	2b08      	cmp	r3, #8
 8006196:	d89b      	bhi.n	80060d0 <UART_SetConfig+0xcc>
 8006198:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <UART_SetConfig+0x19c>)
 800619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619e:	bf00      	nop
 80061a0:	080061e9 	.word	0x080061e9
 80061a4:	080061f5 	.word	0x080061f5
 80061a8:	08006201 	.word	0x08006201
 80061ac:	080060d1 	.word	0x080060d1
 80061b0:	080061fb 	.word	0x080061fb
 80061b4:	080060d1 	.word	0x080060d1
 80061b8:	080060d1 	.word	0x080060d1
 80061bc:	080060d1 	.word	0x080060d1
 80061c0:	080061c5 	.word	0x080061c5
 80061c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061c8:	6863      	ldr	r3, [r4, #4]
 80061ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80061cc:	4a17      	ldr	r2, [pc, #92]	; (800622c <UART_SetConfig+0x228>)
 80061ce:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80061d2:	fbb0 f0f2 	udiv	r0, r0, r2
 80061d6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80061da:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061de:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80061e2:	f1a0 0210 	sub.w	r2, r0, #16
 80061e6:	e7ac      	b.n	8006142 <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e8:	f7fe fbfe 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80061ec:	2800      	cmp	r0, #0
 80061ee:	f43f af7a 	beq.w	80060e6 <UART_SetConfig+0xe2>
 80061f2:	e7e9      	b.n	80061c8 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f4:	f7fe fc08 	bl	8004a08 <HAL_RCC_GetPCLK2Freq>
        break;
 80061f8:	e7f8      	b.n	80061ec <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetSysClockFreq();
 80061fa:	f7fd fffd 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
        break;
 80061fe:	e7f5      	b.n	80061ec <UART_SetConfig+0x1e8>
        pclk = (uint32_t) HSI_VALUE;
 8006200:	4809      	ldr	r0, [pc, #36]	; (8006228 <UART_SetConfig+0x224>)
 8006202:	e7e1      	b.n	80061c8 <UART_SetConfig+0x1c4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006204:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006208:	d1f4      	bne.n	80061f4 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetPCLK2Freq();
 800620a:	f7fe fbfd 	bl	8004a08 <HAL_RCC_GetPCLK2Freq>
        break;
 800620e:	e79f      	b.n	8006150 <UART_SetConfig+0x14c>
 8006210:	cfff69f3 	.word	0xcfff69f3
 8006214:	40008000 	.word	0x40008000
 8006218:	40013800 	.word	0x40013800
 800621c:	0800d09c 	.word	0x0800d09c
 8006220:	40004400 	.word	0x40004400
 8006224:	07f4d09f 	.word	0x07f4d09f
 8006228:	00f42400 	.word	0x00f42400
 800622c:	0800d0ac 	.word	0x0800d0ac
 8006230:	000ffcff 	.word	0x000ffcff

08006234 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006234:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006236:	07da      	lsls	r2, r3, #31
{
 8006238:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800623a:	d506      	bpl.n	800624a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800623c:	6801      	ldr	r1, [r0, #0]
 800623e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006240:	684a      	ldr	r2, [r1, #4]
 8006242:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006246:	4322      	orrs	r2, r4
 8006248:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800624a:	079c      	lsls	r4, r3, #30
 800624c:	d506      	bpl.n	800625c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800624e:	6801      	ldr	r1, [r0, #0]
 8006250:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006252:	684a      	ldr	r2, [r1, #4]
 8006254:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006258:	4322      	orrs	r2, r4
 800625a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800625c:	0759      	lsls	r1, r3, #29
 800625e:	d506      	bpl.n	800626e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006260:	6801      	ldr	r1, [r0, #0]
 8006262:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006264:	684a      	ldr	r2, [r1, #4]
 8006266:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800626a:	4322      	orrs	r2, r4
 800626c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800626e:	071a      	lsls	r2, r3, #28
 8006270:	d506      	bpl.n	8006280 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006272:	6801      	ldr	r1, [r0, #0]
 8006274:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006276:	684a      	ldr	r2, [r1, #4]
 8006278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800627c:	4322      	orrs	r2, r4
 800627e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006280:	06dc      	lsls	r4, r3, #27
 8006282:	d506      	bpl.n	8006292 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006284:	6801      	ldr	r1, [r0, #0]
 8006286:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006288:	688a      	ldr	r2, [r1, #8]
 800628a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800628e:	4322      	orrs	r2, r4
 8006290:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006292:	0699      	lsls	r1, r3, #26
 8006294:	d506      	bpl.n	80062a4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006296:	6801      	ldr	r1, [r0, #0]
 8006298:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800629a:	688a      	ldr	r2, [r1, #8]
 800629c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062a0:	4322      	orrs	r2, r4
 80062a2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062a4:	065a      	lsls	r2, r3, #25
 80062a6:	d50f      	bpl.n	80062c8 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062a8:	6801      	ldr	r1, [r0, #0]
 80062aa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80062ac:	684a      	ldr	r2, [r1, #4]
 80062ae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80062b2:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062b8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062ba:	d105      	bne.n	80062c8 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062bc:	684a      	ldr	r2, [r1, #4]
 80062be:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80062c0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80062c4:	4322      	orrs	r2, r4
 80062c6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062c8:	061b      	lsls	r3, r3, #24
 80062ca:	d506      	bpl.n	80062da <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062cc:	6802      	ldr	r2, [r0, #0]
 80062ce:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80062d0:	6853      	ldr	r3, [r2, #4]
 80062d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80062d6:	430b      	orrs	r3, r1
 80062d8:	6053      	str	r3, [r2, #4]
}
 80062da:	bd10      	pop	{r4, pc}

080062dc <UART_WaitOnFlagUntilTimeout>:
{
 80062dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80062e4:	4604      	mov	r4, r0
 80062e6:	460e      	mov	r6, r1
 80062e8:	4615      	mov	r5, r2
 80062ea:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ec:	6822      	ldr	r2, [r4, #0]
 80062ee:	69d3      	ldr	r3, [r2, #28]
 80062f0:	ea36 0303 	bics.w	r3, r6, r3
 80062f4:	bf0c      	ite	eq
 80062f6:	2301      	moveq	r3, #1
 80062f8:	2300      	movne	r3, #0
 80062fa:	42ab      	cmp	r3, r5
 80062fc:	d001      	beq.n	8006302 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80062fe:	2000      	movs	r0, #0
 8006300:	e027      	b.n	8006352 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8006302:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8006306:	d0f2      	beq.n	80062ee <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006308:	f7fc fffe 	bl	8003308 <HAL_GetTick>
 800630c:	1bc0      	subs	r0, r0, r7
 800630e:	4540      	cmp	r0, r8
 8006310:	6820      	ldr	r0, [r4, #0]
 8006312:	d802      	bhi.n	800631a <UART_WaitOnFlagUntilTimeout+0x3e>
 8006314:	f1b8 0f00 	cmp.w	r8, #0
 8006318:	d11d      	bne.n	8006356 <UART_WaitOnFlagUntilTimeout+0x7a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631a:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800631e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	e840 3200 	strex	r2, r3, [r0]
 8006326:	2a00      	cmp	r2, #0
 8006328:	d1f7      	bne.n	800631a <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	f100 0308 	add.w	r3, r0, #8
 800632e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006332:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	f100 0108 	add.w	r1, r0, #8
 800633a:	e841 3200 	strex	r2, r3, [r1]
 800633e:	2a00      	cmp	r2, #0
 8006340:	d1f3      	bne.n	800632a <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8006342:	2320      	movs	r3, #32
 8006344:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006348:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800634c:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 8006350:	2003      	movs	r0, #3
}
 8006352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006356:	6803      	ldr	r3, [r0, #0]
 8006358:	075a      	lsls	r2, r3, #29
 800635a:	d5c7      	bpl.n	80062ec <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800635c:	69c3      	ldr	r3, [r0, #28]
 800635e:	051b      	lsls	r3, r3, #20
 8006360:	d5c4      	bpl.n	80062ec <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006362:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006366:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800636c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	e840 3200 	strex	r2, r3, [r0]
 8006374:	2a00      	cmp	r2, #0
 8006376:	d1f7      	bne.n	8006368 <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	f100 0308 	add.w	r3, r0, #8
 800637c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006380:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	f100 0108 	add.w	r1, r0, #8
 8006388:	e841 3200 	strex	r2, r3, [r1]
 800638c:	2a00      	cmp	r2, #0
 800638e:	d1f3      	bne.n	8006378 <UART_WaitOnFlagUntilTimeout+0x9c>
          huart->gState = HAL_UART_STATE_READY;
 8006390:	2320      	movs	r3, #32
 8006392:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8006396:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800639a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800639e:	e7d5      	b.n	800634c <UART_WaitOnFlagUntilTimeout+0x70>

080063a0 <HAL_UART_Transmit>:
{
 80063a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063a4:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80063a6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80063aa:	2b20      	cmp	r3, #32
{
 80063ac:	4604      	mov	r4, r0
 80063ae:	460e      	mov	r6, r1
 80063b0:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80063b2:	d143      	bne.n	800643c <HAL_UART_Transmit+0x9c>
    if ((pData == NULL) || (Size == 0U))
 80063b4:	2900      	cmp	r1, #0
 80063b6:	d043      	beq.n	8006440 <HAL_UART_Transmit+0xa0>
 80063b8:	2a00      	cmp	r2, #0
 80063ba:	d041      	beq.n	8006440 <HAL_UART_Transmit+0xa0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063bc:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063be:	2500      	movs	r5, #0
 80063c0:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063c4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    tickstart = HAL_GetTick();
 80063c8:	f7fc ff9e 	bl	8003308 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063cc:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80063ce:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80063d6:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 80063d8:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063dc:	d103      	bne.n	80063e6 <HAL_UART_Transmit+0x46>
 80063de:	6923      	ldr	r3, [r4, #16]
 80063e0:	b90b      	cbnz	r3, 80063e6 <HAL_UART_Transmit+0x46>
 80063e2:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80063e4:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80063e6:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ea:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80063ee:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063f0:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 80063f2:	b942      	cbnz	r2, 8006406 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063f4:	2140      	movs	r1, #64	; 0x40
 80063f6:	4620      	mov	r0, r4
 80063f8:	f7ff ff70 	bl	80062dc <UART_WaitOnFlagUntilTimeout>
 80063fc:	b948      	cbnz	r0, 8006412 <HAL_UART_Transmit+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80063fe:	2320      	movs	r3, #32
 8006400:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_OK;
 8006404:	e006      	b.n	8006414 <HAL_UART_Transmit+0x74>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006406:	2200      	movs	r2, #0
 8006408:	2180      	movs	r1, #128	; 0x80
 800640a:	4620      	mov	r0, r4
 800640c:	f7ff ff66 	bl	80062dc <UART_WaitOnFlagUntilTimeout>
 8006410:	b118      	cbz	r0, 800641a <HAL_UART_Transmit+0x7a>
        return HAL_TIMEOUT;
 8006412:	2003      	movs	r0, #3
}
 8006414:	b003      	add	sp, #12
 8006416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800641a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800641c:	b95e      	cbnz	r6, 8006436 <HAL_UART_Transmit+0x96>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800641e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006422:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006426:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8006428:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800642c:	3a01      	subs	r2, #1
 800642e:	b292      	uxth	r2, r2
 8006430:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 8006434:	e7d7      	b.n	80063e6 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006436:	f816 3b01 	ldrb.w	r3, [r6], #1
 800643a:	e7f4      	b.n	8006426 <HAL_UART_Transmit+0x86>
    return HAL_BUSY;
 800643c:	2002      	movs	r0, #2
 800643e:	e7e9      	b.n	8006414 <HAL_UART_Transmit+0x74>
      return  HAL_ERROR;
 8006440:	2001      	movs	r0, #1
 8006442:	e7e7      	b.n	8006414 <HAL_UART_Transmit+0x74>

08006444 <UART_CheckIdleState>:
{
 8006444:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006446:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006448:	2600      	movs	r6, #0
 800644a:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800644e:	f7fc ff5b 	bl	8003308 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8006458:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800645a:	d419      	bmi.n	8006490 <UART_CheckIdleState+0x4c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	075b      	lsls	r3, r3, #29
 8006462:	d50a      	bpl.n	800647a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006464:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	2200      	movs	r2, #0
 800646c:	462b      	mov	r3, r5
 800646e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006472:	4620      	mov	r0, r4
 8006474:	f7ff ff32 	bl	80062dc <UART_WaitOnFlagUntilTimeout>
 8006478:	b9b0      	cbnz	r0, 80064a8 <UART_CheckIdleState+0x64>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800647a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800647c:	2320      	movs	r3, #32
 800647e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006482:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006486:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648a:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800648c:	6720      	str	r0, [r4, #112]	; 0x70
  return HAL_OK;
 800648e:	e00c      	b.n	80064aa <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	4632      	mov	r2, r6
 8006498:	4603      	mov	r3, r0
 800649a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800649e:	4620      	mov	r0, r4
 80064a0:	f7ff ff1c 	bl	80062dc <UART_WaitOnFlagUntilTimeout>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d0d9      	beq.n	800645c <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80064a8:	2003      	movs	r0, #3
}
 80064aa:	b002      	add	sp, #8
 80064ac:	bd70      	pop	{r4, r5, r6, pc}

080064ae <HAL_UART_Init>:
{
 80064ae:	b510      	push	{r4, lr}
  if (huart == NULL)
 80064b0:	4604      	mov	r4, r0
 80064b2:	b350      	cbz	r0, 800650a <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80064b4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80064b8:	b91b      	cbnz	r3, 80064c2 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80064ba:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 80064be:	f7fc fe4f 	bl	8003160 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80064c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80064c4:	2324      	movs	r3, #36	; 0x24
 80064c6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 80064ca:	6813      	ldr	r3, [r2, #0]
 80064cc:	f023 0301 	bic.w	r3, r3, #1
 80064d0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064d2:	4620      	mov	r0, r4
 80064d4:	f7ff fd96 	bl	8006004 <UART_SetConfig>
 80064d8:	2801      	cmp	r0, #1
 80064da:	d016      	beq.n	800650a <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80064de:	b113      	cbz	r3, 80064e6 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80064e0:	4620      	mov	r0, r4
 80064e2:	f7ff fea7 	bl	8006234 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064f6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80064fe:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006500:	601a      	str	r2, [r3, #0]
}
 8006502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8006506:	f7ff bf9d 	b.w	8006444 <UART_CheckIdleState>
}
 800650a:	2001      	movs	r0, #1
 800650c:	bd10      	pop	{r4, pc}
	...

08006510 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006510:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8006512:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006514:	b92b      	cbnz	r3, 8006522 <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 8006516:	2301      	movs	r3, #1
 8006518:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800651c:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006520:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006522:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006524:	4d09      	ldr	r5, [pc, #36]	; (800654c <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006526:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006528:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800652a:	4c09      	ldr	r4, [pc, #36]	; (8006550 <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800652c:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800652e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006532:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006534:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	fbb3 f3f1 	udiv	r3, r3, r1
 800653c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006540:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006542:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800654a:	e7e7      	b.n	800651c <UARTEx_SetNbDataToProcess+0xc>
 800654c:	0800d0cc 	.word	0x0800d0cc
 8006550:	0800d0c4 	.word	0x0800d0c4

08006554 <HAL_UARTEx_WakeupCallback>:
}
 8006554:	4770      	bx	lr

08006556 <HAL_UARTEx_RxFifoFullCallback>:
 8006556:	4770      	bx	lr

08006558 <HAL_UARTEx_TxFifoEmptyCallback>:
 8006558:	4770      	bx	lr

0800655a <HAL_UARTEx_EnableFifoMode>:
{
 800655a:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 800655c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006560:	2b01      	cmp	r3, #1
{
 8006562:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006564:	d017      	beq.n	8006596 <HAL_UARTEx_EnableFifoMode+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8006566:	2324      	movs	r3, #36	; 0x24
 8006568:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800656c:	6803      	ldr	r3, [r0, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006570:	6819      	ldr	r1, [r3, #0]
 8006572:	f021 0101 	bic.w	r1, r1, #1
 8006576:	6019      	str	r1, [r3, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006578:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800657c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8006580:	6641      	str	r1, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006582:	601a      	str	r2, [r3, #0]
  UARTEx_SetNbDataToProcess(huart);
 8006584:	f7ff ffc4 	bl	8006510 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006588:	2320      	movs	r3, #32
 800658a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800658e:	2000      	movs	r0, #0
 8006590:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006594:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006596:	2002      	movs	r0, #2
 8006598:	e7fc      	b.n	8006594 <HAL_UARTEx_EnableFifoMode+0x3a>

0800659a <HAL_UARTEx_SetTxFifoThreshold>:
{
 800659a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800659c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80065a0:	2b01      	cmp	r3, #1
{
 80065a2:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80065a4:	d017      	beq.n	80065d6 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065a6:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80065a8:	2324      	movs	r3, #36	; 0x24
 80065aa:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065ae:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80065b0:	682b      	ldr	r3, [r5, #0]
 80065b2:	f023 0301 	bic.w	r3, r3, #1
 80065b6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065b8:	68ab      	ldr	r3, [r5, #8]
 80065ba:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80065be:	4319      	orrs	r1, r3
 80065c0:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 80065c2:	f7ff ffa5 	bl	8006510 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80065c6:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065c8:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80065ca:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80065ce:	2000      	movs	r0, #0
 80065d0:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80065d4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80065d6:	2002      	movs	r0, #2
 80065d8:	e7fc      	b.n	80065d4 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

080065da <HAL_UARTEx_SetRxFifoThreshold>:
{
 80065da:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80065dc:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80065e0:	2b01      	cmp	r3, #1
{
 80065e2:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80065e4:	d017      	beq.n	8006616 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065e6:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80065e8:	2324      	movs	r3, #36	; 0x24
 80065ea:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065ee:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	f023 0301 	bic.w	r3, r3, #1
 80065f6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065f8:	68ab      	ldr	r3, [r5, #8]
 80065fa:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80065fe:	4319      	orrs	r1, r3
 8006600:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006602:	f7ff ff85 	bl	8006510 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006606:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006608:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800660a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800660e:	2000      	movs	r0, #0
 8006610:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006614:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8006616:	2002      	movs	r0, #2
 8006618:	e7fc      	b.n	8006614 <HAL_UARTEx_SetRxFifoThreshold+0x3a>
	...

0800661c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800661c:	b508      	push	{r3, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800661e:	4906      	ldr	r1, [pc, #24]	; (8006638 <MX_FATFS_Init+0x1c>)
 8006620:	4806      	ldr	r0, [pc, #24]	; (800663c <MX_FATFS_Init+0x20>)
 8006622:	f000 fb59 	bl	8006cd8 <FATFS_LinkDriver>
 8006626:	b918      	cbnz	r0, 8006630 <MX_FATFS_Init+0x14>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8006628:	4b05      	ldr	r3, [pc, #20]	; (8006640 <MX_FATFS_Init+0x24>)
 800662a:	2201      	movs	r2, #1
 800662c:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 800662e:	bd08      	pop	{r3, pc}
    return APP_ERROR;
 8006630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006634:	e7fb      	b.n	800662e <MX_FATFS_Init+0x12>
 8006636:	bf00      	nop
 8006638:	2000ede1 	.word	0x2000ede1
 800663c:	20000084 	.word	0x20000084
 8006640:	2000ede0 	.word	0x2000ede0

08006644 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006644:	f000 b906 	b.w	8006854 <USER_SPI_initialize>

08006648 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8006648:	f000 b9a4 	b.w	8006994 <USER_SPI_status>

0800664c <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800664c:	f000 b9ac 	b.w	80069a8 <USER_SPI_read>

08006650 <USER_write>:
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8006650:	f000 b9ea 	b.w	8006a28 <USER_SPI_write>

08006654 <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006654:	f000 ba38 	b.w	8006ac8 <USER_SPI_ioctl>

08006658 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006658:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800665a:	2332      	movs	r3, #50	; 0x32
{
 800665c:	f88d 000f 	strb.w	r0, [sp, #15]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	f10d 0217 	add.w	r2, sp, #23
 8006666:	2301      	movs	r3, #1
 8006668:	f10d 010f 	add.w	r1, sp, #15
 800666c:	4803      	ldr	r0, [pc, #12]	; (800667c <xchg_spi+0x24>)
 800666e:	f7fe ff1f 	bl	80054b0 <HAL_SPI_TransmitReceive>
    return rxDat;
}
 8006672:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8006676:	b007      	add	sp, #28
 8006678:	f85d fb04 	ldr.w	pc, [sp], #4
 800667c:	2000ec38 	.word	0x2000ec38

08006680 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	4605      	mov	r5, r0
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006684:	f7fc fe40 	bl	8003308 <HAL_GetTick>
 8006688:	4606      	mov	r6, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
	do {
		d = xchg_spi(0xFF);
 800668a:	20ff      	movs	r0, #255	; 0xff
 800668c:	f7ff ffe4 	bl	8006658 <xchg_spi>
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006690:	28ff      	cmp	r0, #255	; 0xff
		d = xchg_spi(0xFF);
 8006692:	4604      	mov	r4, r0
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006694:	d004      	beq.n	80066a0 <wait_ready+0x20>
 8006696:	f7fc fe37 	bl	8003308 <HAL_GetTick>
 800669a:	1b83      	subs	r3, r0, r6
 800669c:	42ab      	cmp	r3, r5
 800669e:	d3f4      	bcc.n	800668a <wait_ready+0xa>

	return (d == 0xFF) ? 1 : 0;
}
 80066a0:	f1a4 03ff 	sub.w	r3, r4, #255	; 0xff
 80066a4:	4258      	negs	r0, r3
 80066a6:	4158      	adcs	r0, r3
 80066a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080066ac <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80066ac:	b508      	push	{r3, lr}
	CS_HIGH();		/* Set CS# high */
 80066ae:	4805      	ldr	r0, [pc, #20]	; (80066c4 <despiselect+0x18>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066b6:	f7fd fcef 	bl	8004098 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */

}
 80066ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80066be:	20ff      	movs	r0, #255	; 0xff
 80066c0:	f7ff bfca 	b.w	8006658 <xchg_spi>
 80066c4:	48000400 	.word	0x48000400

080066c8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80066c8:	b510      	push	{r4, lr}
	CS_LOW();		/* Set CS# low */
 80066ca:	2200      	movs	r2, #0
 80066cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066d0:	4808      	ldr	r0, [pc, #32]	; (80066f4 <spiselect+0x2c>)
 80066d2:	f7fd fce1 	bl	8004098 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80066d6:	20ff      	movs	r0, #255	; 0xff
 80066d8:	f7ff ffbe 	bl	8006658 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80066dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80066e0:	f7ff ffce 	bl	8006680 <wait_ready>
 80066e4:	4604      	mov	r4, r0
 80066e6:	b918      	cbnz	r0, 80066f0 <spiselect+0x28>

	despiselect();
 80066e8:	f7ff ffe0 	bl	80066ac <despiselect>
	return 0;	/* Timeout */
}
 80066ec:	4620      	mov	r0, r4
 80066ee:	bd10      	pop	{r4, pc}
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80066f0:	2401      	movs	r4, #1
 80066f2:	e7fb      	b.n	80066ec <spiselect+0x24>
 80066f4:	48000400 	.word	0x48000400

080066f8 <send_cmd>:
)
{
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80066f8:	0602      	lsls	r2, r0, #24
{
 80066fa:	b538      	push	{r3, r4, r5, lr}
 80066fc:	4604      	mov	r4, r0
 80066fe:	460d      	mov	r5, r1
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006700:	d507      	bpl.n	8006712 <send_cmd+0x1a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
 8006702:	2100      	movs	r1, #0
 8006704:	2037      	movs	r0, #55	; 0x37
 8006706:	f7ff fff7 	bl	80066f8 <send_cmd>
		if (res > 1) return res;
 800670a:	2801      	cmp	r0, #1
 800670c:	d82b      	bhi.n	8006766 <send_cmd+0x6e>
		cmd &= 0x7F;
 800670e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006712:	2c0c      	cmp	r4, #12
 8006714:	d128      	bne.n	8006768 <send_cmd+0x70>
		despiselect();
		if (!spiselect()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006716:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 800671a:	f7ff ff9d 	bl	8006658 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800671e:	0e28      	lsrs	r0, r5, #24
 8006720:	f7ff ff9a 	bl	8006658 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006724:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8006728:	f7ff ff96 	bl	8006658 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800672c:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8006730:	f7ff ff92 	bl	8006658 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006734:	b2e8      	uxtb	r0, r5
 8006736:	f7ff ff8f 	bl	8006658 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800673a:	b1ec      	cbz	r4, 8006778 <send_cmd+0x80>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800673c:	2c08      	cmp	r4, #8
 800673e:	bf14      	ite	ne
 8006740:	2001      	movne	r0, #1
 8006742:	2087      	moveq	r0, #135	; 0x87
	xchg_spi(n);
 8006744:	f7ff ff88 	bl	8006658 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006748:	2c0c      	cmp	r4, #12
 800674a:	d102      	bne.n	8006752 <send_cmd+0x5a>
 800674c:	20ff      	movs	r0, #255	; 0xff
 800674e:	f7ff ff83 	bl	8006658 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006752:	240a      	movs	r4, #10
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
 8006754:	20ff      	movs	r0, #255	; 0xff
 8006756:	f7ff ff7f 	bl	8006658 <xchg_spi>
	} while ((res & 0x80) && --n);
 800675a:	0603      	lsls	r3, r0, #24
 800675c:	d503      	bpl.n	8006766 <send_cmd+0x6e>
 800675e:	3c01      	subs	r4, #1
 8006760:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8006764:	d1f6      	bne.n	8006754 <send_cmd+0x5c>

	return res;							/* Return received response */
}
 8006766:	bd38      	pop	{r3, r4, r5, pc}
		despiselect();
 8006768:	f7ff ffa0 	bl	80066ac <despiselect>
		if (!spiselect()) return 0xFF;
 800676c:	f7ff ffac 	bl	80066c8 <spiselect>
 8006770:	2800      	cmp	r0, #0
 8006772:	d1d0      	bne.n	8006716 <send_cmd+0x1e>
 8006774:	20ff      	movs	r0, #255	; 0xff
 8006776:	e7f6      	b.n	8006766 <send_cmd+0x6e>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006778:	2095      	movs	r0, #149	; 0x95
 800677a:	e7e3      	b.n	8006744 <send_cmd+0x4c>

0800677c <xmit_datablock>:
{
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	4605      	mov	r5, r0
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
{
 8006784:	460c      	mov	r4, r1
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006786:	f7ff ff7b 	bl	8006680 <wait_ready>
 800678a:	b1d0      	cbz	r0, 80067c2 <xmit_datablock+0x46>
	xchg_spi(token);					/* Send token */
 800678c:	4620      	mov	r0, r4
 800678e:	f7ff ff63 	bl	8006658 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006792:	2cfd      	cmp	r4, #253	; 0xfd
 8006794:	d016      	beq.n	80067c4 <xmit_datablock+0x48>
	HAL_SPI_Transmit(&SD_SPI_HANDLE, (BYTE*)buff, btx, HAL_MAX_DELAY);
 8006796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800679a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800679e:	4629      	mov	r1, r5
 80067a0:	4809      	ldr	r0, [pc, #36]	; (80067c8 <xmit_datablock+0x4c>)
 80067a2:	f7fe fdaf 	bl	8005304 <HAL_SPI_Transmit>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80067a6:	20ff      	movs	r0, #255	; 0xff
 80067a8:	f7ff ff56 	bl	8006658 <xchg_spi>
 80067ac:	20ff      	movs	r0, #255	; 0xff
 80067ae:	f7ff ff53 	bl	8006658 <xchg_spi>
		resp = xchg_spi(0xFF);				/* Receive data resp */
 80067b2:	20ff      	movs	r0, #255	; 0xff
 80067b4:	f7ff ff50 	bl	8006658 <xchg_spi>
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80067b8:	f000 001f 	and.w	r0, r0, #31
 80067bc:	1f43      	subs	r3, r0, #5
 80067be:	4258      	negs	r0, r3
 80067c0:	4158      	adcs	r0, r3
}
 80067c2:	bd38      	pop	{r3, r4, r5, pc}
	return 1;
 80067c4:	2001      	movs	r0, #1
 80067c6:	e7fc      	b.n	80067c2 <xmit_datablock+0x46>
 80067c8:	2000ec38 	.word	0x2000ec38

080067cc <SPI_Timer_On>:
void SPI_Timer_On(uint32_t waitTicks) {
 80067cc:	b510      	push	{r4, lr}
 80067ce:	4604      	mov	r4, r0
    spiTimerTickStart = HAL_GetTick();
 80067d0:	f7fc fd9a 	bl	8003308 <HAL_GetTick>
 80067d4:	4b02      	ldr	r3, [pc, #8]	; (80067e0 <SPI_Timer_On+0x14>)
 80067d6:	6018      	str	r0, [r3, #0]
    spiTimerTickDelay = waitTicks;
 80067d8:	4b02      	ldr	r3, [pc, #8]	; (80067e4 <SPI_Timer_On+0x18>)
 80067da:	601c      	str	r4, [r3, #0]
}
 80067dc:	bd10      	pop	{r4, pc}
 80067de:	bf00      	nop
 80067e0:	2000edec 	.word	0x2000edec
 80067e4:	2000ede8 	.word	0x2000ede8

080067e8 <SPI_Timer_Status>:
uint8_t SPI_Timer_Status() {
 80067e8:	b508      	push	{r3, lr}
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80067ea:	f7fc fd8d 	bl	8003308 <HAL_GetTick>
 80067ee:	4b05      	ldr	r3, [pc, #20]	; (8006804 <SPI_Timer_Status+0x1c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	1ac0      	subs	r0, r0, r3
 80067f4:	4b04      	ldr	r3, [pc, #16]	; (8006808 <SPI_Timer_Status+0x20>)
 80067f6:	681b      	ldr	r3, [r3, #0]
}
 80067f8:	4298      	cmp	r0, r3
 80067fa:	bf2c      	ite	cs
 80067fc:	2000      	movcs	r0, #0
 80067fe:	2001      	movcc	r0, #1
 8006800:	bd08      	pop	{r3, pc}
 8006802:	bf00      	nop
 8006804:	2000edec 	.word	0x2000edec
 8006808:	2000ede8 	.word	0x2000ede8

0800680c <rcvr_datablock>:
{
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4604      	mov	r4, r0
	SPI_Timer_On(200);
 8006810:	20c8      	movs	r0, #200	; 0xc8
{
 8006812:	460d      	mov	r5, r1
	SPI_Timer_On(200);
 8006814:	f7ff ffda 	bl	80067cc <SPI_Timer_On>
		token = xchg_spi(0xFF);
 8006818:	20ff      	movs	r0, #255	; 0xff
 800681a:	f7ff ff1d 	bl	8006658 <xchg_spi>
	} while ((token == 0xFF) && SPI_Timer_Status());
 800681e:	28ff      	cmp	r0, #255	; 0xff
 8006820:	d105      	bne.n	800682e <rcvr_datablock+0x22>
 8006822:	f7ff ffe1 	bl	80067e8 <SPI_Timer_Status>
 8006826:	2800      	cmp	r0, #0
 8006828:	d1f6      	bne.n	8006818 <rcvr_datablock+0xc>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800682a:	2000      	movs	r0, #0
}
 800682c:	bd38      	pop	{r3, r4, r5, pc}
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800682e:	28fe      	cmp	r0, #254	; 0xfe
 8006830:	d1fb      	bne.n	800682a <rcvr_datablock+0x1e>
 8006832:	4425      	add	r5, r4
		*(buff+i) = xchg_spi(0xFF);
 8006834:	20ff      	movs	r0, #255	; 0xff
 8006836:	f7ff ff0f 	bl	8006658 <xchg_spi>
 800683a:	f804 0b01 	strb.w	r0, [r4], #1
	for(UINT i=0; i<btr; i++) {
 800683e:	42a5      	cmp	r5, r4
 8006840:	d1f8      	bne.n	8006834 <rcvr_datablock+0x28>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006842:	20ff      	movs	r0, #255	; 0xff
 8006844:	f7ff ff08 	bl	8006658 <xchg_spi>
 8006848:	20ff      	movs	r0, #255	; 0xff
 800684a:	f7ff ff05 	bl	8006658 <xchg_spi>
 800684e:	2001      	movs	r0, #1
 8006850:	e7ec      	b.n	800682c <rcvr_datablock+0x20>
	...

08006854 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006854:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006858:	2800      	cmp	r0, #0
 800685a:	f040 8093 	bne.w	8006984 <USER_SPI_initialize+0x130>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800685e:	4d4a      	ldr	r5, [pc, #296]	; (8006988 <USER_SPI_initialize+0x134>)
 8006860:	782b      	ldrb	r3, [r5, #0]
 8006862:	079b      	lsls	r3, r3, #30
 8006864:	d504      	bpl.n	8006870 <USER_SPI_initialize+0x1c>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
	} else {			/* Failed */
		Stat = STA_NOINIT;
	}

	return Stat;
 8006866:	7828      	ldrb	r0, [r5, #0]
 8006868:	b2c0      	uxtb	r0, r0
}
 800686a:	b002      	add	sp, #8
 800686c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FCLK_SLOW();
 8006870:	4f46      	ldr	r7, [pc, #280]	; (800698c <USER_SPI_initialize+0x138>)
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	6813      	ldr	r3, [r2, #0]
 8006876:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800687a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	240a      	movs	r4, #10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006882:	20ff      	movs	r0, #255	; 0xff
 8006884:	3c01      	subs	r4, #1
 8006886:	f7ff fee7 	bl	8006658 <xchg_spi>
 800688a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800688e:	d1f8      	bne.n	8006882 <USER_SPI_initialize+0x2e>
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006890:	4621      	mov	r1, r4
 8006892:	4620      	mov	r0, r4
 8006894:	f7ff ff30 	bl	80066f8 <send_cmd>
 8006898:	2801      	cmp	r0, #1
 800689a:	4606      	mov	r6, r0
 800689c:	d16e      	bne.n	800697c <USER_SPI_initialize+0x128>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800689e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068a2:	f7ff ff93 	bl	80067cc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80068a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80068aa:	2008      	movs	r0, #8
 80068ac:	f7ff ff24 	bl	80066f8 <send_cmd>
 80068b0:	2801      	cmp	r0, #1
 80068b2:	d147      	bne.n	8006944 <USER_SPI_initialize+0xf0>
 80068b4:	ae01      	add	r6, sp, #4
 80068b6:	46b0      	mov	r8, r6
 80068b8:	2404      	movs	r4, #4
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80068ba:	20ff      	movs	r0, #255	; 0xff
 80068bc:	f7ff fecc 	bl	8006658 <xchg_spi>
 80068c0:	3c01      	subs	r4, #1
 80068c2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80068c6:	f808 0b01 	strb.w	r0, [r8], #1
 80068ca:	d1f6      	bne.n	80068ba <USER_SPI_initialize+0x66>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80068cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d153      	bne.n	800697c <USER_SPI_initialize+0x128>
 80068d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80068d8:	2baa      	cmp	r3, #170	; 0xaa
 80068da:	d14f      	bne.n	800697c <USER_SPI_initialize+0x128>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80068dc:	f7ff ff84 	bl	80067e8 <SPI_Timer_Status>
 80068e0:	b130      	cbz	r0, 80068f0 <USER_SPI_initialize+0x9c>
 80068e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80068e6:	20a9      	movs	r0, #169	; 0xa9
 80068e8:	f7ff ff06 	bl	80066f8 <send_cmd>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d1f5      	bne.n	80068dc <USER_SPI_initialize+0x88>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80068f0:	f7ff ff7a 	bl	80067e8 <SPI_Timer_Status>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d041      	beq.n	800697c <USER_SPI_initialize+0x128>
 80068f8:	2100      	movs	r1, #0
 80068fa:	203a      	movs	r0, #58	; 0x3a
 80068fc:	f7ff fefc 	bl	80066f8 <send_cmd>
 8006900:	2800      	cmp	r0, #0
 8006902:	d13b      	bne.n	800697c <USER_SPI_initialize+0x128>
 8006904:	2404      	movs	r4, #4
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006906:	20ff      	movs	r0, #255	; 0xff
 8006908:	f7ff fea6 	bl	8006658 <xchg_spi>
 800690c:	3c01      	subs	r4, #1
 800690e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8006912:	f806 0b01 	strb.w	r0, [r6], #1
 8006916:	d1f6      	bne.n	8006906 <USER_SPI_initialize+0xb2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006918:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800691c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006920:	bf14      	ite	ne
 8006922:	240c      	movne	r4, #12
 8006924:	2404      	moveq	r4, #4
	CardType = ty;	/* Card type */
 8006926:	4b1a      	ldr	r3, [pc, #104]	; (8006990 <USER_SPI_initialize+0x13c>)
 8006928:	701c      	strb	r4, [r3, #0]
	despiselect();
 800692a:	f7ff febf 	bl	80066ac <despiselect>
	if (ty) {			/* OK */
 800692e:	b33c      	cbz	r4, 8006980 <USER_SPI_initialize+0x12c>
		FCLK_FAST();			/* Set fast clock */
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	6813      	ldr	r3, [r2, #0]
 8006934:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006938:	6013      	str	r3, [r2, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800693a:	782b      	ldrb	r3, [r5, #0]
 800693c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		Stat = STA_NOINIT;
 8006940:	702b      	strb	r3, [r5, #0]
 8006942:	e790      	b.n	8006866 <USER_SPI_initialize+0x12>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006944:	4621      	mov	r1, r4
 8006946:	20a9      	movs	r0, #169	; 0xa9
 8006948:	f7ff fed6 	bl	80066f8 <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800694c:	2802      	cmp	r0, #2
 800694e:	bf36      	itet	cc
 8006950:	2402      	movcc	r4, #2
 8006952:	2401      	movcs	r4, #1
 8006954:	26a9      	movcc	r6, #169	; 0xa9
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006956:	f7ff ff47 	bl	80067e8 <SPI_Timer_Status>
 800695a:	b128      	cbz	r0, 8006968 <USER_SPI_initialize+0x114>
 800695c:	2100      	movs	r1, #0
 800695e:	4630      	mov	r0, r6
 8006960:	f7ff feca 	bl	80066f8 <send_cmd>
 8006964:	2800      	cmp	r0, #0
 8006966:	d1f6      	bne.n	8006956 <USER_SPI_initialize+0x102>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006968:	f7ff ff3e 	bl	80067e8 <SPI_Timer_Status>
 800696c:	b130      	cbz	r0, 800697c <USER_SPI_initialize+0x128>
 800696e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006972:	2010      	movs	r0, #16
 8006974:	f7ff fec0 	bl	80066f8 <send_cmd>
 8006978:	2800      	cmp	r0, #0
 800697a:	d0d4      	beq.n	8006926 <USER_SPI_initialize+0xd2>
				ty = 0;
 800697c:	2400      	movs	r4, #0
 800697e:	e7d2      	b.n	8006926 <USER_SPI_initialize+0xd2>
		Stat = STA_NOINIT;
 8006980:	2301      	movs	r3, #1
 8006982:	e7dd      	b.n	8006940 <USER_SPI_initialize+0xec>
	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006984:	2001      	movs	r0, #1
 8006986:	e770      	b.n	800686a <USER_SPI_initialize+0x16>
 8006988:	20000098 	.word	0x20000098
 800698c:	2000ec38 	.word	0x2000ec38
 8006990:	2000ede5 	.word	0x2000ede5

08006994 <USER_SPI_status>:

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006994:	b918      	cbnz	r0, 800699e <USER_SPI_status+0xa>

	return Stat;	/* Return disk status */
 8006996:	4b03      	ldr	r3, [pc, #12]	; (80069a4 <USER_SPI_status+0x10>)
 8006998:	7818      	ldrb	r0, [r3, #0]
 800699a:	b2c0      	uxtb	r0, r0
 800699c:	4770      	bx	lr
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800699e:	2001      	movs	r0, #1
}
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	20000098 	.word	0x20000098

080069a8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	460d      	mov	r5, r1
 80069ac:	461c      	mov	r4, r3
 80069ae:	4611      	mov	r1, r2
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80069b0:	bb88      	cbnz	r0, 8006a16 <USER_SPI_read+0x6e>
 80069b2:	b383      	cbz	r3, 8006a16 <USER_SPI_read+0x6e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80069b4:	4b1a      	ldr	r3, [pc, #104]	; (8006a20 <USER_SPI_read+0x78>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	07da      	lsls	r2, r3, #31
 80069ba:	d42e      	bmi.n	8006a1a <USER_SPI_read+0x72>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80069bc:	4b19      	ldr	r3, [pc, #100]	; (8006a24 <USER_SPI_read+0x7c>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	071b      	lsls	r3, r3, #28
 80069c2:	bf58      	it	pl
 80069c4:	0249      	lslpl	r1, r1, #9

	if (count == 1) {	/* Single sector read */
 80069c6:	2c01      	cmp	r4, #1
 80069c8:	d111      	bne.n	80069ee <USER_SPI_read+0x46>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80069ca:	2011      	movs	r0, #17
 80069cc:	f7ff fe94 	bl	80066f8 <send_cmd>
 80069d0:	b938      	cbnz	r0, 80069e2 <USER_SPI_read+0x3a>
			&& rcvr_datablock(buff, 512)) {
 80069d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069d6:	4628      	mov	r0, r5
 80069d8:	f7ff ff18 	bl	800680c <rcvr_datablock>
 80069dc:	fab0 f480 	clz	r4, r0
 80069e0:	0964      	lsrs	r4, r4, #5
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	despiselect();
 80069e2:	f7ff fe63 	bl	80066ac <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80069e6:	1e20      	subs	r0, r4, #0
 80069e8:	bf18      	it	ne
 80069ea:	2001      	movne	r0, #1
}
 80069ec:	bd38      	pop	{r3, r4, r5, pc}
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80069ee:	2012      	movs	r0, #18
 80069f0:	f7ff fe82 	bl	80066f8 <send_cmd>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d1f4      	bne.n	80069e2 <USER_SPI_read+0x3a>
				if (!rcvr_datablock(buff, 512)) break;
 80069f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069fc:	4628      	mov	r0, r5
 80069fe:	f7ff ff05 	bl	800680c <rcvr_datablock>
 8006a02:	b118      	cbz	r0, 8006a0c <USER_SPI_read+0x64>
			} while (--count);
 8006a04:	3c01      	subs	r4, #1
				buff += 512;
 8006a06:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8006a0a:	d1f5      	bne.n	80069f8 <USER_SPI_read+0x50>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	200c      	movs	r0, #12
 8006a10:	f7ff fe72 	bl	80066f8 <send_cmd>
 8006a14:	e7e5      	b.n	80069e2 <USER_SPI_read+0x3a>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006a16:	2004      	movs	r0, #4
 8006a18:	e7e8      	b.n	80069ec <USER_SPI_read+0x44>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006a1a:	2003      	movs	r0, #3
 8006a1c:	e7e6      	b.n	80069ec <USER_SPI_read+0x44>
 8006a1e:	bf00      	nop
 8006a20:	20000098 	.word	0x20000098
 8006a24:	2000ede5 	.word	0x2000ede5

08006a28 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	460e      	mov	r6, r1
 8006a2c:	4615      	mov	r5, r2
 8006a2e:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d13f      	bne.n	8006ab4 <USER_SPI_write+0x8c>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d03d      	beq.n	8006ab4 <USER_SPI_write+0x8c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006a38:	4b21      	ldr	r3, [pc, #132]	; (8006ac0 <USER_SPI_write+0x98>)
 8006a3a:	781a      	ldrb	r2, [r3, #0]
 8006a3c:	07d0      	lsls	r0, r2, #31
 8006a3e:	d43b      	bmi.n	8006ab8 <USER_SPI_write+0x90>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	0759      	lsls	r1, r3, #29
 8006a44:	d43a      	bmi.n	8006abc <USER_SPI_write+0x94>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006a46:	4b1f      	ldr	r3, [pc, #124]	; (8006ac4 <USER_SPI_write+0x9c>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	071a      	lsls	r2, r3, #28
 8006a4c:	bf58      	it	pl
 8006a4e:	026d      	lslpl	r5, r5, #9

	if (count == 1) {	/* Single sector write */
 8006a50:	2c01      	cmp	r4, #1
 8006a52:	d111      	bne.n	8006a78 <USER_SPI_write+0x50>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006a54:	4629      	mov	r1, r5
 8006a56:	2018      	movs	r0, #24
 8006a58:	f7ff fe4e 	bl	80066f8 <send_cmd>
 8006a5c:	bb40      	cbnz	r0, 8006ab0 <USER_SPI_write+0x88>
			&& xmit_datablock(buff, 0xFE)) {
 8006a5e:	21fe      	movs	r1, #254	; 0xfe
 8006a60:	4630      	mov	r0, r6
 8006a62:	f7ff fe8b 	bl	800677c <xmit_datablock>
 8006a66:	fab0 f480 	clz	r4, r0
 8006a6a:	0964      	lsrs	r4, r4, #5
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
		}
	}
	despiselect();
 8006a6c:	f7ff fe1e 	bl	80066ac <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006a70:	1e20      	subs	r0, r4, #0
 8006a72:	bf18      	it	ne
 8006a74:	2001      	movne	r0, #1
}
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006a78:	f013 0f06 	tst.w	r3, #6
 8006a7c:	d003      	beq.n	8006a86 <USER_SPI_write+0x5e>
 8006a7e:	4621      	mov	r1, r4
 8006a80:	2097      	movs	r0, #151	; 0x97
 8006a82:	f7ff fe39 	bl	80066f8 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006a86:	4629      	mov	r1, r5
 8006a88:	2019      	movs	r0, #25
 8006a8a:	f7ff fe35 	bl	80066f8 <send_cmd>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d1ec      	bne.n	8006a6c <USER_SPI_write+0x44>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006a92:	21fc      	movs	r1, #252	; 0xfc
 8006a94:	4630      	mov	r0, r6
 8006a96:	f7ff fe71 	bl	800677c <xmit_datablock>
 8006a9a:	b118      	cbz	r0, 8006aa4 <USER_SPI_write+0x7c>
			} while (--count);
 8006a9c:	3c01      	subs	r4, #1
				buff += 512;
 8006a9e:	f506 7600 	add.w	r6, r6, #512	; 0x200
			} while (--count);
 8006aa2:	d1f6      	bne.n	8006a92 <USER_SPI_write+0x6a>
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006aa4:	21fd      	movs	r1, #253	; 0xfd
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	f7ff fe68 	bl	800677c <xmit_datablock>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d1dd      	bne.n	8006a6c <USER_SPI_write+0x44>
 8006ab0:	2401      	movs	r4, #1
 8006ab2:	e7db      	b.n	8006a6c <USER_SPI_write+0x44>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006ab4:	2004      	movs	r0, #4
 8006ab6:	e7de      	b.n	8006a76 <USER_SPI_write+0x4e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006ab8:	2003      	movs	r0, #3
 8006aba:	e7dc      	b.n	8006a76 <USER_SPI_write+0x4e>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006abc:	2002      	movs	r0, #2
 8006abe:	e7da      	b.n	8006a76 <USER_SPI_write+0x4e>
 8006ac0:	20000098 	.word	0x20000098
 8006ac4:	2000ede5 	.word	0x2000ede5

08006ac8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006ac8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006aca:	4615      	mov	r5, r2
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006acc:	2800      	cmp	r0, #0
 8006ace:	f040 80da 	bne.w	8006c86 <USER_SPI_ioctl+0x1be>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006ad2:	4b6f      	ldr	r3, [pc, #444]	; (8006c90 <USER_SPI_ioctl+0x1c8>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	07d8      	lsls	r0, r3, #31
 8006ad8:	f100 80d7 	bmi.w	8006c8a <USER_SPI_ioctl+0x1c2>

	res = RES_ERROR;

	switch (cmd) {
 8006adc:	2904      	cmp	r1, #4
 8006ade:	f200 80d0 	bhi.w	8006c82 <USER_SPI_ioctl+0x1ba>
 8006ae2:	e8df f001 	tbb	[pc, r1]
 8006ae6:	0903      	.short	0x0903
 8006ae8:	4ace      	.short	0x4ace
 8006aea:	94          	.byte	0x94
 8006aeb:	00          	.byte	0x00
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006aec:	f7ff fdec 	bl	80066c8 <spiselect>
 8006af0:	fab0 f480 	clz	r4, r0
 8006af4:	0964      	lsrs	r4, r4, #5
 8006af6:	e006      	b.n	8006b06 <USER_SPI_ioctl+0x3e>
		break;

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006af8:	2100      	movs	r1, #0
 8006afa:	2009      	movs	r0, #9
 8006afc:	f7ff fdfc 	bl	80066f8 <send_cmd>
 8006b00:	4604      	mov	r4, r0
 8006b02:	b128      	cbz	r0, 8006b10 <USER_SPI_ioctl+0x48>
	res = RES_ERROR;
 8006b04:	2401      	movs	r4, #1

	default:
		res = RES_PARERR;
	}

	despiselect();
 8006b06:	f7ff fdd1 	bl	80066ac <despiselect>

	return res;
}
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	b004      	add	sp, #16
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006b10:	2110      	movs	r1, #16
 8006b12:	4668      	mov	r0, sp
 8006b14:	f7ff fe7a 	bl	800680c <rcvr_datablock>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d0f3      	beq.n	8006b04 <USER_SPI_ioctl+0x3c>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006b1c:	f89d 3000 	ldrb.w	r3, [sp]
 8006b20:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8006b24:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8006b28:	099b      	lsrs	r3, r3, #6
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006b30:	d109      	bne.n	8006b46 <USER_SPI_ioctl+0x7e>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006b38:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	441a      	add	r2, r3
				*(DWORD*)buff = csize << 10;
 8006b40:	0292      	lsls	r2, r2, #10
 8006b42:	602a      	str	r2, [r5, #0]
 8006b44:	e7df      	b.n	8006b06 <USER_SPI_ioctl+0x3e>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	eb03 1392 	add.w	r3, r3, r2, lsr #6
 8006b4c:	f89d 2006 	ldrb.w	r2, [sp, #6]
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006b50:	f89d 000a 	ldrb.w	r0, [sp, #10]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006b54:	0292      	lsls	r2, r2, #10
 8006b56:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8006b5a:	4413      	add	r3, r2
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006b5c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8006b60:	0049      	lsls	r1, r1, #1
 8006b62:	f002 020f 	and.w	r2, r2, #15
 8006b66:	eb02 12d0 	add.w	r2, r2, r0, lsr #7
 8006b6a:	f001 0106 	and.w	r1, r1, #6
				*(DWORD*)buff = csize << (n - 9);
 8006b6e:	440a      	add	r2, r1
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006b70:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << (n - 9);
 8006b72:	3a07      	subs	r2, #7
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006b74:	4093      	lsls	r3, r2
 8006b76:	602b      	str	r3, [r5, #0]
 8006b78:	e7c5      	b.n	8006b06 <USER_SPI_ioctl+0x3e>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006b7a:	4e46      	ldr	r6, [pc, #280]	; (8006c94 <USER_SPI_ioctl+0x1cc>)
 8006b7c:	7831      	ldrb	r1, [r6, #0]
 8006b7e:	f011 0104 	ands.w	r1, r1, #4
 8006b82:	d01b      	beq.n	8006bbc <USER_SPI_ioctl+0xf4>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006b84:	2100      	movs	r1, #0
 8006b86:	208d      	movs	r0, #141	; 0x8d
 8006b88:	f7ff fdb6 	bl	80066f8 <send_cmd>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d1b9      	bne.n	8006b04 <USER_SPI_ioctl+0x3c>
				xchg_spi(0xFF);
 8006b90:	20ff      	movs	r0, #255	; 0xff
 8006b92:	f7ff fd61 	bl	8006658 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006b96:	2110      	movs	r1, #16
 8006b98:	4668      	mov	r0, sp
 8006b9a:	f7ff fe37 	bl	800680c <rcvr_datablock>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d0b0      	beq.n	8006b04 <USER_SPI_ioctl+0x3c>
 8006ba2:	2430      	movs	r4, #48	; 0x30
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006ba4:	20ff      	movs	r0, #255	; 0xff
 8006ba6:	3c01      	subs	r4, #1
 8006ba8:	f7ff fd56 	bl	8006658 <xchg_spi>
 8006bac:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8006bb0:	d1f8      	bne.n	8006ba4 <USER_SPI_ioctl+0xdc>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006bb2:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8006bb6:	2310      	movs	r3, #16
 8006bb8:	0912      	lsrs	r2, r2, #4
 8006bba:	e7db      	b.n	8006b74 <USER_SPI_ioctl+0xac>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006bbc:	2009      	movs	r0, #9
 8006bbe:	f7ff fd9b 	bl	80066f8 <send_cmd>
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	d19d      	bne.n	8006b04 <USER_SPI_ioctl+0x3c>
 8006bc8:	2110      	movs	r1, #16
 8006bca:	4668      	mov	r0, sp
 8006bcc:	f7ff fe1e 	bl	800680c <rcvr_datablock>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d097      	beq.n	8006b04 <USER_SPI_ioctl+0x3c>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006bd4:	7832      	ldrb	r2, [r6, #0]
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006bd6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8006bda:	f89d 100b 	ldrb.w	r1, [sp, #11]
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006bde:	0792      	lsls	r2, r2, #30
 8006be0:	d50a      	bpl.n	8006bf8 <USER_SPI_ioctl+0x130>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006be2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006bec:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 8006bf0:	0992      	lsrs	r2, r2, #6
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	3a01      	subs	r2, #1
 8006bf6:	e7bd      	b.n	8006b74 <USER_SPI_ioctl+0xac>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006bf8:	00ca      	lsls	r2, r1, #3
 8006bfa:	f002 0218 	and.w	r2, r2, #24
 8006bfe:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8006c02:	eb02 1251 	add.w	r2, r2, r1, lsr #5
 8006c06:	3301      	adds	r3, #1
 8006c08:	fb02 3303 	mla	r3, r2, r3, r3
 8006c0c:	e7b3      	b.n	8006b76 <USER_SPI_ioctl+0xae>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006c0e:	4e21      	ldr	r6, [pc, #132]	; (8006c94 <USER_SPI_ioctl+0x1cc>)
 8006c10:	7833      	ldrb	r3, [r6, #0]
 8006c12:	f013 0f06 	tst.w	r3, #6
 8006c16:	f43f af75 	beq.w	8006b04 <USER_SPI_ioctl+0x3c>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006c1a:	466a      	mov	r2, sp
 8006c1c:	210b      	movs	r1, #11
 8006c1e:	2000      	movs	r0, #0
 8006c20:	f7ff ff52 	bl	8006ac8 <USER_SPI_ioctl>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	f47f af6d 	bne.w	8006b04 <USER_SPI_ioctl+0x3c>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006c2a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8006c2e:	f89d 2000 	ldrb.w	r2, [sp]
 8006c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c36:	ea53 1392 	orrs.w	r3, r3, r2, lsr #6
 8006c3a:	f43f af63 	beq.w	8006b04 <USER_SPI_ioctl+0x3c>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006c3e:	e9d5 1400 	ldrd	r1, r4, [r5]
		if (!(CardType & CT_BLOCK)) {
 8006c42:	7833      	ldrb	r3, [r6, #0]
 8006c44:	071b      	lsls	r3, r3, #28
			st *= 512; ed *= 512;
 8006c46:	bf58      	it	pl
 8006c48:	0249      	lslpl	r1, r1, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006c4a:	f04f 0020 	mov.w	r0, #32
			st *= 512; ed *= 512;
 8006c4e:	bf58      	it	pl
 8006c50:	0264      	lslpl	r4, r4, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006c52:	f7ff fd51 	bl	80066f8 <send_cmd>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	f47f af54 	bne.w	8006b04 <USER_SPI_ioctl+0x3c>
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	2021      	movs	r0, #33	; 0x21
 8006c60:	f7ff fd4a 	bl	80066f8 <send_cmd>
 8006c64:	4601      	mov	r1, r0
 8006c66:	2800      	cmp	r0, #0
 8006c68:	f47f af4c 	bne.w	8006b04 <USER_SPI_ioctl+0x3c>
 8006c6c:	2026      	movs	r0, #38	; 0x26
 8006c6e:	f7ff fd43 	bl	80066f8 <send_cmd>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	f47f af46 	bne.w	8006b04 <USER_SPI_ioctl+0x3c>
 8006c78:	f247 5030 	movw	r0, #30000	; 0x7530
 8006c7c:	f7ff fd00 	bl	8006680 <wait_ready>
 8006c80:	e736      	b.n	8006af0 <USER_SPI_ioctl+0x28>
	switch (cmd) {
 8006c82:	2404      	movs	r4, #4
 8006c84:	e73f      	b.n	8006b06 <USER_SPI_ioctl+0x3e>
	if (drv) return RES_PARERR;					/* Check parameter */
 8006c86:	2404      	movs	r4, #4
 8006c88:	e73f      	b.n	8006b0a <USER_SPI_ioctl+0x42>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006c8a:	2403      	movs	r4, #3
 8006c8c:	e73d      	b.n	8006b0a <USER_SPI_ioctl+0x42>
 8006c8e:	bf00      	nop
 8006c90:	20000098 	.word	0x20000098
 8006c94:	2000ede5 	.word	0x2000ede5

08006c98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006c98:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8006c9a:	4b0e      	ldr	r3, [pc, #56]	; (8006cd4 <FATFS_LinkDriverEx+0x3c>)
 8006c9c:	7a5c      	ldrb	r4, [r3, #9]
{
 8006c9e:	4605      	mov	r5, r0
  if(disk.nbr < _VOLUMES)
 8006ca0:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8006ca4:	b9a4      	cbnz	r4, 8006cd0 <FATFS_LinkDriverEx+0x38>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006ca6:	7a5c      	ldrb	r4, [r3, #9]
 8006ca8:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8006caa:	7a5c      	ldrb	r4, [r3, #9]
 8006cac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006cb0:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8006cb2:	7a5c      	ldrb	r4, [r3, #9]
 8006cb4:	441c      	add	r4, r3
 8006cb6:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8006cb8:	7a5a      	ldrb	r2, [r3, #9]
 8006cba:	1c54      	adds	r4, r2, #1
 8006cbc:	b2e4      	uxtb	r4, r4
 8006cbe:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8006cc0:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8006cc2:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8006cc4:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8006cc6:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8006cc8:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8006cca:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8006ccc:	70c8      	strb	r0, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8006cce:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	e7fc      	b.n	8006cce <FATFS_LinkDriverEx+0x36>
 8006cd4:	2000edf0 	.word	0x2000edf0

08006cd8 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f7ff bfdd 	b.w	8006c98 <FATFS_LinkDriverEx>
	...

08006ce0 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8006ce0:	460d      	mov	r5, r1
 8006ce2:	b508      	push	{r3, lr}
 8006ce4:	4604      	mov	r4, r0
  /* USER CODE BEGIN log */
	print_now("Error in AI: ");
 8006ce6:	4807      	ldr	r0, [pc, #28]	; (8006d04 <ai_log_err+0x24>)
 8006ce8:	f7fb fee2 	bl	8002ab0 <print_now>
	if (fct)print_now(fct);
 8006cec:	4628      	mov	r0, r5
 8006cee:	f7fb fedf 	bl	8002ab0 <print_now>

    print_error("\r\ntype=", err.type);
 8006cf2:	4805      	ldr	r0, [pc, #20]	; (8006d08 <ai_log_err+0x28>)
 8006cf4:	b2e1      	uxtb	r1, r4
 8006cf6:	f7fb ff15 	bl	8002b24 <print_error>
    print_error("code=", err.code);
 8006cfa:	4804      	ldr	r0, [pc, #16]	; (8006d0c <ai_log_err+0x2c>)
 8006cfc:	0a21      	lsrs	r1, r4, #8
 8006cfe:	f7fb ff11 	bl	8002b24 <print_error>

  do {} while (1);
 8006d02:	e7fe      	b.n	8006d02 <ai_log_err+0x22>
 8006d04:	0800d0d4 	.word	0x0800d0d4
 8006d08:	0800d0e2 	.word	0x0800d0e2
 8006d0c:	0800d0ea 	.word	0x0800d0ea

08006d10 <acquire_and_process_data>:
   -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99,
   -99, -99, -99, -99};
#endif

int acquire_and_process_data(ai_i8* data[])
{
 8006d10:	b5f0      	push	{r4, r5, r6, r7, lr}
		((int8_t **) data)[0][i] = test_input[i];//test_input{i+N_MEL_BIN*j};//
	}
#else
	for (int i=0; i < N_MEL_BIN; i++ ){
		for (int j=0; j < N_MELVEC; j++ ){
			((int8_t **) data)[0][j+N_MELVEC*i] = melspec[i+N_MEL_BIN*j];
 8006d12:	4d0c      	ldr	r5, [pc, #48]	; (8006d44 <acquire_and_process_data+0x34>)
	for (int i=0; i < N_MEL_BIN; i++ ){
 8006d14:	2300      	movs	r3, #0
 8006d16:	270a      	movs	r7, #10
			((int8_t **) data)[0][j+N_MELVEC*i] = melspec[i+N_MEL_BIN*j];
 8006d18:	f04f 0c14 	mov.w	ip, #20
		for (int j=0; j < N_MELVEC; j++ ){
 8006d1c:	fb07 f603 	mul.w	r6, r7, r3
 8006d20:	2200      	movs	r2, #0
			((int8_t **) data)[0][j+N_MELVEC*i] = melspec[i+N_MEL_BIN*j];
 8006d22:	18ec      	adds	r4, r5, r3
 8006d24:	fb0c f102 	mul.w	r1, ip, r2
 8006d28:	f914 e001 	ldrsb.w	lr, [r4, r1]
 8006d2c:	6801      	ldr	r1, [r0, #0]
 8006d2e:	4411      	add	r1, r2
		for (int j=0; j < N_MELVEC; j++ ){
 8006d30:	3201      	adds	r2, #1
 8006d32:	2a0a      	cmp	r2, #10
			((int8_t **) data)[0][j+N_MELVEC*i] = melspec[i+N_MEL_BIN*j];
 8006d34:	f801 e006 	strb.w	lr, [r1, r6]
		for (int j=0; j < N_MELVEC; j++ ){
 8006d38:	d1f4      	bne.n	8006d24 <acquire_and_process_data+0x14>
	for (int i=0; i < N_MEL_BIN; i++ ){
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	2b14      	cmp	r3, #20
 8006d3e:	d1ed      	bne.n	8006d1c <acquire_and_process_data+0xc>
	}
#endif


  return 0;
}
 8006d40:	2000      	movs	r0, #0
 8006d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d44:	20004ece 	.word	0x20004ece

08006d48 <post_process>:

extern uint32_t registered_times[1536];
extern uint16_t time_index;
int post_process(ai_i8* data[])
{
 8006d48:	b510      	push	{r4, lr}
  
	//if((int8_t)(data[0][0])>0){
	if((uint8_t)(data[0][0])>76 && time_index<10000){
 8006d4a:	6803      	ldr	r3, [r0, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b4c      	cmp	r3, #76	; 0x4c
 8006d50:	d918      	bls.n	8006d84 <post_process+0x3c>
 8006d52:	4b0d      	ldr	r3, [pc, #52]	; (8006d88 <post_process+0x40>)
 8006d54:	881c      	ldrh	r4, [r3, #0]
 8006d56:	f242 720f 	movw	r2, #9999	; 0x270f
 8006d5a:	4294      	cmp	r4, r2
 8006d5c:	d812      	bhi.n	8006d84 <post_process+0x3c>
		//print_now("Think there is a bat right now: ");
		//print_int((uint8_t)(data[0][0]));
		//print_now("\r\n");
		//print_time();
		registered_times[time_index++]=get_time();
 8006d5e:	1c62      	adds	r2, r4, #1
 8006d60:	801a      	strh	r2, [r3, #0]
 8006d62:	f7fb ff3f 	bl	8002be4 <get_time>
 8006d66:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <post_process+0x44>)
 8006d68:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		print_int(get_time());
 8006d6c:	f7fb ff3a 	bl	8002be4 <get_time>
 8006d70:	f7fb fea8 	bl	8002ac4 <print_int>

		print_now("    ");
 8006d74:	4806      	ldr	r0, [pc, #24]	; (8006d90 <post_process+0x48>)
 8006d76:	f7fb fe9b 	bl	8002ab0 <print_now>
		print_time();
 8006d7a:	f7fb fee1 	bl	8002b40 <print_time>
		print_now("\r\n");
 8006d7e:	4805      	ldr	r0, [pc, #20]	; (8006d94 <post_process+0x4c>)
 8006d80:	f7fb fe96 	bl	8002ab0 <print_now>
	}
  return 0;
}
 8006d84:	2000      	movs	r0, #0
 8006d86:	bd10      	pop	{r4, pc}
 8006d88:	2000ebfc 	.word	0x2000ebfc
 8006d8c:	20004fbc 	.word	0x20004fbc
 8006d90:	0800d0f0 	.word	0x0800d0f0
 8006d94:	0800cff8 	.word	0x0800cff8

08006d98 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8006d98:	b570      	push	{r4, r5, r6, lr}
  err = ai_bat_det_net_create_and_init(&bat_det_net, act_addr, NULL);
 8006d9a:	4d11      	ldr	r5, [pc, #68]	; (8006de0 <MX_X_CUBE_AI_Init+0x48>)
    /* USER CODE BEGIN 5 */
  print_now("\r\nAI initialization\r\n");
 8006d9c:	4811      	ldr	r0, [pc, #68]	; (8006de4 <MX_X_CUBE_AI_Init+0x4c>)
 8006d9e:	f7fb fe87 	bl	8002ab0 <print_now>
  err = ai_bat_det_net_create_and_init(&bat_det_net, act_addr, NULL);
 8006da2:	4911      	ldr	r1, [pc, #68]	; (8006de8 <MX_X_CUBE_AI_Init+0x50>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	4628      	mov	r0, r5
 8006da8:	f000 f966 	bl	8007078 <ai_bat_det_net_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8006dac:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 8006db0:	d002      	beq.n	8006db8 <MX_X_CUBE_AI_Init+0x20>
    ai_log_err(err, "ai_bat_det_net_create_and_init");
 8006db2:	490e      	ldr	r1, [pc, #56]	; (8006dec <MX_X_CUBE_AI_Init+0x54>)
 8006db4:	f7ff ff94 	bl	8006ce0 <ai_log_err>
  ai_input = ai_bat_det_net_inputs_get(bat_det_net, NULL);
 8006db8:	4621      	mov	r1, r4
 8006dba:	6828      	ldr	r0, [r5, #0]
 8006dbc:	4e0c      	ldr	r6, [pc, #48]	; (8006df0 <MX_X_CUBE_AI_Init+0x58>)
 8006dbe:	f000 f865 	bl	8006e8c <ai_bat_det_net_inputs_get>
  ai_output = ai_bat_det_net_outputs_get(bat_det_net, NULL);
 8006dc2:	4621      	mov	r1, r4
  ai_input = ai_bat_det_net_inputs_get(bat_det_net, NULL);
 8006dc4:	6030      	str	r0, [r6, #0]
  ai_output = ai_bat_det_net_outputs_get(bat_det_net, NULL);
 8006dc6:	6828      	ldr	r0, [r5, #0]
 8006dc8:	f000 f86a 	bl	8006ea0 <ai_bat_det_net_outputs_get>
 8006dcc:	4b09      	ldr	r3, [pc, #36]	; (8006df4 <MX_X_CUBE_AI_Init+0x5c>)
 8006dce:	6018      	str	r0, [r3, #0]
	data_ins[idx] = ai_input[idx].data;
 8006dd0:	6833      	ldr	r3, [r6, #0]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	4b08      	ldr	r3, [pc, #32]	; (8006df8 <MX_X_CUBE_AI_Init+0x60>)
 8006dd6:	601a      	str	r2, [r3, #0]
	data_outs[idx] = ai_output[idx].data;
 8006dd8:	4b08      	ldr	r3, [pc, #32]	; (8006dfc <MX_X_CUBE_AI_Init+0x64>)
 8006dda:	6842      	ldr	r2, [r0, #4]
 8006ddc:	601a      	str	r2, [r3, #0]

  ai_boostrap(data_activations0);
    /* USER CODE END 5 */
}
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	2000ee04 	.word	0x2000ee04
 8006de4:	0800d0f5 	.word	0x0800d0f5
 8006de8:	2000009c 	.word	0x2000009c
 8006dec:	0800d10b 	.word	0x0800d10b
 8006df0:	2000edfc 	.word	0x2000edfc
 8006df4:	2000ee00 	.word	0x2000ee00
 8006df8:	2000ee08 	.word	0x2000ee08
 8006dfc:	2000ee0c 	.word	0x2000ee0c

08006e00 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8006e00:	b510      	push	{r4, lr}
    /* USER CODE BEGIN 6 */
  int res = -1;

  //print_now("\r\AI - run\r\n");

	if (bat_det_net) {
 8006e02:	4c12      	ldr	r4, [pc, #72]	; (8006e4c <MX_X_CUBE_AI_Process+0x4c>)
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	b93b      	cbnz	r3, 8006e18 <MX_X_CUBE_AI_Process+0x18>
		if (res == 0)
			res = post_process(data_outs);
		//print_error("After process: ", res);
	}
	if (res) {
		print_now("Error\r\n");
 8006e08:	4811      	ldr	r0, [pc, #68]	; (8006e50 <MX_X_CUBE_AI_Process+0x50>)
 8006e0a:	f7fb fe51 	bl	8002ab0 <print_now>
		ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
		ai_log_err(err, "Process has FAILED");
 8006e0e:	4911      	ldr	r1, [pc, #68]	; (8006e54 <MX_X_CUBE_AI_Process+0x54>)
 8006e10:	f241 0011 	movw	r0, #4113	; 0x1011
    ai_log_err(ai_bat_det_net_get_error(bat_det_net),
 8006e14:	f7ff ff64 	bl	8006ce0 <ai_log_err>
		res = acquire_and_process_data(data_ins);
 8006e18:	480f      	ldr	r0, [pc, #60]	; (8006e58 <MX_X_CUBE_AI_Process+0x58>)
 8006e1a:	f7ff ff79 	bl	8006d10 <acquire_and_process_data>
		if (res == 0)
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d1f2      	bne.n	8006e08 <MX_X_CUBE_AI_Process+0x8>
  batch = ai_bat_det_net_run(bat_det_net, ai_input, ai_output);
 8006e22:	4b0e      	ldr	r3, [pc, #56]	; (8006e5c <MX_X_CUBE_AI_Process+0x5c>)
 8006e24:	6820      	ldr	r0, [r4, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <MX_X_CUBE_AI_Process+0x60>)
 8006e2a:	6819      	ldr	r1, [r3, #0]
 8006e2c:	f000 f96b 	bl	8007106 <ai_bat_det_net_run>
  if (batch != 1) {
 8006e30:	2801      	cmp	r0, #1
 8006e32:	d004      	beq.n	8006e3e <MX_X_CUBE_AI_Process+0x3e>
    ai_log_err(ai_bat_det_net_get_error(bat_det_net),
 8006e34:	6820      	ldr	r0, [r4, #0]
 8006e36:	f000 f819 	bl	8006e6c <ai_bat_det_net_get_error>
 8006e3a:	490a      	ldr	r1, [pc, #40]	; (8006e64 <MX_X_CUBE_AI_Process+0x64>)
 8006e3c:	e7ea      	b.n	8006e14 <MX_X_CUBE_AI_Process+0x14>
			res = post_process(data_outs);
 8006e3e:	480a      	ldr	r0, [pc, #40]	; (8006e68 <MX_X_CUBE_AI_Process+0x68>)
 8006e40:	f7ff ff82 	bl	8006d48 <post_process>
	if (res) {
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d1df      	bne.n	8006e08 <MX_X_CUBE_AI_Process+0x8>
	}
    /* USER CODE END 6 */
}
 8006e48:	bd10      	pop	{r4, pc}
 8006e4a:	bf00      	nop
 8006e4c:	2000ee04 	.word	0x2000ee04
 8006e50:	0800d12a 	.word	0x0800d12a
 8006e54:	0800d132 	.word	0x0800d132
 8006e58:	2000ee08 	.word	0x2000ee08
 8006e5c:	2000ee00 	.word	0x2000ee00
 8006e60:	2000edfc 	.word	0x2000edfc
 8006e64:	0800d145 	.word	0x0800d145
 8006e68:	2000ee0c 	.word	0x2000ee0c

08006e6c <ai_bat_det_net_get_error>:
}

AI_API_ENTRY
ai_error ai_bat_det_net_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8006e6c:	f000 bfdc 	b.w	8007e28 <ai_platform_network_get_error>

08006e70 <ai_bat_det_net_create>:
}

AI_API_ENTRY
ai_error ai_bat_det_net_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006e70:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8006e72:	2305      	movs	r3, #5
 8006e74:	2200      	movs	r2, #0
 8006e76:	e9cd 3200 	strd	r3, r2, [sp]
 8006e7a:	4a03      	ldr	r2, [pc, #12]	; (8006e88 <ai_bat_det_net_create+0x18>)
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f001 f9f1 	bl	8008264 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006e82:	b003      	add	sp, #12
 8006e84:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e88:	2000081c 	.word	0x2000081c

08006e8c <ai_bat_det_net_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_bat_det_net_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8006e8c:	b910      	cbnz	r0, 8006e94 <ai_bat_det_net_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006e8e:	4802      	ldr	r0, [pc, #8]	; (8006e98 <ai_bat_det_net_inputs_get+0xc>)
 8006e90:	4b02      	ldr	r3, [pc, #8]	; (8006e9c <ai_bat_det_net_inputs_get+0x10>)
 8006e92:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8006e94:	f001 b83c 	b.w	8007f10 <ai_platform_inputs_get>
 8006e98:	2000081c 	.word	0x2000081c
 8006e9c:	a1c00100 	.word	0xa1c00100

08006ea0 <ai_bat_det_net_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_bat_det_net_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8006ea0:	b910      	cbnz	r0, 8006ea8 <ai_bat_det_net_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006ea2:	4802      	ldr	r0, [pc, #8]	; (8006eac <ai_bat_det_net_outputs_get+0xc>)
 8006ea4:	4b02      	ldr	r3, [pc, #8]	; (8006eb0 <ai_bat_det_net_outputs_get+0x10>)
 8006ea6:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8006ea8:	f001 b90a 	b.w	80080c0 <ai_platform_outputs_get>
 8006eac:	2000081c 	.word	0x2000081c
 8006eb0:	a1c00100 	.word	0xa1c00100

08006eb4 <ai_bat_det_net_init>:
}

AI_API_ENTRY
ai_bool ai_bat_det_net_init(
  ai_handle network, const ai_network_params* params)
{
 8006eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb8:	4607      	mov	r7, r0
 8006eba:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006ebc:	f001 faa8 	bl	8008410 <ai_platform_network_init>
  if (!net_ctx) return false;
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	f000 809b 	beq.w	8006ffe <ai_bat_det_net_init+0x14a>
  if (ai_platform_get_weights_map(g_bat_det_net_weights_map, 1, params)) {
 8006ec8:	f8df 8150 	ldr.w	r8, [pc, #336]	; 800701c <ai_bat_det_net_init+0x168>
 8006ecc:	4632      	mov	r2, r6
 8006ece:	2101      	movs	r1, #1
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	f000 fee1 	bl	8007c98 <ai_platform_get_weights_map>
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	f000 8092 	beq.w	8007002 <ai_bat_det_net_init+0x14e>
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8006ede:	4a50      	ldr	r2, [pc, #320]	; (8007020 <ai_bat_det_net_init+0x16c>)
 8006ee0:	6813      	ldr	r3, [r2, #0]
 8006ee2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ee6:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_bat_det_net_weights_map[0] + 0);
 8006ee8:	f8d8 3000 	ldr.w	r3, [r8]
    conv2d_0_weights_array.data_start = AI_PTR(g_bat_det_net_weights_map[0] + 0);
 8006eec:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8006ef0:	4a4c      	ldr	r2, [pc, #304]	; (8007024 <ai_bat_det_net_init+0x170>)
 8006ef2:	6811      	ldr	r1, [r2, #0]
 8006ef4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006ef8:	6011      	str	r1, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_bat_det_net_weights_map[0] + 36);
 8006efa:	f103 0124 	add.w	r1, r3, #36	; 0x24
    conv2d_0_bias_array.data_start = AI_PTR(g_bat_det_net_weights_map[0] + 36);
 8006efe:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8006f02:	4a49      	ldr	r2, [pc, #292]	; (8007028 <ai_bat_det_net_init+0x174>)
 8006f04:	6811      	ldr	r1, [r2, #0]
 8006f06:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006f0a:	6011      	str	r1, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_bat_det_net_weights_map[0] + 52);
 8006f0c:	f103 0134 	add.w	r1, r3, #52	; 0x34
    conv2d_2_weights_array.data_start = AI_PTR(g_bat_det_net_weights_map[0] + 52);
 8006f10:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8006f14:	4a45      	ldr	r2, [pc, #276]	; (800702c <ai_bat_det_net_init+0x178>)
 8006f16:	6811      	ldr	r1, [r2, #0]
 8006f18:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006f1c:	6011      	str	r1, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_bat_det_net_weights_map[0] + 196);
 8006f1e:	f103 01c4 	add.w	r1, r3, #196	; 0xc4
    conv2d_2_bias_array.data_start = AI_PTR(g_bat_det_net_weights_map[0] + 196);
 8006f22:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8006f26:	4a42      	ldr	r2, [pc, #264]	; (8007030 <ai_bat_det_net_init+0x17c>)
 8006f28:	6811      	ldr	r1, [r2, #0]
 8006f2a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006f2e:	6011      	str	r1, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_bat_det_net_weights_map[0] + 212);
 8006f30:	f103 01d4 	add.w	r1, r3, #212	; 0xd4
    gemm_5_weights_array.data_start = AI_PTR(g_bat_det_net_weights_map[0] + 212);
 8006f34:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8006f38:	4a3e      	ldr	r2, [pc, #248]	; (8007034 <ai_bat_det_net_init+0x180>)
 8006f3a:	6811      	ldr	r1, [r2, #0]
 8006f3c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006f40:	6011      	str	r1, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_bat_det_net_weights_map[0] + 548);
 8006f42:	f503 7109 	add.w	r1, r3, #548	; 0x224
    gemm_5_bias_array.data_start = AI_PTR(g_bat_det_net_weights_map[0] + 548);
 8006f46:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8006f4a:	4a3b      	ldr	r2, [pc, #236]	; (8007038 <ai_bat_det_net_init+0x184>)
 8006f4c:	6811      	ldr	r1, [r2, #0]
 8006f4e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006f52:	6011      	str	r1, [r2, #0]
    gemm_6_weights_array.data = AI_PTR(g_bat_det_net_weights_map[0] + 660);
 8006f54:	f503 7125 	add.w	r1, r3, #660	; 0x294
    gemm_6_weights_array.data_start = AI_PTR(g_bat_det_net_weights_map[0] + 660);
 8006f58:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8006f5c:	4a37      	ldr	r2, [pc, #220]	; (800703c <ai_bat_det_net_init+0x188>)
 8006f5e:	6811      	ldr	r1, [r2, #0]
    gemm_6_bias_array.data = AI_PTR(g_bat_det_net_weights_map[0] + 688);
 8006f60:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
    gemm_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8006f64:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006f68:	6011      	str	r1, [r2, #0]
    gemm_6_bias_array.data_start = AI_PTR(g_bat_det_net_weights_map[0] + 688);
 8006f6a:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_bat_det_net_activations_map, 1, params)) {
 8006f6e:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007040 <ai_bat_det_net_init+0x18c>
 8006f72:	4632      	mov	r2, r6
 8006f74:	2101      	movs	r1, #1
 8006f76:	4640      	mov	r0, r8
 8006f78:	f000 fee2 	bl	8007d40 <ai_platform_get_activations_map>
 8006f7c:	4606      	mov	r6, r0
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d045      	beq.n	800700e <ai_bat_det_net_init+0x15a>
    serving_default_input_10_output_array.data = AI_PTR(g_bat_det_net_activations_map[0] + 0);
 8006f82:	f8d8 3000 	ldr.w	r3, [r8]
 8006f86:	4a2f      	ldr	r2, [pc, #188]	; (8007044 <ai_bat_det_net_init+0x190>)
    serving_default_input_10_output_array.data_start = AI_PTR(g_bat_det_net_activations_map[0] + 0);
 8006f88:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_0_scratch0_array.data = AI_PTR(g_bat_det_net_activations_map[0] + 200);
 8006f8c:	4a2e      	ldr	r2, [pc, #184]	; (8007048 <ai_bat_det_net_init+0x194>)
 8006f8e:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
    conv2d_0_scratch0_array.data_start = AI_PTR(g_bat_det_net_activations_map[0] + 200);
 8006f92:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_0_output_array.data = AI_PTR(g_bat_det_net_activations_map[0] + 364);
 8006f96:	4a2d      	ldr	r2, [pc, #180]	; (800704c <ai_bat_det_net_init+0x198>)
 8006f98:	f503 71b6 	add.w	r1, r3, #364	; 0x16c
    conv2d_0_output_array.data_start = AI_PTR(g_bat_det_net_activations_map[0] + 364);
 8006f9c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    pool_1_output_array.data = AI_PTR(g_bat_det_net_activations_map[0] + 0);
 8006fa0:	4a2b      	ldr	r2, [pc, #172]	; (8007050 <ai_bat_det_net_init+0x19c>)
    pool_1_output_array.data_start = AI_PTR(g_bat_det_net_activations_map[0] + 0);
 8006fa2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_2_scratch0_array.data = AI_PTR(g_bat_det_net_activations_map[0] + 144);
 8006fa6:	4a2b      	ldr	r2, [pc, #172]	; (8007054 <ai_bat_det_net_init+0x1a0>)
 8006fa8:	f103 0190 	add.w	r1, r3, #144	; 0x90
    conv2d_2_scratch0_array.data_start = AI_PTR(g_bat_det_net_activations_map[0] + 144);
 8006fac:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_output_array.data = AI_PTR(g_bat_det_net_activations_map[0] + 632);
 8006fb0:	4a29      	ldr	r2, [pc, #164]	; (8007058 <ai_bat_det_net_init+0x1a4>)
 8006fb2:	f503 711e 	add.w	r1, r3, #632	; 0x278
    conv2d_2_output_array.data_start = AI_PTR(g_bat_det_net_activations_map[0] + 632);
 8006fb6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    pool_3_output_array.data = AI_PTR(g_bat_det_net_activations_map[0] + 0);
 8006fba:	4a28      	ldr	r2, [pc, #160]	; (800705c <ai_bat_det_net_init+0x1a8>)
    pool_3_output_array.data_start = AI_PTR(g_bat_det_net_activations_map[0] + 0);
 8006fbc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_5_scratch0_array.data = AI_PTR(g_bat_det_net_activations_map[0] + 12);
 8006fc0:	4a27      	ldr	r2, [pc, #156]	; (8007060 <ai_bat_det_net_init+0x1ac>)
 8006fc2:	f103 010c 	add.w	r1, r3, #12
    gemm_5_scratch0_array.data_start = AI_PTR(g_bat_det_net_activations_map[0] + 12);
 8006fc6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_5_output_array.data = AI_PTR(g_bat_det_net_activations_map[0] + 36);
 8006fca:	4a26      	ldr	r2, [pc, #152]	; (8007064 <ai_bat_det_net_init+0x1b0>)
 8006fcc:	f103 0124 	add.w	r1, r3, #36	; 0x24
    gemm_5_output_array.data_start = AI_PTR(g_bat_det_net_activations_map[0] + 36);
 8006fd0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_6_scratch0_array.data = AI_PTR(g_bat_det_net_activations_map[0] + 64);
 8006fd4:	4a24      	ldr	r2, [pc, #144]	; (8007068 <ai_bat_det_net_init+0x1b4>)
 8006fd6:	f103 0140 	add.w	r1, r3, #64	; 0x40
    gemm_6_scratch0_array.data_start = AI_PTR(g_bat_det_net_activations_map[0] + 64);
 8006fda:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_6_output_array.data = AI_PTR(g_bat_det_net_activations_map[0] + 0);
 8006fde:	4a23      	ldr	r2, [pc, #140]	; (800706c <ai_bat_det_net_init+0x1b8>)
    gemm_6_output_array.data_start = AI_PTR(g_bat_det_net_activations_map[0] + 0);
 8006fe0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_7_output_array.data = AI_PTR(g_bat_det_net_activations_map[0] + 4);
 8006fe4:	4a22      	ldr	r2, [pc, #136]	; (8007070 <ai_bat_det_net_init+0x1bc>)
 8006fe6:	1d19      	adds	r1, r3, #4
    nl_7_output_array.data_start = AI_PTR(g_bat_det_net_activations_map[0] + 4);
 8006fe8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conversion_8_output_array.data = AI_PTR(g_bat_det_net_activations_map[0] + 0);
 8006fec:	4a21      	ldr	r2, [pc, #132]	; (8007074 <ai_bat_det_net_init+0x1c0>)
    conversion_8_output_array.data_start = AI_PTR(g_bat_det_net_activations_map[0] + 0);
 8006fee:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= bat_det_net_configure_weights(net_ctx, params);
  ok &= bat_det_net_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	f001 fafa 	bl	80085ec <ai_platform_network_post_init>
 8006ff8:	4030      	ands	r0, r6
 8006ffa:	4005      	ands	r5, r0
 8006ffc:	b2e8      	uxtb	r0, r5

  return ok;
}
 8006ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8007002:	2212      	movs	r2, #18
 8007004:	2130      	movs	r1, #48	; 0x30
 8007006:	4620      	mov	r0, r4
 8007008:	f000 ff7c 	bl	8007f04 <ai_platform_network_set_error>
  return false;
 800700c:	e7af      	b.n	8006f6e <ai_bat_det_net_init+0xba>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800700e:	2213      	movs	r2, #19
 8007010:	2130      	movs	r1, #48	; 0x30
 8007012:	4620      	mov	r0, r4
 8007014:	f000 ff76 	bl	8007f04 <ai_platform_network_set_error>
  return false;
 8007018:	e7eb      	b.n	8006ff2 <ai_bat_det_net_init+0x13e>
 800701a:	bf00      	nop
 800701c:	2000eedc 	.word	0x2000eedc
 8007020:	200006cc 	.word	0x200006cc
 8007024:	20000604 	.word	0x20000604
 8007028:	200007c0 	.word	0x200007c0
 800702c:	200006f8 	.word	0x200006f8
 8007030:	20000924 	.word	0x20000924
 8007034:	20000884 	.word	0x20000884
 8007038:	200009f0 	.word	0x200009f0
 800703c:	20000950 	.word	0x20000950
 8007040:	2000eed8 	.word	0x2000eed8
 8007044:	20000b4c 	.word	0x20000b4c
 8007048:	200006a0 	.word	0x200006a0
 800704c:	20000674 	.word	0x20000674
 8007050:	20000aa0 	.word	0x20000aa0
 8007054:	20000794 	.word	0x20000794
 8007058:	20000768 	.word	0x20000768
 800705c:	20000b20 	.word	0x20000b20
 8007060:	200008f8 	.word	0x200008f8
 8007064:	200008cc 	.word	0x200008cc
 8007068:	200009c4 	.word	0x200009c4
 800706c:	20000998 	.word	0x20000998
 8007070:	20000a3c 	.word	0x20000a3c
 8007074:	2000080c 	.word	0x2000080c

08007078 <ai_bat_det_net_create_and_init>:
{
 8007078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800707c:	4688      	mov	r8, r1
 800707e:	b08f      	sub	sp, #60	; 0x3c
    err = ai_bat_det_net_create(network, AI_BAT_DET_NET_DATA_CONFIG);
 8007080:	2100      	movs	r1, #0
{
 8007082:	4606      	mov	r6, r0
 8007084:	4617      	mov	r7, r2
    err = ai_bat_det_net_create(network, AI_BAT_DET_NET_DATA_CONFIG);
 8007086:	f7ff fef3 	bl	8006e70 <ai_bat_det_net_create>
    if (err.type != AI_ERROR_NONE)
 800708a:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
    err = ai_bat_det_net_create(network, AI_BAT_DET_NET_DATA_CONFIG);
 800708e:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 8007090:	d107      	bne.n	80070a2 <ai_bat_det_net_create_and_init+0x2a>
    if (ai_bat_det_net_data_params_get(&params) != true) {
 8007092:	4668      	mov	r0, sp
 8007094:	f000 f83a 	bl	800710c <ai_bat_det_net_data_params_get>
 8007098:	b938      	cbnz	r0, 80070aa <ai_bat_det_net_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 800709a:	6830      	ldr	r0, [r6, #0]
 800709c:	f000 fec4 	bl	8007e28 <ai_platform_network_get_error>
 80070a0:	4604      	mov	r4, r0
}
 80070a2:	4620      	mov	r0, r4
 80070a4:	b00f      	add	sp, #60	; 0x3c
 80070a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 80070aa:	f1b8 0f00 	cmp.w	r8, #0
 80070ae:	d11a      	bne.n	80070e6 <ai_bat_det_net_create_and_init+0x6e>
    if (weights) {
 80070b0:	bb3f      	cbnz	r7, 8007102 <ai_bat_det_net_create_and_init+0x8a>
    if (ai_bat_det_net_init(*network, &params) != true) {
 80070b2:	6830      	ldr	r0, [r6, #0]
 80070b4:	4669      	mov	r1, sp
 80070b6:	f7ff fefd 	bl	8006eb4 <ai_bat_det_net_init>
 80070ba:	b928      	cbnz	r0, 80070c8 <ai_bat_det_net_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 80070bc:	6830      	ldr	r0, [r6, #0]
 80070be:	f000 feb3 	bl	8007e28 <ai_platform_network_get_error>
 80070c2:	4604      	mov	r4, r0
 80070c4:	fa5f f980 	uxtb.w	r9, r0
    return err;
 80070c8:	f369 0407 	bfi	r4, r9, #0, #8
 80070cc:	e7e9      	b.n	80070a2 <ai_bat_det_net_create_and_init+0x2a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80070ce:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 80070d2:	4629      	mov	r1, r5
 80070d4:	a803      	add	r0, sp, #12
 80070d6:	f000 fdcb 	bl	8007c70 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 80070da:	3501      	adds	r5, #1
 80070dc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80070e0:	42ab      	cmp	r3, r5
 80070e2:	dcf4      	bgt.n	80070ce <ai_bat_det_net_create_and_init+0x56>
 80070e4:	e7e4      	b.n	80070b0 <ai_bat_det_net_create_and_init+0x38>
 80070e6:	464d      	mov	r5, r9
 80070e8:	e7f8      	b.n	80070dc <ai_bat_det_net_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80070ea:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 80070ee:	4629      	mov	r1, r5
 80070f0:	a801      	add	r0, sp, #4
 80070f2:	f000 fdbd 	bl	8007c70 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80070f6:	3501      	adds	r5, #1
 80070f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80070fc:	42ab      	cmp	r3, r5
 80070fe:	dcf4      	bgt.n	80070ea <ai_bat_det_net_create_and_init+0x72>
 8007100:	e7d7      	b.n	80070b2 <ai_bat_det_net_create_and_init+0x3a>
 8007102:	2500      	movs	r5, #0
 8007104:	e7f8      	b.n	80070f8 <ai_bat_det_net_create_and_init+0x80>

08007106 <ai_bat_det_net_run>:

AI_API_ENTRY
ai_i32 ai_bat_det_net_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8007106:	f001 baf9 	b.w	80086fc <ai_platform_network_process>
	...

0800710c <ai_bat_det_net_data_params_get>:
 * @ingroup bat_det_net_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_bat_det_net_data_params_get(ai_network_params* params)
{
 800710c:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 800710e:	4603      	mov	r3, r0
{
 8007110:	b085      	sub	sp, #20
  if (!params) return false;
 8007112:	b170      	cbz	r0, 8007132 <ai_bat_det_net_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8007114:	4c08      	ldr	r4, [pc, #32]	; (8007138 <ai_bat_det_net_data_params_get+0x2c>)
 8007116:	e894 0003 	ldmia.w	r4, {r0, r1}
 800711a:	466a      	mov	r2, sp
 800711c:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_BAT_DET_NET_DATA_ACTIVATIONS_COUNT, g_bat_det_net_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8007120:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8007124:	ad02      	add	r5, sp, #8
 8007126:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_BAT_DET_NET_DATA_WEIGHTS_COUNT, g_bat_det_net_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800712a:	4629      	mov	r1, r5
 800712c:	4618      	mov	r0, r3
 800712e:	f000 fe5b 	bl	8007de8 <ai_platform_bind_network_params>
}
 8007132:	b005      	add	sp, #20
 8007134:	bd30      	pop	{r4, r5, pc}
 8007136:	bf00      	nop
 8007138:	0800c78c 	.word	0x0800c78c

0800713c <arm_max_q15>:
 800713c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007140:	4684      	mov	ip, r0
 8007142:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8007146:	ea5f 089e 	movs.w	r8, lr, lsr #2
 800714a:	f93c 4b02 	ldrsh.w	r4, [ip], #2
 800714e:	d044      	beq.n	80071da <arm_max_q15+0x9e>
 8007150:	2500      	movs	r5, #0
 8007152:	300a      	adds	r0, #10
 8007154:	462f      	mov	r7, r5
 8007156:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800715a:	f930 6c08 	ldrsh.w	r6, [r0, #-8]
 800715e:	42b4      	cmp	r4, r6
 8007160:	bfb8      	it	lt
 8007162:	4634      	movlt	r4, r6
 8007164:	f930 6c06 	ldrsh.w	r6, [r0, #-6]
 8007168:	bfb8      	it	lt
 800716a:	1c6f      	addlt	r7, r5, #1
 800716c:	42b4      	cmp	r4, r6
 800716e:	bfb8      	it	lt
 8007170:	4634      	movlt	r4, r6
 8007172:	f930 6c04 	ldrsh.w	r6, [r0, #-4]
 8007176:	bfb8      	it	lt
 8007178:	1caf      	addlt	r7, r5, #2
 800717a:	42b4      	cmp	r4, r6
 800717c:	bfa8      	it	ge
 800717e:	4626      	movge	r6, r4
 8007180:	f930 4c02 	ldrsh.w	r4, [r0, #-2]
 8007184:	bfb8      	it	lt
 8007186:	1cef      	addlt	r7, r5, #3
 8007188:	42a6      	cmp	r6, r4
 800718a:	f105 0504 	add.w	r5, r5, #4
 800718e:	bfac      	ite	ge
 8007190:	4634      	movge	r4, r6
 8007192:	462f      	movlt	r7, r5
 8007194:	45a9      	cmp	r9, r5
 8007196:	f100 0008 	add.w	r0, r0, #8
 800719a:	d1de      	bne.n	800715a <arm_max_q15+0x1e>
 800719c:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 80071a0:	f01e 0003 	ands.w	r0, lr, #3
 80071a4:	d015      	beq.n	80071d2 <arm_max_q15+0x96>
 80071a6:	f9bc 5000 	ldrsh.w	r5, [ip]
 80071aa:	42a5      	cmp	r5, r4
 80071ac:	bfc4      	itt	gt
 80071ae:	462c      	movgt	r4, r5
 80071b0:	1a0f      	subgt	r7, r1, r0
 80071b2:	3801      	subs	r0, #1
 80071b4:	d00d      	beq.n	80071d2 <arm_max_q15+0x96>
 80071b6:	f9bc 5002 	ldrsh.w	r5, [ip, #2]
 80071ba:	42ac      	cmp	r4, r5
 80071bc:	bfbc      	itt	lt
 80071be:	1a0f      	sublt	r7, r1, r0
 80071c0:	462c      	movlt	r4, r5
 80071c2:	2801      	cmp	r0, #1
 80071c4:	d005      	beq.n	80071d2 <arm_max_q15+0x96>
 80071c6:	f9bc 1004 	ldrsh.w	r1, [ip, #4]
 80071ca:	42a1      	cmp	r1, r4
 80071cc:	bfc4      	itt	gt
 80071ce:	4677      	movgt	r7, lr
 80071d0:	460c      	movgt	r4, r1
 80071d2:	8014      	strh	r4, [r2, #0]
 80071d4:	601f      	str	r7, [r3, #0]
 80071d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071da:	4647      	mov	r7, r8
 80071dc:	e7e0      	b.n	80071a0 <arm_max_q15+0x64>
 80071de:	bf00      	nop

080071e0 <arm_rfft_q15>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	b083      	sub	sp, #12
 80071e6:	6805      	ldr	r5, [r0, #0]
 80071e8:	9200      	str	r2, [sp, #0]
 80071ea:	7902      	ldrb	r2, [r0, #4]
 80071ec:	086d      	lsrs	r5, r5, #1
 80071ee:	00ab      	lsls	r3, r5, #2
 80071f0:	2a01      	cmp	r2, #1
 80071f2:	4604      	mov	r4, r0
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	6940      	ldr	r0, [r0, #20]
 80071f8:	460e      	mov	r6, r1
 80071fa:	d051      	beq.n	80072a0 <arm_rfft_q15+0xc0>
 80071fc:	7963      	ldrb	r3, [r4, #5]
 80071fe:	f000 fa03 	bl	8007608 <arm_cfft_q15>
 8007202:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007206:	6927      	ldr	r7, [r4, #16]
 8007208:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 800720c:	00aa      	lsls	r2, r5, #2
 800720e:	f1a2 0804 	sub.w	r8, r2, #4
 8007212:	1e6a      	subs	r2, r5, #1
 8007214:	eb03 0c0e 	add.w	ip, r3, lr
 8007218:	4477      	add	r7, lr
 800721a:	44b0      	add	r8, r6
 800721c:	f106 0b04 	add.w	fp, r6, #4
 8007220:	ea4f 04c5 	mov.w	r4, r5, lsl #3
 8007224:	d025      	beq.n	8007272 <arm_rfft_q15+0x92>
 8007226:	9b00      	ldr	r3, [sp, #0]
 8007228:	3c08      	subs	r4, #8
 800722a:	441c      	add	r4, r3
 800722c:	f103 0508 	add.w	r5, r3, #8
 8007230:	f85b 3b04 	ldr.w	r3, [fp], #4
 8007234:	f8dc 9000 	ldr.w	r9, [ip]
 8007238:	fb43 f109 	smusd	r1, r3, r9
 800723c:	f858 0904 	ldr.w	r0, [r8], #-4
 8007240:	f8d7 a000 	ldr.w	sl, [r7]
 8007244:	fb20 110a 	smlad	r1, r0, sl, r1
 8007248:	fb40 f01a 	smusdx	r0, r0, sl
 800724c:	fb23 0319 	smladx	r3, r3, r9, r0
 8007250:	141b      	asrs	r3, r3, #16
 8007252:	1409      	asrs	r1, r1, #16
 8007254:	4258      	negs	r0, r3
 8007256:	3a01      	subs	r2, #1
 8007258:	f825 3c02 	strh.w	r3, [r5, #-2]
 800725c:	f825 1c04 	strh.w	r1, [r5, #-4]
 8007260:	4477      	add	r7, lr
 8007262:	80e0      	strh	r0, [r4, #6]
 8007264:	80a1      	strh	r1, [r4, #4]
 8007266:	44f4      	add	ip, lr
 8007268:	f105 0504 	add.w	r5, r5, #4
 800726c:	f1a4 0404 	sub.w	r4, r4, #4
 8007270:	d1de      	bne.n	8007230 <arm_rfft_q15+0x50>
 8007272:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8007276:	f9b6 3000 	ldrsh.w	r3, [r6]
 800727a:	e9dd 0400 	ldrd	r0, r4, [sp]
 800727e:	1a9b      	subs	r3, r3, r2
 8007280:	105b      	asrs	r3, r3, #1
 8007282:	1901      	adds	r1, r0, r4
 8007284:	5303      	strh	r3, [r0, r4]
 8007286:	2200      	movs	r2, #0
 8007288:	804a      	strh	r2, [r1, #2]
 800728a:	f9b6 3000 	ldrsh.w	r3, [r6]
 800728e:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 8007292:	8042      	strh	r2, [r0, #2]
 8007294:	440b      	add	r3, r1
 8007296:	105b      	asrs	r3, r3, #1
 8007298:	8003      	strh	r3, [r0, #0]
 800729a:	b003      	add	sp, #12
 800729c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a0:	440b      	add	r3, r1
 80072a2:	469a      	mov	sl, r3
 80072a4:	e9d4 c703 	ldrd	ip, r7, [r4, #12]
 80072a8:	68a3      	ldr	r3, [r4, #8]
 80072aa:	b1f5      	cbz	r5, 80072ea <arm_rfft_q15+0x10a>
 80072ac:	f8dd b000 	ldr.w	fp, [sp]
 80072b0:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80072b4:	f85a 1904 	ldr.w	r1, [sl], #-4
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	fb41 fe03 	smusd	lr, r1, r3
 80072be:	f856 8b04 	ldr.w	r8, [r6], #4
 80072c2:	f8dc 2000 	ldr.w	r2, [ip]
 80072c6:	fb28 ee02 	smlad	lr, r8, r2, lr
 80072ca:	fb21 f313 	smuadx	r3, r1, r3
 80072ce:	425b      	negs	r3, r3
 80072d0:	fb42 3218 	smlsdx	r2, r2, r8, r3
 80072d4:	0c13      	lsrs	r3, r2, #16
 80072d6:	041b      	lsls	r3, r3, #16
 80072d8:	ea43 431e 	orr.w	r3, r3, lr, lsr #16
 80072dc:	3d01      	subs	r5, #1
 80072de:	f84b 3b04 	str.w	r3, [fp], #4
 80072e2:	444f      	add	r7, r9
 80072e4:	44cc      	add	ip, r9
 80072e6:	d1e5      	bne.n	80072b4 <arm_rfft_q15+0xd4>
 80072e8:	7922      	ldrb	r2, [r4, #4]
 80072ea:	9d00      	ldr	r5, [sp, #0]
 80072ec:	7963      	ldrb	r3, [r4, #5]
 80072ee:	4629      	mov	r1, r5
 80072f0:	f000 f98a 	bl	8007608 <arm_cfft_q15>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0cf      	beq.n	800729a <arm_rfft_q15+0xba>
 80072fa:	1ea9      	subs	r1, r5, #2
 80072fc:	2200      	movs	r2, #0
 80072fe:	f931 3f02 	ldrsh.w	r3, [r1, #2]!
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	800b      	strh	r3, [r1, #0]
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	3201      	adds	r2, #1
 800730a:	4293      	cmp	r3, r2
 800730c:	d8f7      	bhi.n	80072fe <arm_rfft_q15+0x11e>
 800730e:	b003      	add	sp, #12
 8007310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007314 <arm_rfft_init_q15>:
 8007314:	b430      	push	{r4, r5}
 8007316:	b289      	uxth	r1, r1
 8007318:	4d2e      	ldr	r5, [pc, #184]	; (80073d4 <arm_rfft_init_q15+0xc0>)
 800731a:	4c2f      	ldr	r4, [pc, #188]	; (80073d8 <arm_rfft_init_q15+0xc4>)
 800731c:	7102      	strb	r2, [r0, #4]
 800731e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007322:	7143      	strb	r3, [r0, #5]
 8007324:	6001      	str	r1, [r0, #0]
 8007326:	e9c0 5403 	strd	r5, r4, [r0, #12]
 800732a:	d035      	beq.n	8007398 <arm_rfft_init_q15+0x84>
 800732c:	d919      	bls.n	8007362 <arm_rfft_init_q15+0x4e>
 800732e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8007332:	d037      	beq.n	80073a4 <arm_rfft_init_q15+0x90>
 8007334:	d90c      	bls.n	8007350 <arm_rfft_init_q15+0x3c>
 8007336:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800733a:	d039      	beq.n	80073b0 <arm_rfft_init_q15+0x9c>
 800733c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8007340:	d126      	bne.n	8007390 <arm_rfft_init_q15+0x7c>
 8007342:	2201      	movs	r2, #1
 8007344:	4b25      	ldr	r3, [pc, #148]	; (80073dc <arm_rfft_init_q15+0xc8>)
 8007346:	6082      	str	r2, [r0, #8]
 8007348:	6143      	str	r3, [r0, #20]
 800734a:	2000      	movs	r0, #0
 800734c:	bc30      	pop	{r4, r5}
 800734e:	4770      	bx	lr
 8007350:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007354:	d11c      	bne.n	8007390 <arm_rfft_init_q15+0x7c>
 8007356:	2208      	movs	r2, #8
 8007358:	4b21      	ldr	r3, [pc, #132]	; (80073e0 <arm_rfft_init_q15+0xcc>)
 800735a:	6082      	str	r2, [r0, #8]
 800735c:	6143      	str	r3, [r0, #20]
 800735e:	2000      	movs	r0, #0
 8007360:	e7f4      	b.n	800734c <arm_rfft_init_q15+0x38>
 8007362:	2940      	cmp	r1, #64	; 0x40
 8007364:	d02a      	beq.n	80073bc <arm_rfft_init_q15+0xa8>
 8007366:	d90a      	bls.n	800737e <arm_rfft_init_q15+0x6a>
 8007368:	2980      	cmp	r1, #128	; 0x80
 800736a:	d02d      	beq.n	80073c8 <arm_rfft_init_q15+0xb4>
 800736c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007370:	d10e      	bne.n	8007390 <arm_rfft_init_q15+0x7c>
 8007372:	2220      	movs	r2, #32
 8007374:	4b1b      	ldr	r3, [pc, #108]	; (80073e4 <arm_rfft_init_q15+0xd0>)
 8007376:	6082      	str	r2, [r0, #8]
 8007378:	6143      	str	r3, [r0, #20]
 800737a:	2000      	movs	r0, #0
 800737c:	e7e6      	b.n	800734c <arm_rfft_init_q15+0x38>
 800737e:	2920      	cmp	r1, #32
 8007380:	d106      	bne.n	8007390 <arm_rfft_init_q15+0x7c>
 8007382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007386:	4b18      	ldr	r3, [pc, #96]	; (80073e8 <arm_rfft_init_q15+0xd4>)
 8007388:	6082      	str	r2, [r0, #8]
 800738a:	6143      	str	r3, [r0, #20]
 800738c:	2000      	movs	r0, #0
 800738e:	e7dd      	b.n	800734c <arm_rfft_init_q15+0x38>
 8007390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007394:	bc30      	pop	{r4, r5}
 8007396:	4770      	bx	lr
 8007398:	2210      	movs	r2, #16
 800739a:	4b14      	ldr	r3, [pc, #80]	; (80073ec <arm_rfft_init_q15+0xd8>)
 800739c:	6082      	str	r2, [r0, #8]
 800739e:	6143      	str	r3, [r0, #20]
 80073a0:	2000      	movs	r0, #0
 80073a2:	e7d3      	b.n	800734c <arm_rfft_init_q15+0x38>
 80073a4:	2204      	movs	r2, #4
 80073a6:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <arm_rfft_init_q15+0xdc>)
 80073a8:	6082      	str	r2, [r0, #8]
 80073aa:	6143      	str	r3, [r0, #20]
 80073ac:	2000      	movs	r0, #0
 80073ae:	e7cd      	b.n	800734c <arm_rfft_init_q15+0x38>
 80073b0:	2202      	movs	r2, #2
 80073b2:	4b10      	ldr	r3, [pc, #64]	; (80073f4 <arm_rfft_init_q15+0xe0>)
 80073b4:	6082      	str	r2, [r0, #8]
 80073b6:	6143      	str	r3, [r0, #20]
 80073b8:	2000      	movs	r0, #0
 80073ba:	e7c7      	b.n	800734c <arm_rfft_init_q15+0x38>
 80073bc:	2280      	movs	r2, #128	; 0x80
 80073be:	4b0e      	ldr	r3, [pc, #56]	; (80073f8 <arm_rfft_init_q15+0xe4>)
 80073c0:	6082      	str	r2, [r0, #8]
 80073c2:	6143      	str	r3, [r0, #20]
 80073c4:	2000      	movs	r0, #0
 80073c6:	e7c1      	b.n	800734c <arm_rfft_init_q15+0x38>
 80073c8:	2240      	movs	r2, #64	; 0x40
 80073ca:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <arm_rfft_init_q15+0xe8>)
 80073cc:	6082      	str	r2, [r0, #8]
 80073ce:	6143      	str	r3, [r0, #20]
 80073d0:	2000      	movs	r0, #0
 80073d2:	e7bb      	b.n	800734c <arm_rfft_init_q15+0x38>
 80073d4:	08011540 	.word	0x08011540
 80073d8:	08015540 	.word	0x08015540
 80073dc:	0800d718 	.word	0x0800d718
 80073e0:	0800d728 	.word	0x0800d728
 80073e4:	0800d6c8 	.word	0x0800d6c8
 80073e8:	0800d6d8 	.word	0x0800d6d8
 80073ec:	0800d6f8 	.word	0x0800d6f8
 80073f0:	0800d6b8 	.word	0x0800d6b8
 80073f4:	0800d6e8 	.word	0x0800d6e8
 80073f8:	0800d708 	.word	0x0800d708
 80073fc:	0800d738 	.word	0x0800d738

08007400 <arm_dot_prod_q15>:
 8007400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	ea5f 0992 	movs.w	r9, r2, lsr #2
 8007408:	d036      	beq.n	8007478 <arm_dot_prod_q15+0x78>
 800740a:	468e      	mov	lr, r1
 800740c:	4684      	mov	ip, r0
 800740e:	46c8      	mov	r8, r9
 8007410:	2600      	movs	r6, #0
 8007412:	2700      	movs	r7, #0
 8007414:	f8dc a000 	ldr.w	sl, [ip]
 8007418:	f8de b000 	ldr.w	fp, [lr]
 800741c:	4635      	mov	r5, r6
 800741e:	463c      	mov	r4, r7
 8007420:	fbca 54cb 	smlald	r5, r4, sl, fp
 8007424:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007428:	f8de 7004 	ldr.w	r7, [lr, #4]
 800742c:	f10c 0c08 	add.w	ip, ip, #8
 8007430:	f10e 0e08 	add.w	lr, lr, #8
 8007434:	fbc6 54c7 	smlald	r5, r4, r6, r7
 8007438:	f1b8 0801 	subs.w	r8, r8, #1
 800743c:	462e      	mov	r6, r5
 800743e:	4627      	mov	r7, r4
 8007440:	d1e8      	bne.n	8007414 <arm_dot_prod_q15+0x14>
 8007442:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8007446:	4449      	add	r1, r9
 8007448:	4448      	add	r0, r9
 800744a:	f012 0203 	ands.w	r2, r2, #3
 800744e:	d00f      	beq.n	8007470 <arm_dot_prod_q15+0x70>
 8007450:	880d      	ldrh	r5, [r1, #0]
 8007452:	8804      	ldrh	r4, [r0, #0]
 8007454:	3a01      	subs	r2, #1
 8007456:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 800745a:	d009      	beq.n	8007470 <arm_dot_prod_q15+0x70>
 800745c:	8845      	ldrh	r5, [r0, #2]
 800745e:	884c      	ldrh	r4, [r1, #2]
 8007460:	2a01      	cmp	r2, #1
 8007462:	fbc5 6784 	smlalbb	r6, r7, r5, r4
 8007466:	d003      	beq.n	8007470 <arm_dot_prod_q15+0x70>
 8007468:	8880      	ldrh	r0, [r0, #4]
 800746a:	888a      	ldrh	r2, [r1, #4]
 800746c:	fbc0 6782 	smlalbb	r6, r7, r0, r2
 8007470:	e9c3 6700 	strd	r6, r7, [r3]
 8007474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007478:	2600      	movs	r6, #0
 800747a:	2700      	movs	r7, #0
 800747c:	e7e5      	b.n	800744a <arm_dot_prod_q15+0x4a>
 800747e:	bf00      	nop

08007480 <arm_cfft_radix4by2_q15>:
 8007480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007484:	084d      	lsrs	r5, r1, #1
 8007486:	b081      	sub	sp, #4
 8007488:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800748c:	4616      	mov	r6, r2
 800748e:	d049      	beq.n	8007524 <arm_cfft_radix4by2_q15+0xa4>
 8007490:	4604      	mov	r4, r0
 8007492:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8007540 <arm_cfft_radix4by2_q15+0xc0>
 8007496:	4696      	mov	lr, r2
 8007498:	4638      	mov	r0, r7
 800749a:	4621      	mov	r1, r4
 800749c:	462a      	mov	r2, r5
 800749e:	f04f 0c00 	mov.w	ip, #0
 80074a2:	f85e 3b04 	ldr.w	r3, [lr], #4
 80074a6:	f8d1 9000 	ldr.w	r9, [r1]
 80074aa:	fa99 f92c 	shadd16	r9, r9, ip
 80074ae:	f8d0 b000 	ldr.w	fp, [r0]
 80074b2:	fa9b fb2c 	shadd16	fp, fp, ip
 80074b6:	fad9 fa1b 	qsub16	sl, r9, fp
 80074ba:	fa99 f92b 	shadd16	r9, r9, fp
 80074be:	f841 9b04 	str.w	r9, [r1], #4
 80074c2:	fb23 f90a 	smuad	r9, r3, sl
 80074c6:	fb43 f31a 	smusdx	r3, r3, sl
 80074ca:	ea03 0308 	and.w	r3, r3, r8
 80074ce:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 80074d2:	3a01      	subs	r2, #1
 80074d4:	f840 3b04 	str.w	r3, [r0], #4
 80074d8:	d1e3      	bne.n	80074a2 <arm_cfft_radix4by2_q15+0x22>
 80074da:	4629      	mov	r1, r5
 80074dc:	2302      	movs	r3, #2
 80074de:	4632      	mov	r2, r6
 80074e0:	4620      	mov	r0, r4
 80074e2:	f000 f8fd 	bl	80076e0 <arm_radix4_butterfly_q15>
 80074e6:	4638      	mov	r0, r7
 80074e8:	4629      	mov	r1, r5
 80074ea:	4632      	mov	r2, r6
 80074ec:	2302      	movs	r3, #2
 80074ee:	f000 f8f7 	bl	80076e0 <arm_radix4_butterfly_q15>
 80074f2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80074f6:	4620      	mov	r0, r4
 80074f8:	f9b0 6000 	ldrsh.w	r6, [r0]
 80074fc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8007500:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8007504:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007508:	0076      	lsls	r6, r6, #1
 800750a:	0064      	lsls	r4, r4, #1
 800750c:	0052      	lsls	r2, r2, #1
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	8006      	strh	r6, [r0, #0]
 8007512:	8044      	strh	r4, [r0, #2]
 8007514:	8082      	strh	r2, [r0, #4]
 8007516:	80c3      	strh	r3, [r0, #6]
 8007518:	3008      	adds	r0, #8
 800751a:	4285      	cmp	r5, r0
 800751c:	d1ec      	bne.n	80074f8 <arm_cfft_radix4by2_q15+0x78>
 800751e:	b001      	add	sp, #4
 8007520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007524:	4629      	mov	r1, r5
 8007526:	2302      	movs	r3, #2
 8007528:	f000 f8da 	bl	80076e0 <arm_radix4_butterfly_q15>
 800752c:	4632      	mov	r2, r6
 800752e:	4629      	mov	r1, r5
 8007530:	4638      	mov	r0, r7
 8007532:	2302      	movs	r3, #2
 8007534:	b001      	add	sp, #4
 8007536:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753a:	f000 b8d1 	b.w	80076e0 <arm_radix4_butterfly_q15>
 800753e:	bf00      	nop
 8007540:	ffff0000 	.word	0xffff0000

08007544 <arm_cfft_radix4by2_inverse_q15>:
 8007544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007548:	084d      	lsrs	r5, r1, #1
 800754a:	b081      	sub	sp, #4
 800754c:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8007550:	4616      	mov	r6, r2
 8007552:	d049      	beq.n	80075e8 <arm_cfft_radix4by2_inverse_q15+0xa4>
 8007554:	4604      	mov	r4, r0
 8007556:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8007604 <arm_cfft_radix4by2_inverse_q15+0xc0>
 800755a:	4696      	mov	lr, r2
 800755c:	4638      	mov	r0, r7
 800755e:	4621      	mov	r1, r4
 8007560:	462a      	mov	r2, r5
 8007562:	f04f 0c00 	mov.w	ip, #0
 8007566:	f85e 3b04 	ldr.w	r3, [lr], #4
 800756a:	f8d1 9000 	ldr.w	r9, [r1]
 800756e:	fa99 f92c 	shadd16	r9, r9, ip
 8007572:	f8d0 b000 	ldr.w	fp, [r0]
 8007576:	fa9b fb2c 	shadd16	fp, fp, ip
 800757a:	fad9 fa1b 	qsub16	sl, r9, fp
 800757e:	fa99 f92b 	shadd16	r9, r9, fp
 8007582:	f841 9b04 	str.w	r9, [r1], #4
 8007586:	fb43 f90a 	smusd	r9, r3, sl
 800758a:	fb23 f31a 	smuadx	r3, r3, sl
 800758e:	ea03 0308 	and.w	r3, r3, r8
 8007592:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8007596:	3a01      	subs	r2, #1
 8007598:	f840 3b04 	str.w	r3, [r0], #4
 800759c:	d1e3      	bne.n	8007566 <arm_cfft_radix4by2_inverse_q15+0x22>
 800759e:	4629      	mov	r1, r5
 80075a0:	2302      	movs	r3, #2
 80075a2:	4632      	mov	r2, r6
 80075a4:	4620      	mov	r0, r4
 80075a6:	f000 f9cf 	bl	8007948 <arm_radix4_butterfly_inverse_q15>
 80075aa:	4638      	mov	r0, r7
 80075ac:	4629      	mov	r1, r5
 80075ae:	4632      	mov	r2, r6
 80075b0:	2302      	movs	r3, #2
 80075b2:	f000 f9c9 	bl	8007948 <arm_radix4_butterfly_inverse_q15>
 80075b6:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80075ba:	4620      	mov	r0, r4
 80075bc:	f9b0 6000 	ldrsh.w	r6, [r0]
 80075c0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80075c4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80075c8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80075cc:	0076      	lsls	r6, r6, #1
 80075ce:	0064      	lsls	r4, r4, #1
 80075d0:	0052      	lsls	r2, r2, #1
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	8006      	strh	r6, [r0, #0]
 80075d6:	8044      	strh	r4, [r0, #2]
 80075d8:	8082      	strh	r2, [r0, #4]
 80075da:	80c3      	strh	r3, [r0, #6]
 80075dc:	3008      	adds	r0, #8
 80075de:	4285      	cmp	r5, r0
 80075e0:	d1ec      	bne.n	80075bc <arm_cfft_radix4by2_inverse_q15+0x78>
 80075e2:	b001      	add	sp, #4
 80075e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e8:	4629      	mov	r1, r5
 80075ea:	2302      	movs	r3, #2
 80075ec:	f000 f9ac 	bl	8007948 <arm_radix4_butterfly_inverse_q15>
 80075f0:	4632      	mov	r2, r6
 80075f2:	4629      	mov	r1, r5
 80075f4:	4638      	mov	r0, r7
 80075f6:	2302      	movs	r3, #2
 80075f8:	b001      	add	sp, #4
 80075fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fe:	f000 b9a3 	b.w	8007948 <arm_radix4_butterfly_inverse_q15>
 8007602:	bf00      	nop
 8007604:	ffff0000 	.word	0xffff0000

08007608 <arm_cfft_q15>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	2a01      	cmp	r2, #1
 800760c:	460e      	mov	r6, r1
 800760e:	4604      	mov	r4, r0
 8007610:	461d      	mov	r5, r3
 8007612:	8801      	ldrh	r1, [r0, #0]
 8007614:	d033      	beq.n	800767e <arm_cfft_q15+0x76>
 8007616:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800761a:	d02a      	beq.n	8007672 <arm_cfft_q15+0x6a>
 800761c:	d90b      	bls.n	8007636 <arm_cfft_q15+0x2e>
 800761e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007622:	d026      	beq.n	8007672 <arm_cfft_q15+0x6a>
 8007624:	d91b      	bls.n	800765e <arm_cfft_q15+0x56>
 8007626:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800762a:	d00b      	beq.n	8007644 <arm_cfft_q15+0x3c>
 800762c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007630:	d01f      	beq.n	8007672 <arm_cfft_q15+0x6a>
 8007632:	b96d      	cbnz	r5, 8007650 <arm_cfft_q15+0x48>
 8007634:	bd70      	pop	{r4, r5, r6, pc}
 8007636:	2920      	cmp	r1, #32
 8007638:	d004      	beq.n	8007644 <arm_cfft_q15+0x3c>
 800763a:	d918      	bls.n	800766e <arm_cfft_q15+0x66>
 800763c:	2940      	cmp	r1, #64	; 0x40
 800763e:	d018      	beq.n	8007672 <arm_cfft_q15+0x6a>
 8007640:	2980      	cmp	r1, #128	; 0x80
 8007642:	d1f6      	bne.n	8007632 <arm_cfft_q15+0x2a>
 8007644:	6862      	ldr	r2, [r4, #4]
 8007646:	4630      	mov	r0, r6
 8007648:	f7ff ff1a 	bl	8007480 <arm_cfft_radix4by2_q15>
 800764c:	2d00      	cmp	r5, #0
 800764e:	d0f1      	beq.n	8007634 <arm_cfft_q15+0x2c>
 8007650:	4630      	mov	r0, r6
 8007652:	68a2      	ldr	r2, [r4, #8]
 8007654:	89a1      	ldrh	r1, [r4, #12]
 8007656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800765a:	f000 baa9 	b.w	8007bb0 <arm_bitreversal_16>
 800765e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007662:	d1e6      	bne.n	8007632 <arm_cfft_q15+0x2a>
 8007664:	6862      	ldr	r2, [r4, #4]
 8007666:	4630      	mov	r0, r6
 8007668:	f7ff ff0a 	bl	8007480 <arm_cfft_radix4by2_q15>
 800766c:	e7ee      	b.n	800764c <arm_cfft_q15+0x44>
 800766e:	2910      	cmp	r1, #16
 8007670:	d1df      	bne.n	8007632 <arm_cfft_q15+0x2a>
 8007672:	2301      	movs	r3, #1
 8007674:	6862      	ldr	r2, [r4, #4]
 8007676:	4630      	mov	r0, r6
 8007678:	f000 f832 	bl	80076e0 <arm_radix4_butterfly_q15>
 800767c:	e7d9      	b.n	8007632 <arm_cfft_q15+0x2a>
 800767e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007682:	d00a      	beq.n	800769a <arm_cfft_q15+0x92>
 8007684:	d90f      	bls.n	80076a6 <arm_cfft_q15+0x9e>
 8007686:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800768a:	d006      	beq.n	800769a <arm_cfft_q15+0x92>
 800768c:	d917      	bls.n	80076be <arm_cfft_q15+0xb6>
 800768e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8007692:	d00f      	beq.n	80076b4 <arm_cfft_q15+0xac>
 8007694:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007698:	d1cb      	bne.n	8007632 <arm_cfft_q15+0x2a>
 800769a:	2301      	movs	r3, #1
 800769c:	6862      	ldr	r2, [r4, #4]
 800769e:	4630      	mov	r0, r6
 80076a0:	f000 f952 	bl	8007948 <arm_radix4_butterfly_inverse_q15>
 80076a4:	e7c5      	b.n	8007632 <arm_cfft_q15+0x2a>
 80076a6:	2920      	cmp	r1, #32
 80076a8:	d004      	beq.n	80076b4 <arm_cfft_q15+0xac>
 80076aa:	d910      	bls.n	80076ce <arm_cfft_q15+0xc6>
 80076ac:	2940      	cmp	r1, #64	; 0x40
 80076ae:	d0f4      	beq.n	800769a <arm_cfft_q15+0x92>
 80076b0:	2980      	cmp	r1, #128	; 0x80
 80076b2:	d1be      	bne.n	8007632 <arm_cfft_q15+0x2a>
 80076b4:	6862      	ldr	r2, [r4, #4]
 80076b6:	4630      	mov	r0, r6
 80076b8:	f7ff ff44 	bl	8007544 <arm_cfft_radix4by2_inverse_q15>
 80076bc:	e7b9      	b.n	8007632 <arm_cfft_q15+0x2a>
 80076be:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80076c2:	d1b6      	bne.n	8007632 <arm_cfft_q15+0x2a>
 80076c4:	6862      	ldr	r2, [r4, #4]
 80076c6:	4630      	mov	r0, r6
 80076c8:	f7ff ff3c 	bl	8007544 <arm_cfft_radix4by2_inverse_q15>
 80076cc:	e7b1      	b.n	8007632 <arm_cfft_q15+0x2a>
 80076ce:	2910      	cmp	r1, #16
 80076d0:	d1af      	bne.n	8007632 <arm_cfft_q15+0x2a>
 80076d2:	2301      	movs	r3, #1
 80076d4:	6862      	ldr	r2, [r4, #4]
 80076d6:	4630      	mov	r0, r6
 80076d8:	f000 f936 	bl	8007948 <arm_radix4_butterfly_inverse_q15>
 80076dc:	e7a9      	b.n	8007632 <arm_cfft_q15+0x2a>
 80076de:	bf00      	nop

080076e0 <arm_radix4_butterfly_q15>:
 80076e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	088f      	lsrs	r7, r1, #2
 80076e6:	b095      	sub	sp, #84	; 0x54
 80076e8:	00be      	lsls	r6, r7, #2
 80076ea:	4684      	mov	ip, r0
 80076ec:	9011      	str	r0, [sp, #68]	; 0x44
 80076ee:	4430      	add	r0, r6
 80076f0:	9103      	str	r1, [sp, #12]
 80076f2:	1984      	adds	r4, r0, r6
 80076f4:	2100      	movs	r1, #0
 80076f6:	4d93      	ldr	r5, [pc, #588]	; (8007944 <arm_radix4_butterfly_q15+0x264>)
 80076f8:	9713      	str	r7, [sp, #76]	; 0x4c
 80076fa:	469a      	mov	sl, r3
 80076fc:	46b9      	mov	r9, r7
 80076fe:	9212      	str	r2, [sp, #72]	; 0x48
 8007700:	4667      	mov	r7, ip
 8007702:	4426      	add	r6, r4
 8007704:	460b      	mov	r3, r1
 8007706:	4694      	mov	ip, r2
 8007708:	f8d7 b000 	ldr.w	fp, [r7]
 800770c:	fa9b fb23 	shadd16	fp, fp, r3
 8007710:	fa9b fb23 	shadd16	fp, fp, r3
 8007714:	6822      	ldr	r2, [r4, #0]
 8007716:	fa92 f223 	shadd16	r2, r2, r3
 800771a:	fa92 f223 	shadd16	r2, r2, r3
 800771e:	fa9b fe12 	qadd16	lr, fp, r2
 8007722:	fadb fb12 	qsub16	fp, fp, r2
 8007726:	6802      	ldr	r2, [r0, #0]
 8007728:	fa92 f223 	shadd16	r2, r2, r3
 800772c:	fa92 f223 	shadd16	r2, r2, r3
 8007730:	f8d6 8000 	ldr.w	r8, [r6]
 8007734:	fa98 f823 	shadd16	r8, r8, r3
 8007738:	fa98 f823 	shadd16	r8, r8, r3
 800773c:	fa92 f218 	qadd16	r2, r2, r8
 8007740:	fa9e f822 	shadd16	r8, lr, r2
 8007744:	f847 8b04 	str.w	r8, [r7], #4
 8007748:	fade fe12 	qsub16	lr, lr, r2
 800774c:	f85c 2031 	ldr.w	r2, [ip, r1, lsl #3]
 8007750:	fb22 f80e 	smuad	r8, r2, lr
 8007754:	fb42 fe1e 	smusdx	lr, r2, lr
 8007758:	6802      	ldr	r2, [r0, #0]
 800775a:	fa92 f223 	shadd16	r2, r2, r3
 800775e:	fa92 f223 	shadd16	r2, r2, r3
 8007762:	ea0e 0e05 	and.w	lr, lr, r5
 8007766:	ea4e 4e18 	orr.w	lr, lr, r8, lsr #16
 800776a:	f840 eb04 	str.w	lr, [r0], #4
 800776e:	f8d6 e000 	ldr.w	lr, [r6]
 8007772:	fa9e fe23 	shadd16	lr, lr, r3
 8007776:	fa9e fe23 	shadd16	lr, lr, r3
 800777a:	fad2 f21e 	qsub16	r2, r2, lr
 800777e:	faab f812 	qasx	r8, fp, r2
 8007782:	faeb fb12 	qsax	fp, fp, r2
 8007786:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 800778a:	fb22 fe0b 	smuad	lr, r2, fp
 800778e:	fb42 f21b 	smusdx	r2, r2, fp
 8007792:	402a      	ands	r2, r5
 8007794:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 8007798:	f844 2b04 	str.w	r2, [r4], #4
 800779c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80077a0:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80077a4:	fb22 fe08 	smuad	lr, r2, r8
 80077a8:	fb42 f218 	smusdx	r2, r2, r8
 80077ac:	402a      	ands	r2, r5
 80077ae:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 80077b2:	f1b9 0901 	subs.w	r9, r9, #1
 80077b6:	f846 2b04 	str.w	r2, [r6], #4
 80077ba:	4451      	add	r1, sl
 80077bc:	d1a4      	bne.n	8007708 <arm_radix4_butterfly_q15+0x28>
 80077be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077c0:	2a04      	cmp	r2, #4
 80077c2:	ea4f 038a 	mov.w	r3, sl, lsl #2
 80077c6:	f240 80ba 	bls.w	800793e <arm_radix4_butterfly_q15+0x25e>
 80077ca:	f8df b178 	ldr.w	fp, [pc, #376]	; 8007944 <arm_radix4_butterfly_q15+0x264>
 80077ce:	f8cd 9010 	str.w	r9, [sp, #16]
 80077d2:	9202      	str	r2, [sp, #8]
 80077d4:	9c02      	ldr	r4, [sp, #8]
 80077d6:	08a1      	lsrs	r1, r4, #2
 80077d8:	0088      	lsls	r0, r1, #2
 80077da:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80077de:	0092      	lsls	r2, r2, #2
 80077e0:	900c      	str	r0, [sp, #48]	; 0x30
 80077e2:	9803      	ldr	r0, [sp, #12]
 80077e4:	920f      	str	r2, [sp, #60]	; 0x3c
 80077e6:	009a      	lsls	r2, r3, #2
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	4605      	mov	r5, r0
 80077ec:	930d      	str	r3, [sp, #52]	; 0x34
 80077ee:	9811      	ldr	r0, [sp, #68]	; 0x44
 80077f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077f2:	9110      	str	r1, [sp, #64]	; 0x40
 80077f4:	428d      	cmp	r5, r1
 80077f6:	bf28      	it	cs
 80077f8:	460d      	movcs	r5, r1
 80077fa:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 80077fe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8007802:	9306      	str	r3, [sp, #24]
 8007804:	2300      	movs	r3, #0
 8007806:	950e      	str	r5, [sp, #56]	; 0x38
 8007808:	9107      	str	r1, [sp, #28]
 800780a:	00a7      	lsls	r7, r4, #2
 800780c:	920b      	str	r2, [sp, #44]	; 0x2c
 800780e:	9008      	str	r0, [sp, #32]
 8007810:	9305      	str	r3, [sp, #20]
 8007812:	9b06      	ldr	r3, [sp, #24]
 8007814:	9a08      	ldr	r2, [sp, #32]
 8007816:	f8d3 a000 	ldr.w	sl, [r3]
 800781a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800781c:	f8dd e014 	ldr.w	lr, [sp, #20]
 8007820:	f8d3 9000 	ldr.w	r9, [r3]
 8007824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007826:	f8d3 8000 	ldr.w	r8, [r3]
 800782a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800782c:	4616      	mov	r6, r2
 800782e:	1898      	adds	r0, r3, r2
 8007830:	9a07      	ldr	r2, [sp, #28]
 8007832:	4615      	mov	r5, r2
 8007834:	1899      	adds	r1, r3, r2
 8007836:	6832      	ldr	r2, [r6, #0]
 8007838:	682c      	ldr	r4, [r5, #0]
 800783a:	fa92 f314 	qadd16	r3, r2, r4
 800783e:	fad2 f214 	qsub16	r2, r2, r4
 8007842:	6804      	ldr	r4, [r0, #0]
 8007844:	f8d1 c000 	ldr.w	ip, [r1]
 8007848:	fa94 f41c 	qadd16	r4, r4, ip
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	fa93 fc24 	shadd16	ip, r3, r4
 8007852:	9b04      	ldr	r3, [sp, #16]
 8007854:	fa9c fc23 	shadd16	ip, ip, r3
 8007858:	f8c6 c000 	str.w	ip, [r6]
 800785c:	9b01      	ldr	r3, [sp, #4]
 800785e:	443e      	add	r6, r7
 8007860:	fad3 f324 	shsub16	r3, r3, r4
 8007864:	fb29 fc03 	smuad	ip, r9, r3
 8007868:	fb49 f313 	smusdx	r3, r9, r3
 800786c:	ea03 030b 	and.w	r3, r3, fp
 8007870:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8007874:	f8d0 c000 	ldr.w	ip, [r0]
 8007878:	6003      	str	r3, [r0, #0]
 800787a:	680c      	ldr	r4, [r1, #0]
 800787c:	4438      	add	r0, r7
 800787e:	fadc f414 	qsub16	r4, ip, r4
 8007882:	faa2 f324 	shasx	r3, r2, r4
 8007886:	fae2 f224 	shsax	r2, r2, r4
 800788a:	fb2a f402 	smuad	r4, sl, r2
 800788e:	fb4a f212 	smusdx	r2, sl, r2
 8007892:	ea02 020b 	and.w	r2, r2, fp
 8007896:	ea42 4214 	orr.w	r2, r2, r4, lsr #16
 800789a:	602a      	str	r2, [r5, #0]
 800789c:	443d      	add	r5, r7
 800789e:	fb28 f203 	smuad	r2, r8, r3
 80078a2:	fb48 f313 	smusdx	r3, r8, r3
 80078a6:	ea03 030b 	and.w	r3, r3, fp
 80078aa:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 80078ae:	9a02      	ldr	r2, [sp, #8]
 80078b0:	600b      	str	r3, [r1, #0]
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	4496      	add	lr, r2
 80078b6:	4573      	cmp	r3, lr
 80078b8:	4439      	add	r1, r7
 80078ba:	d8bc      	bhi.n	8007836 <arm_radix4_butterfly_q15+0x156>
 80078bc:	9a06      	ldr	r2, [sp, #24]
 80078be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078c0:	9b05      	ldr	r3, [sp, #20]
 80078c2:	440a      	add	r2, r1
 80078c4:	9206      	str	r2, [sp, #24]
 80078c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80078c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078ca:	440a      	add	r2, r1
 80078cc:	920a      	str	r2, [sp, #40]	; 0x28
 80078ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078d2:	440a      	add	r2, r1
 80078d4:	9209      	str	r2, [sp, #36]	; 0x24
 80078d6:	9a08      	ldr	r2, [sp, #32]
 80078d8:	3204      	adds	r2, #4
 80078da:	9208      	str	r2, [sp, #32]
 80078dc:	9a07      	ldr	r2, [sp, #28]
 80078de:	3204      	adds	r2, #4
 80078e0:	9207      	str	r2, [sp, #28]
 80078e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078e4:	3301      	adds	r3, #1
 80078e6:	4293      	cmp	r3, r2
 80078e8:	9305      	str	r3, [sp, #20]
 80078ea:	d392      	bcc.n	8007812 <arm_radix4_butterfly_q15+0x132>
 80078ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078ee:	9202      	str	r2, [sp, #8]
 80078f0:	2a04      	cmp	r2, #4
 80078f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078f4:	f63f af6e 	bhi.w	80077d4 <arm_radix4_butterfly_q15+0xf4>
 80078f8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80078fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	6859      	ldr	r1, [r3, #4]
 8007900:	689f      	ldr	r7, [r3, #8]
 8007902:	68dc      	ldr	r4, [r3, #12]
 8007904:	fa92 f017 	qadd16	r0, r2, r7
 8007908:	fa91 f514 	qadd16	r5, r1, r4
 800790c:	fa90 f525 	shadd16	r5, r0, r5
 8007910:	601d      	str	r5, [r3, #0]
 8007912:	fa91 f514 	qadd16	r5, r1, r4
 8007916:	fad0 f025 	shsub16	r0, r0, r5
 800791a:	6058      	str	r0, [r3, #4]
 800791c:	fad2 f217 	qsub16	r2, r2, r7
 8007920:	fad1 f114 	qsub16	r1, r1, r4
 8007924:	fae2 f021 	shsax	r0, r2, r1
 8007928:	6098      	str	r0, [r3, #8]
 800792a:	faa2 f221 	shasx	r2, r2, r1
 800792e:	3e01      	subs	r6, #1
 8007930:	60da      	str	r2, [r3, #12]
 8007932:	f103 0310 	add.w	r3, r3, #16
 8007936:	d1e1      	bne.n	80078fc <arm_radix4_butterfly_q15+0x21c>
 8007938:	b015      	add	sp, #84	; 0x54
 800793a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793e:	4616      	mov	r6, r2
 8007940:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007942:	e7db      	b.n	80078fc <arm_radix4_butterfly_q15+0x21c>
 8007944:	ffff0000 	.word	0xffff0000

08007948 <arm_radix4_butterfly_inverse_q15>:
 8007948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	088f      	lsrs	r7, r1, #2
 800794e:	b095      	sub	sp, #84	; 0x54
 8007950:	00be      	lsls	r6, r7, #2
 8007952:	4684      	mov	ip, r0
 8007954:	9011      	str	r0, [sp, #68]	; 0x44
 8007956:	4430      	add	r0, r6
 8007958:	9103      	str	r1, [sp, #12]
 800795a:	1984      	adds	r4, r0, r6
 800795c:	2100      	movs	r1, #0
 800795e:	4d93      	ldr	r5, [pc, #588]	; (8007bac <arm_radix4_butterfly_inverse_q15+0x264>)
 8007960:	9713      	str	r7, [sp, #76]	; 0x4c
 8007962:	469a      	mov	sl, r3
 8007964:	46b9      	mov	r9, r7
 8007966:	9212      	str	r2, [sp, #72]	; 0x48
 8007968:	4667      	mov	r7, ip
 800796a:	4426      	add	r6, r4
 800796c:	460b      	mov	r3, r1
 800796e:	4694      	mov	ip, r2
 8007970:	f8d7 b000 	ldr.w	fp, [r7]
 8007974:	fa9b fb23 	shadd16	fp, fp, r3
 8007978:	fa9b fb23 	shadd16	fp, fp, r3
 800797c:	6822      	ldr	r2, [r4, #0]
 800797e:	fa92 f223 	shadd16	r2, r2, r3
 8007982:	fa92 f223 	shadd16	r2, r2, r3
 8007986:	fa9b fe12 	qadd16	lr, fp, r2
 800798a:	fadb fb12 	qsub16	fp, fp, r2
 800798e:	6802      	ldr	r2, [r0, #0]
 8007990:	fa92 f223 	shadd16	r2, r2, r3
 8007994:	fa92 f223 	shadd16	r2, r2, r3
 8007998:	f8d6 8000 	ldr.w	r8, [r6]
 800799c:	fa98 f823 	shadd16	r8, r8, r3
 80079a0:	fa98 f823 	shadd16	r8, r8, r3
 80079a4:	fa92 f218 	qadd16	r2, r2, r8
 80079a8:	fa9e f822 	shadd16	r8, lr, r2
 80079ac:	f847 8b04 	str.w	r8, [r7], #4
 80079b0:	fade fe12 	qsub16	lr, lr, r2
 80079b4:	f85c 2031 	ldr.w	r2, [ip, r1, lsl #3]
 80079b8:	fb42 f80e 	smusd	r8, r2, lr
 80079bc:	fb22 fe1e 	smuadx	lr, r2, lr
 80079c0:	6802      	ldr	r2, [r0, #0]
 80079c2:	fa92 f223 	shadd16	r2, r2, r3
 80079c6:	fa92 f223 	shadd16	r2, r2, r3
 80079ca:	ea0e 0e05 	and.w	lr, lr, r5
 80079ce:	ea4e 4e18 	orr.w	lr, lr, r8, lsr #16
 80079d2:	f840 eb04 	str.w	lr, [r0], #4
 80079d6:	f8d6 e000 	ldr.w	lr, [r6]
 80079da:	fa9e fe23 	shadd16	lr, lr, r3
 80079de:	fa9e fe23 	shadd16	lr, lr, r3
 80079e2:	fad2 f21e 	qsub16	r2, r2, lr
 80079e6:	faeb f812 	qsax	r8, fp, r2
 80079ea:	faab fb12 	qasx	fp, fp, r2
 80079ee:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 80079f2:	fb42 fe0b 	smusd	lr, r2, fp
 80079f6:	fb22 f21b 	smuadx	r2, r2, fp
 80079fa:	402a      	ands	r2, r5
 80079fc:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 8007a00:	f844 2b04 	str.w	r2, [r4], #4
 8007a04:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007a08:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8007a0c:	fb42 fe08 	smusd	lr, r2, r8
 8007a10:	fb22 f218 	smuadx	r2, r2, r8
 8007a14:	402a      	ands	r2, r5
 8007a16:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 8007a1a:	f1b9 0901 	subs.w	r9, r9, #1
 8007a1e:	f846 2b04 	str.w	r2, [r6], #4
 8007a22:	4451      	add	r1, sl
 8007a24:	d1a4      	bne.n	8007970 <arm_radix4_butterfly_inverse_q15+0x28>
 8007a26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a28:	2a04      	cmp	r2, #4
 8007a2a:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8007a2e:	f240 80ba 	bls.w	8007ba6 <arm_radix4_butterfly_inverse_q15+0x25e>
 8007a32:	f8df b178 	ldr.w	fp, [pc, #376]	; 8007bac <arm_radix4_butterfly_inverse_q15+0x264>
 8007a36:	f8cd 9010 	str.w	r9, [sp, #16]
 8007a3a:	9202      	str	r2, [sp, #8]
 8007a3c:	9c02      	ldr	r4, [sp, #8]
 8007a3e:	08a1      	lsrs	r1, r4, #2
 8007a40:	0088      	lsls	r0, r1, #2
 8007a42:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007a46:	0092      	lsls	r2, r2, #2
 8007a48:	900c      	str	r0, [sp, #48]	; 0x30
 8007a4a:	9803      	ldr	r0, [sp, #12]
 8007a4c:	920f      	str	r2, [sp, #60]	; 0x3c
 8007a4e:	009a      	lsls	r2, r3, #2
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	4605      	mov	r5, r0
 8007a54:	930d      	str	r3, [sp, #52]	; 0x34
 8007a56:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007a58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a5a:	9110      	str	r1, [sp, #64]	; 0x40
 8007a5c:	428d      	cmp	r5, r1
 8007a5e:	bf28      	it	cs
 8007a60:	460d      	movcs	r5, r1
 8007a62:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8007a66:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8007a6a:	9306      	str	r3, [sp, #24]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	950e      	str	r5, [sp, #56]	; 0x38
 8007a70:	9107      	str	r1, [sp, #28]
 8007a72:	00a7      	lsls	r7, r4, #2
 8007a74:	920b      	str	r2, [sp, #44]	; 0x2c
 8007a76:	9008      	str	r0, [sp, #32]
 8007a78:	9305      	str	r3, [sp, #20]
 8007a7a:	9b06      	ldr	r3, [sp, #24]
 8007a7c:	9a08      	ldr	r2, [sp, #32]
 8007a7e:	f8d3 a000 	ldr.w	sl, [r3]
 8007a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a84:	f8dd e014 	ldr.w	lr, [sp, #20]
 8007a88:	f8d3 9000 	ldr.w	r9, [r3]
 8007a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8e:	f8d3 8000 	ldr.w	r8, [r3]
 8007a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a94:	4616      	mov	r6, r2
 8007a96:	1898      	adds	r0, r3, r2
 8007a98:	9a07      	ldr	r2, [sp, #28]
 8007a9a:	4615      	mov	r5, r2
 8007a9c:	1899      	adds	r1, r3, r2
 8007a9e:	6832      	ldr	r2, [r6, #0]
 8007aa0:	682c      	ldr	r4, [r5, #0]
 8007aa2:	fa92 f314 	qadd16	r3, r2, r4
 8007aa6:	fad2 f214 	qsub16	r2, r2, r4
 8007aaa:	6804      	ldr	r4, [r0, #0]
 8007aac:	f8d1 c000 	ldr.w	ip, [r1]
 8007ab0:	fa94 f41c 	qadd16	r4, r4, ip
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	fa93 fc24 	shadd16	ip, r3, r4
 8007aba:	9b04      	ldr	r3, [sp, #16]
 8007abc:	fa9c fc23 	shadd16	ip, ip, r3
 8007ac0:	f8c6 c000 	str.w	ip, [r6]
 8007ac4:	9b01      	ldr	r3, [sp, #4]
 8007ac6:	443e      	add	r6, r7
 8007ac8:	fad3 f324 	shsub16	r3, r3, r4
 8007acc:	fb49 fc03 	smusd	ip, r9, r3
 8007ad0:	fb29 f313 	smuadx	r3, r9, r3
 8007ad4:	ea03 030b 	and.w	r3, r3, fp
 8007ad8:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8007adc:	f8d0 c000 	ldr.w	ip, [r0]
 8007ae0:	6003      	str	r3, [r0, #0]
 8007ae2:	680c      	ldr	r4, [r1, #0]
 8007ae4:	4438      	add	r0, r7
 8007ae6:	fadc f414 	qsub16	r4, ip, r4
 8007aea:	fae2 f324 	shsax	r3, r2, r4
 8007aee:	faa2 f224 	shasx	r2, r2, r4
 8007af2:	fb4a f402 	smusd	r4, sl, r2
 8007af6:	fb2a f212 	smuadx	r2, sl, r2
 8007afa:	ea02 020b 	and.w	r2, r2, fp
 8007afe:	ea42 4214 	orr.w	r2, r2, r4, lsr #16
 8007b02:	602a      	str	r2, [r5, #0]
 8007b04:	443d      	add	r5, r7
 8007b06:	fb48 f203 	smusd	r2, r8, r3
 8007b0a:	fb28 f313 	smuadx	r3, r8, r3
 8007b0e:	ea03 030b 	and.w	r3, r3, fp
 8007b12:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8007b16:	9a02      	ldr	r2, [sp, #8]
 8007b18:	600b      	str	r3, [r1, #0]
 8007b1a:	9b03      	ldr	r3, [sp, #12]
 8007b1c:	4496      	add	lr, r2
 8007b1e:	4573      	cmp	r3, lr
 8007b20:	4439      	add	r1, r7
 8007b22:	d8bc      	bhi.n	8007a9e <arm_radix4_butterfly_inverse_q15+0x156>
 8007b24:	9a06      	ldr	r2, [sp, #24]
 8007b26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b28:	9b05      	ldr	r3, [sp, #20]
 8007b2a:	440a      	add	r2, r1
 8007b2c:	9206      	str	r2, [sp, #24]
 8007b2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b32:	440a      	add	r2, r1
 8007b34:	920a      	str	r2, [sp, #40]	; 0x28
 8007b36:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b3a:	440a      	add	r2, r1
 8007b3c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b3e:	9a08      	ldr	r2, [sp, #32]
 8007b40:	3204      	adds	r2, #4
 8007b42:	9208      	str	r2, [sp, #32]
 8007b44:	9a07      	ldr	r2, [sp, #28]
 8007b46:	3204      	adds	r2, #4
 8007b48:	9207      	str	r2, [sp, #28]
 8007b4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	9305      	str	r3, [sp, #20]
 8007b52:	d392      	bcc.n	8007a7a <arm_radix4_butterfly_inverse_q15+0x132>
 8007b54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b56:	9202      	str	r2, [sp, #8]
 8007b58:	2a04      	cmp	r2, #4
 8007b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b5c:	f63f af6e 	bhi.w	8007a3c <arm_radix4_butterfly_inverse_q15+0xf4>
 8007b60:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8007b62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	6859      	ldr	r1, [r3, #4]
 8007b68:	689f      	ldr	r7, [r3, #8]
 8007b6a:	68dc      	ldr	r4, [r3, #12]
 8007b6c:	fa92 f017 	qadd16	r0, r2, r7
 8007b70:	fa91 f514 	qadd16	r5, r1, r4
 8007b74:	fa90 f525 	shadd16	r5, r0, r5
 8007b78:	601d      	str	r5, [r3, #0]
 8007b7a:	fa91 f514 	qadd16	r5, r1, r4
 8007b7e:	fad0 f025 	shsub16	r0, r0, r5
 8007b82:	6058      	str	r0, [r3, #4]
 8007b84:	fad2 f217 	qsub16	r2, r2, r7
 8007b88:	fad1 f114 	qsub16	r1, r1, r4
 8007b8c:	faa2 f021 	shasx	r0, r2, r1
 8007b90:	6098      	str	r0, [r3, #8]
 8007b92:	fae2 f221 	shsax	r2, r2, r1
 8007b96:	3e01      	subs	r6, #1
 8007b98:	60da      	str	r2, [r3, #12]
 8007b9a:	f103 0310 	add.w	r3, r3, #16
 8007b9e:	d1e1      	bne.n	8007b64 <arm_radix4_butterfly_inverse_q15+0x21c>
 8007ba0:	b015      	add	sp, #84	; 0x54
 8007ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba6:	4616      	mov	r6, r2
 8007ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007baa:	e7db      	b.n	8007b64 <arm_radix4_butterfly_inverse_q15+0x21c>
 8007bac:	ffff0000 	.word	0xffff0000

08007bb0 <arm_bitreversal_16>:
 8007bb0:	b1f1      	cbz	r1, 8007bf0 <arm_bitreversal_16+0x40>
 8007bb2:	b4f0      	push	{r4, r5, r6, r7}
 8007bb4:	2400      	movs	r4, #0
 8007bb6:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8007bba:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8007bbe:	886d      	ldrh	r5, [r5, #2]
 8007bc0:	08ad      	lsrs	r5, r5, #2
 8007bc2:	089b      	lsrs	r3, r3, #2
 8007bc4:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 8007bc8:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 8007bcc:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 8007bd0:	006e      	lsls	r6, r5, #1
 8007bd2:	005b      	lsls	r3, r3, #1
 8007bd4:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 8007bd8:	3302      	adds	r3, #2
 8007bda:	1cb5      	adds	r5, r6, #2
 8007bdc:	3402      	adds	r4, #2
 8007bde:	b2a4      	uxth	r4, r4
 8007be0:	5ac6      	ldrh	r6, [r0, r3]
 8007be2:	5b47      	ldrh	r7, [r0, r5]
 8007be4:	52c7      	strh	r7, [r0, r3]
 8007be6:	42a1      	cmp	r1, r4
 8007be8:	5346      	strh	r6, [r0, r5]
 8007bea:	d8e4      	bhi.n	8007bb6 <arm_bitreversal_16+0x6>
 8007bec:	bcf0      	pop	{r4, r5, r6, r7}
 8007bee:	4770      	bx	lr
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop

08007bf4 <ai_buffer_get_size>:
 8007bf4:	b370      	cbz	r0, 8007c54 <ai_buffer_get_size+0x60>
 8007bf6:	b410      	push	{r4}
 8007bf8:	6803      	ldr	r3, [r0, #0]
 8007bfa:	4a17      	ldr	r2, [pc, #92]	; (8007c58 <ai_buffer_get_size+0x64>)
 8007bfc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007c00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d01d      	beq.n	8007c44 <ai_buffer_get_size+0x50>
 8007c08:	6984      	ldr	r4, [r0, #24]
 8007c0a:	6862      	ldr	r2, [r4, #4]
 8007c0c:	7d03      	ldrb	r3, [r0, #20]
 8007c0e:	6941      	ldr	r1, [r0, #20]
 8007c10:	f1a3 0301 	sub.w	r3, r3, #1
 8007c14:	fab3 f383 	clz	r3, r3
 8007c18:	095b      	lsrs	r3, r3, #5
 8007c1a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8007c1e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8007c22:	da0b      	bge.n	8007c3c <ai_buffer_get_size+0x48>
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d102      	bne.n	8007c2e <ai_buffer_get_size+0x3a>
 8007c28:	2802      	cmp	r0, #2
 8007c2a:	d007      	beq.n	8007c3c <ai_buffer_get_size+0x48>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8007c32:	3301      	adds	r3, #1
 8007c34:	4298      	cmp	r0, r3
 8007c36:	fb01 f202 	mul.w	r2, r1, r2
 8007c3a:	d1f3      	bne.n	8007c24 <ai_buffer_get_size+0x30>
 8007c3c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8007c40:	bc10      	pop	{r4}
 8007c42:	4770      	bx	lr
 8007c44:	2900      	cmp	r1, #0
 8007c46:	d0df      	beq.n	8007c08 <ai_buffer_get_size+0x14>
 8007c48:	6984      	ldr	r4, [r0, #24]
 8007c4a:	6862      	ldr	r2, [r4, #4]
 8007c4c:	321f      	adds	r2, #31
 8007c4e:	f022 021f 	bic.w	r2, r2, #31
 8007c52:	e7db      	b.n	8007c0c <ai_buffer_get_size+0x18>
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	000400c0 	.word	0x000400c0

08007c5c <ai_buffer_array_sane>:
 8007c5c:	b138      	cbz	r0, 8007c6e <ai_buffer_array_sane+0x12>
 8007c5e:	6843      	ldr	r3, [r0, #4]
 8007c60:	b123      	cbz	r3, 8007c6c <ai_buffer_array_sane+0x10>
 8007c62:	8840      	ldrh	r0, [r0, #2]
 8007c64:	3800      	subs	r0, #0
 8007c66:	bf18      	it	ne
 8007c68:	2001      	movne	r0, #1
 8007c6a:	4770      	bx	lr
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	4770      	bx	lr

08007c70 <ai_buffer_array_item_set_address>:
 8007c70:	b150      	cbz	r0, 8007c88 <ai_buffer_array_item_set_address+0x18>
 8007c72:	6843      	ldr	r3, [r0, #4]
 8007c74:	b14b      	cbz	r3, 8007c8a <ai_buffer_array_item_set_address+0x1a>
 8007c76:	8840      	ldrh	r0, [r0, #2]
 8007c78:	b900      	cbnz	r0, 8007c7c <ai_buffer_array_item_set_address+0xc>
 8007c7a:	4770      	bx	lr
 8007c7c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007c80:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007c84:	2001      	movs	r0, #1
 8007c86:	604a      	str	r2, [r1, #4]
 8007c88:	4770      	bx	lr
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop

08007c90 <_ai_platform_acquire_crc>:
 8007c90:	2001      	movs	r0, #1
 8007c92:	4770      	bx	lr

08007c94 <_ai_platform_release_crc>:
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop

08007c98 <ai_platform_get_weights_map>:
 8007c98:	2a00      	cmp	r2, #0
 8007c9a:	d037      	beq.n	8007d0c <ai_platform_get_weights_map+0x74>
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	b1a0      	cbz	r0, 8007ccc <ai_platform_get_weights_map+0x34>
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	b191      	cbz	r1, 8007ccc <ai_platform_get_weights_map+0x34>
 8007ca6:	4b25      	ldr	r3, [pc, #148]	; (8007d3c <ai_platform_get_weights_map+0xa4>)
 8007ca8:	6811      	ldr	r1, [r2, #0]
 8007caa:	4299      	cmp	r1, r3
 8007cac:	4616      	mov	r6, r2
 8007cae:	d00f      	beq.n	8007cd0 <ai_platform_get_weights_map+0x38>
 8007cb0:	6856      	ldr	r6, [r2, #4]
 8007cb2:	b15e      	cbz	r6, 8007ccc <ai_platform_get_weights_map+0x34>
 8007cb4:	6837      	ldr	r7, [r6, #0]
 8007cb6:	429f      	cmp	r7, r3
 8007cb8:	d02a      	beq.n	8007d10 <ai_platform_get_weights_map+0x78>
 8007cba:	6006      	str	r6, [r0, #0]
 8007cbc:	f1a4 0001 	sub.w	r0, r4, #1
 8007cc0:	fab0 f080 	clz	r0, r0
 8007cc4:	0940      	lsrs	r0, r0, #5
 8007cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cc8:	4284      	cmp	r4, r0
 8007cca:	d034      	beq.n	8007d36 <ai_platform_get_weights_map+0x9e>
 8007ccc:	2000      	movs	r0, #0
 8007cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cd0:	1d10      	adds	r0, r2, #4
 8007cd2:	f7ff ffc3 	bl	8007c5c <ai_buffer_array_sane>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d0f8      	beq.n	8007ccc <ai_platform_get_weights_map+0x34>
 8007cda:	88f3      	ldrh	r3, [r6, #6]
 8007cdc:	429c      	cmp	r4, r3
 8007cde:	d1f5      	bne.n	8007ccc <ai_platform_get_weights_map+0x34>
 8007ce0:	f04f 0c00 	mov.w	ip, #0
 8007ce4:	1f28      	subs	r0, r5, #4
 8007ce6:	46e6      	mov	lr, ip
 8007ce8:	68b1      	ldr	r1, [r6, #8]
 8007cea:	4461      	add	r1, ip
 8007cec:	f10c 0c1c 	add.w	ip, ip, #28
 8007cf0:	6849      	ldr	r1, [r1, #4]
 8007cf2:	b129      	cbz	r1, 8007d00 <ai_platform_get_weights_map+0x68>
 8007cf4:	f10e 0e01 	add.w	lr, lr, #1
 8007cf8:	4574      	cmp	r4, lr
 8007cfa:	f840 1f04 	str.w	r1, [r0, #4]!
 8007cfe:	d1f3      	bne.n	8007ce8 <ai_platform_get_weights_map+0x50>
 8007d00:	eba4 000e 	sub.w	r0, r4, lr
 8007d04:	fab0 f080 	clz	r0, r0
 8007d08:	0940      	lsrs	r0, r0, #5
 8007d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	4770      	bx	lr
 8007d10:	1f03      	subs	r3, r0, #4
 8007d12:	4631      	mov	r1, r6
 8007d14:	2000      	movs	r0, #0
 8007d16:	e000      	b.n	8007d1a <ai_platform_get_weights_map+0x82>
 8007d18:	4610      	mov	r0, r2
 8007d1a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8007d1e:	42ba      	cmp	r2, r7
 8007d20:	d0d2      	beq.n	8007cc8 <ai_platform_get_weights_map+0x30>
 8007d22:	f843 2f04 	str.w	r2, [r3, #4]!
 8007d26:	1c42      	adds	r2, r0, #1
 8007d28:	4294      	cmp	r4, r2
 8007d2a:	d1f5      	bne.n	8007d18 <ai_platform_get_weights_map+0x80>
 8007d2c:	3002      	adds	r0, #2
 8007d2e:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 8007d32:	42bb      	cmp	r3, r7
 8007d34:	d1ca      	bne.n	8007ccc <ai_platform_get_weights_map+0x34>
 8007d36:	2001      	movs	r0, #1
 8007d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	a1facade 	.word	0xa1facade

08007d40 <ai_platform_get_activations_map>:
 8007d40:	2a00      	cmp	r2, #0
 8007d42:	d038      	beq.n	8007db6 <ai_platform_get_activations_map+0x76>
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	4605      	mov	r5, r0
 8007d48:	b1a0      	cbz	r0, 8007d74 <ai_platform_get_activations_map+0x34>
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	b191      	cbz	r1, 8007d74 <ai_platform_get_activations_map+0x34>
 8007d4e:	4b25      	ldr	r3, [pc, #148]	; (8007de4 <ai_platform_get_activations_map+0xa4>)
 8007d50:	6811      	ldr	r1, [r2, #0]
 8007d52:	4299      	cmp	r1, r3
 8007d54:	4616      	mov	r6, r2
 8007d56:	d00f      	beq.n	8007d78 <ai_platform_get_activations_map+0x38>
 8007d58:	6a16      	ldr	r6, [r2, #32]
 8007d5a:	b15e      	cbz	r6, 8007d74 <ai_platform_get_activations_map+0x34>
 8007d5c:	6837      	ldr	r7, [r6, #0]
 8007d5e:	429f      	cmp	r7, r3
 8007d60:	d02b      	beq.n	8007dba <ai_platform_get_activations_map+0x7a>
 8007d62:	6006      	str	r6, [r0, #0]
 8007d64:	f1a4 0001 	sub.w	r0, r4, #1
 8007d68:	fab0 f080 	clz	r0, r0
 8007d6c:	0940      	lsrs	r0, r0, #5
 8007d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d70:	4284      	cmp	r4, r0
 8007d72:	d035      	beq.n	8007de0 <ai_platform_get_activations_map+0xa0>
 8007d74:	2000      	movs	r0, #0
 8007d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d78:	f102 000c 	add.w	r0, r2, #12
 8007d7c:	f7ff ff6e 	bl	8007c5c <ai_buffer_array_sane>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d0f7      	beq.n	8007d74 <ai_platform_get_activations_map+0x34>
 8007d84:	89f3      	ldrh	r3, [r6, #14]
 8007d86:	429c      	cmp	r4, r3
 8007d88:	d1f4      	bne.n	8007d74 <ai_platform_get_activations_map+0x34>
 8007d8a:	f04f 0c00 	mov.w	ip, #0
 8007d8e:	1f28      	subs	r0, r5, #4
 8007d90:	46e6      	mov	lr, ip
 8007d92:	6931      	ldr	r1, [r6, #16]
 8007d94:	4461      	add	r1, ip
 8007d96:	f10c 0c1c 	add.w	ip, ip, #28
 8007d9a:	6849      	ldr	r1, [r1, #4]
 8007d9c:	b129      	cbz	r1, 8007daa <ai_platform_get_activations_map+0x6a>
 8007d9e:	f10e 0e01 	add.w	lr, lr, #1
 8007da2:	4574      	cmp	r4, lr
 8007da4:	f840 1f04 	str.w	r1, [r0, #4]!
 8007da8:	d1f3      	bne.n	8007d92 <ai_platform_get_activations_map+0x52>
 8007daa:	eba4 000e 	sub.w	r0, r4, lr
 8007dae:	fab0 f080 	clz	r0, r0
 8007db2:	0940      	lsrs	r0, r0, #5
 8007db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db6:	2000      	movs	r0, #0
 8007db8:	4770      	bx	lr
 8007dba:	1f03      	subs	r3, r0, #4
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	e000      	b.n	8007dc4 <ai_platform_get_activations_map+0x84>
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8007dc8:	42ba      	cmp	r2, r7
 8007dca:	d0d1      	beq.n	8007d70 <ai_platform_get_activations_map+0x30>
 8007dcc:	f843 2f04 	str.w	r2, [r3, #4]!
 8007dd0:	1c42      	adds	r2, r0, #1
 8007dd2:	4294      	cmp	r4, r2
 8007dd4:	d1f5      	bne.n	8007dc2 <ai_platform_get_activations_map+0x82>
 8007dd6:	3002      	adds	r0, #2
 8007dd8:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 8007ddc:	42bb      	cmp	r3, r7
 8007dde:	d1c9      	bne.n	8007d74 <ai_platform_get_activations_map+0x34>
 8007de0:	2001      	movs	r0, #1
 8007de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007de4:	a1facade 	.word	0xa1facade

08007de8 <ai_platform_bind_network_params>:
 8007de8:	b198      	cbz	r0, 8007e12 <ai_platform_bind_network_params+0x2a>
 8007dea:	b1a9      	cbz	r1, 8007e18 <ai_platform_bind_network_params+0x30>
 8007dec:	b1ba      	cbz	r2, 8007e1e <ai_platform_bind_network_params+0x36>
 8007dee:	b410      	push	{r4}
 8007df0:	4603      	mov	r3, r0
 8007df2:	4c0c      	ldr	r4, [pc, #48]	; (8007e24 <ai_platform_bind_network_params+0x3c>)
 8007df4:	f843 4b04 	str.w	r4, [r3], #4
 8007df8:	f100 0c0c 	add.w	ip, r0, #12
 8007dfc:	c903      	ldmia	r1, {r0, r1}
 8007dfe:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e06:	e88c 0003 	stmia.w	ip, {r0, r1}
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	bc10      	pop	{r4}
 8007e10:	4770      	bx	lr
 8007e12:	4603      	mov	r3, r0
 8007e14:	4618      	mov	r0, r3
 8007e16:	4770      	bx	lr
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	4770      	bx	lr
 8007e1e:	4613      	mov	r3, r2
 8007e20:	4618      	mov	r0, r3
 8007e22:	4770      	bx	lr
 8007e24:	a1facade 	.word	0xa1facade

08007e28 <ai_platform_network_get_error>:
 8007e28:	b510      	push	{r4, lr}
 8007e2a:	b1f0      	cbz	r0, 8007e6a <ai_platform_network_get_error+0x42>
 8007e2c:	4b2f      	ldr	r3, [pc, #188]	; (8007eec <ai_platform_network_get_error+0xc4>)
 8007e2e:	6802      	ldr	r2, [r0, #0]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	4604      	mov	r4, r0
 8007e34:	d119      	bne.n	8007e6a <ai_platform_network_get_error+0x42>
 8007e36:	f7ff ff2b 	bl	8007c90 <_ai_platform_acquire_crc>
 8007e3a:	4b2d      	ldr	r3, [pc, #180]	; (8007ef0 <ai_platform_network_get_error+0xc8>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e46:	d03c      	beq.n	8007ec2 <ai_platform_network_get_error+0x9a>
 8007e48:	4a2a      	ldr	r2, [pc, #168]	; (8007ef4 <ai_platform_network_get_error+0xcc>)
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007e50:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1fb      	bne.n	8007e50 <ai_platform_network_get_error+0x28>
 8007e58:	4b27      	ldr	r3, [pc, #156]	; (8007ef8 <ai_platform_network_get_error+0xd0>)
 8007e5a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007e5e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007e62:	4b26      	ldr	r3, [pc, #152]	; (8007efc <ai_platform_network_get_error+0xd4>)
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d038      	beq.n	8007eda <ai_platform_network_get_error+0xb2>
 8007e68:	e7fe      	b.n	8007e68 <ai_platform_network_get_error+0x40>
 8007e6a:	f7ff ff11 	bl	8007c90 <_ai_platform_acquire_crc>
 8007e6e:	4b20      	ldr	r3, [pc, #128]	; (8007ef0 <ai_platform_network_get_error+0xc8>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e7a:	d010      	beq.n	8007e9e <ai_platform_network_get_error+0x76>
 8007e7c:	4a1d      	ldr	r2, [pc, #116]	; (8007ef4 <ai_platform_network_get_error+0xcc>)
 8007e7e:	2301      	movs	r3, #1
 8007e80:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007e84:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1fb      	bne.n	8007e84 <ai_platform_network_get_error+0x5c>
 8007e8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ef8 <ai_platform_network_get_error+0xd0>)
 8007e8e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007e92:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007e96:	4b19      	ldr	r3, [pc, #100]	; (8007efc <ai_platform_network_get_error+0xd4>)
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d00d      	beq.n	8007eb8 <ai_platform_network_get_error+0x90>
 8007e9c:	e7fe      	b.n	8007e9c <ai_platform_network_get_error+0x74>
 8007e9e:	4a18      	ldr	r2, [pc, #96]	; (8007f00 <ai_platform_network_get_error+0xd8>)
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	6093      	str	r3, [r2, #8]
 8007ea4:	6893      	ldr	r3, [r2, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1fc      	bne.n	8007ea4 <ai_platform_network_get_error+0x7c>
 8007eaa:	4b13      	ldr	r3, [pc, #76]	; (8007ef8 <ai_platform_network_get_error+0xd0>)
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	6812      	ldr	r2, [r2, #0]
 8007eb0:	4b12      	ldr	r3, [pc, #72]	; (8007efc <ai_platform_network_get_error+0xd4>)
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d000      	beq.n	8007eb8 <ai_platform_network_get_error+0x90>
 8007eb6:	e7fe      	b.n	8007eb6 <ai_platform_network_get_error+0x8e>
 8007eb8:	f7ff feec 	bl	8007c94 <_ai_platform_release_crc>
 8007ebc:	f241 0010 	movw	r0, #4112	; 0x1010
 8007ec0:	bd10      	pop	{r4, pc}
 8007ec2:	4a0f      	ldr	r2, [pc, #60]	; (8007f00 <ai_platform_network_get_error+0xd8>)
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	6093      	str	r3, [r2, #8]
 8007ec8:	6893      	ldr	r3, [r2, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1fc      	bne.n	8007ec8 <ai_platform_network_get_error+0xa0>
 8007ece:	4b0a      	ldr	r3, [pc, #40]	; (8007ef8 <ai_platform_network_get_error+0xd0>)
 8007ed0:	6013      	str	r3, [r2, #0]
 8007ed2:	6812      	ldr	r2, [r2, #0]
 8007ed4:	4b09      	ldr	r3, [pc, #36]	; (8007efc <ai_platform_network_get_error+0xd4>)
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d107      	bne.n	8007eea <ai_platform_network_get_error+0xc2>
 8007eda:	f7ff fedb 	bl	8007c94 <_ai_platform_release_crc>
 8007ede:	f104 0010 	add.w	r0, r4, #16
 8007ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee6:	f000 be8f 	b.w	8008c08 <core_get_error>
 8007eea:	e7fe      	b.n	8007eea <ai_platform_network_get_error+0xc2>
 8007eec:	a1c00100 	.word	0xa1c00100
 8007ef0:	e0042000 	.word	0xe0042000
 8007ef4:	58024000 	.word	0x58024000
 8007ef8:	f407a5c2 	.word	0xf407a5c2
 8007efc:	b5e8b5cd 	.word	0xb5e8b5cd
 8007f00:	40023000 	.word	0x40023000

08007f04 <ai_platform_network_set_error>:
 8007f04:	b110      	cbz	r0, 8007f0c <ai_platform_network_set_error+0x8>
 8007f06:	3010      	adds	r0, #16
 8007f08:	f000 be84 	b.w	8008c14 <core_set_error>
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop

08007f10 <ai_platform_inputs_get>:
 8007f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f14:	b085      	sub	sp, #20
 8007f16:	9102      	str	r1, [sp, #8]
 8007f18:	b1f0      	cbz	r0, 8007f58 <ai_platform_inputs_get+0x48>
 8007f1a:	4b63      	ldr	r3, [pc, #396]	; (80080a8 <ai_platform_inputs_get+0x198>)
 8007f1c:	6802      	ldr	r2, [r0, #0]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	4607      	mov	r7, r0
 8007f22:	d119      	bne.n	8007f58 <ai_platform_inputs_get+0x48>
 8007f24:	f7ff feb4 	bl	8007c90 <_ai_platform_acquire_crc>
 8007f28:	4b60      	ldr	r3, [pc, #384]	; (80080ac <ai_platform_inputs_get+0x19c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f34:	d03d      	beq.n	8007fb2 <ai_platform_inputs_get+0xa2>
 8007f36:	4a5e      	ldr	r2, [pc, #376]	; (80080b0 <ai_platform_inputs_get+0x1a0>)
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007f3e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1fb      	bne.n	8007f3e <ai_platform_inputs_get+0x2e>
 8007f46:	4b5b      	ldr	r3, [pc, #364]	; (80080b4 <ai_platform_inputs_get+0x1a4>)
 8007f48:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007f4c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007f50:	4b59      	ldr	r3, [pc, #356]	; (80080b8 <ai_platform_inputs_get+0x1a8>)
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d039      	beq.n	8007fca <ai_platform_inputs_get+0xba>
 8007f56:	e7fe      	b.n	8007f56 <ai_platform_inputs_get+0x46>
 8007f58:	f7ff fe9a 	bl	8007c90 <_ai_platform_acquire_crc>
 8007f5c:	4b53      	ldr	r3, [pc, #332]	; (80080ac <ai_platform_inputs_get+0x19c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f68:	d010      	beq.n	8007f8c <ai_platform_inputs_get+0x7c>
 8007f6a:	4a51      	ldr	r2, [pc, #324]	; (80080b0 <ai_platform_inputs_get+0x1a0>)
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007f72:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1fb      	bne.n	8007f72 <ai_platform_inputs_get+0x62>
 8007f7a:	4b4e      	ldr	r3, [pc, #312]	; (80080b4 <ai_platform_inputs_get+0x1a4>)
 8007f7c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007f80:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007f84:	4b4c      	ldr	r3, [pc, #304]	; (80080b8 <ai_platform_inputs_get+0x1a8>)
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d00d      	beq.n	8007fa6 <ai_platform_inputs_get+0x96>
 8007f8a:	e7fe      	b.n	8007f8a <ai_platform_inputs_get+0x7a>
 8007f8c:	4a4b      	ldr	r2, [pc, #300]	; (80080bc <ai_platform_inputs_get+0x1ac>)
 8007f8e:	2301      	movs	r3, #1
 8007f90:	6093      	str	r3, [r2, #8]
 8007f92:	6893      	ldr	r3, [r2, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1fc      	bne.n	8007f92 <ai_platform_inputs_get+0x82>
 8007f98:	4b46      	ldr	r3, [pc, #280]	; (80080b4 <ai_platform_inputs_get+0x1a4>)
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	6812      	ldr	r2, [r2, #0]
 8007f9e:	4b46      	ldr	r3, [pc, #280]	; (80080b8 <ai_platform_inputs_get+0x1a8>)
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d000      	beq.n	8007fa6 <ai_platform_inputs_get+0x96>
 8007fa4:	e7fe      	b.n	8007fa4 <ai_platform_inputs_get+0x94>
 8007fa6:	f7ff fe75 	bl	8007c94 <_ai_platform_release_crc>
 8007faa:	2000      	movs	r0, #0
 8007fac:	b005      	add	sp, #20
 8007fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb2:	4a42      	ldr	r2, [pc, #264]	; (80080bc <ai_platform_inputs_get+0x1ac>)
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	6093      	str	r3, [r2, #8]
 8007fb8:	6893      	ldr	r3, [r2, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1fc      	bne.n	8007fb8 <ai_platform_inputs_get+0xa8>
 8007fbe:	4b3d      	ldr	r3, [pc, #244]	; (80080b4 <ai_platform_inputs_get+0x1a4>)
 8007fc0:	6013      	str	r3, [r2, #0]
 8007fc2:	6812      	ldr	r2, [r2, #0]
 8007fc4:	4b3c      	ldr	r3, [pc, #240]	; (80080b8 <ai_platform_inputs_get+0x1a8>)
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d157      	bne.n	800807a <ai_platform_inputs_get+0x16a>
 8007fca:	f7ff fe63 	bl	8007c94 <_ai_platform_release_crc>
 8007fce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d053      	beq.n	800807c <ai_platform_inputs_get+0x16c>
 8007fd4:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8007fd8:	f1ba 0f00 	cmp.w	sl, #0
 8007fdc:	d04e      	beq.n	800807c <ai_platform_inputs_get+0x16c>
 8007fde:	f04f 0b00 	mov.w	fp, #0
 8007fe2:	465d      	mov	r5, fp
 8007fe4:	9703      	str	r7, [sp, #12]
 8007fe6:	e018      	b.n	800801a <ai_platform_inputs_get+0x10a>
 8007fe8:	9901      	ldr	r1, [sp, #4]
 8007fea:	f04f 0c01 	mov.w	ip, #1
 8007fee:	f847 c001 	str.w	ip, [r7, r1]
 8007ff2:	69b1      	ldr	r1, [r6, #24]
 8007ff4:	6849      	ldr	r1, [r1, #4]
 8007ff6:	6121      	str	r1, [r4, #16]
 8007ff8:	e9c4 3200 	strd	r3, r2, [r4]
 8007ffc:	f04f 0301 	mov.w	r3, #1
 8008000:	7523      	strb	r3, [r4, #20]
 8008002:	6962      	ldr	r2, [r4, #20]
 8008004:	60a0      	str	r0, [r4, #8]
 8008006:	2300      	movs	r3, #0
 8008008:	f369 221f 	bfi	r2, r9, #8, #24
 800800c:	f8c4 8018 	str.w	r8, [r4, #24]
 8008010:	60e3      	str	r3, [r4, #12]
 8008012:	3501      	adds	r5, #1
 8008014:	f10b 0b1c 	add.w	fp, fp, #28
 8008018:	6162      	str	r2, [r4, #20]
 800801a:	f8ba 3000 	ldrh.w	r3, [sl]
 800801e:	42ab      	cmp	r3, r5
 8008020:	b2aa      	uxth	r2, r5
 8008022:	d93a      	bls.n	800809a <ai_platform_inputs_get+0x18a>
 8008024:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008028:	00e9      	lsls	r1, r5, #3
 800802a:	9101      	str	r1, [sp, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d034      	beq.n	800809a <ai_platform_inputs_get+0x18a>
 8008030:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8008034:	2e00      	cmp	r6, #0
 8008036:	d030      	beq.n	800809a <ai_platform_inputs_get+0x18a>
 8008038:	f8da 3008 	ldr.w	r3, [sl, #8]
 800803c:	69b2      	ldr	r2, [r6, #24]
 800803e:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8008042:	6810      	ldr	r0, [r2, #0]
 8008044:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8008048:	68b3      	ldr	r3, [r6, #8]
 800804a:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800804e:	f004 fa91 	bl	800c574 <ai_array_to_buffer_fmt>
 8008052:	69b1      	ldr	r1, [r6, #24]
 8008054:	4603      	mov	r3, r0
 8008056:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800805a:	688a      	ldr	r2, [r1, #8]
 800805c:	445c      	add	r4, fp
 800805e:	2800      	cmp	r0, #0
 8008060:	d0c8      	beq.n	8007ff4 <ai_platform_inputs_get+0xe4>
 8008062:	2100      	movs	r1, #0
 8008064:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8008068:	6831      	ldr	r1, [r6, #0]
 800806a:	6041      	str	r1, [r0, #4]
 800806c:	b111      	cbz	r1, 8008074 <ai_platform_inputs_get+0x164>
 800806e:	8849      	ldrh	r1, [r1, #2]
 8008070:	2900      	cmp	r1, #0
 8008072:	d1b9      	bne.n	8007fe8 <ai_platform_inputs_get+0xd8>
 8008074:	69b1      	ldr	r1, [r6, #24]
 8008076:	2000      	movs	r0, #0
 8008078:	e7bc      	b.n	8007ff4 <ai_platform_inputs_get+0xe4>
 800807a:	e7fe      	b.n	800807a <ai_platform_inputs_get+0x16a>
 800807c:	2218      	movs	r2, #24
 800807e:	2111      	movs	r1, #17
 8008080:	f107 0010 	add.w	r0, r7, #16
 8008084:	f000 fdc6 	bl	8008c14 <core_set_error>
 8008088:	2200      	movs	r2, #0
 800808a:	4610      	mov	r0, r2
 800808c:	9b02      	ldr	r3, [sp, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d08c      	beq.n	8007fac <ai_platform_inputs_get+0x9c>
 8008092:	801a      	strh	r2, [r3, #0]
 8008094:	b005      	add	sp, #20
 8008096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809a:	9f03      	ldr	r7, [sp, #12]
 800809c:	2a00      	cmp	r2, #0
 800809e:	d0ed      	beq.n	800807c <ai_platform_inputs_get+0x16c>
 80080a0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80080a4:	6858      	ldr	r0, [r3, #4]
 80080a6:	e7f1      	b.n	800808c <ai_platform_inputs_get+0x17c>
 80080a8:	a1c00100 	.word	0xa1c00100
 80080ac:	e0042000 	.word	0xe0042000
 80080b0:	58024000 	.word	0x58024000
 80080b4:	f407a5c2 	.word	0xf407a5c2
 80080b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80080bc:	40023000 	.word	0x40023000

080080c0 <ai_platform_outputs_get>:
 80080c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	b085      	sub	sp, #20
 80080c6:	9102      	str	r1, [sp, #8]
 80080c8:	b1f0      	cbz	r0, 8008108 <ai_platform_outputs_get+0x48>
 80080ca:	4b60      	ldr	r3, [pc, #384]	; (800824c <ai_platform_outputs_get+0x18c>)
 80080cc:	6802      	ldr	r2, [r0, #0]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	4607      	mov	r7, r0
 80080d2:	d119      	bne.n	8008108 <ai_platform_outputs_get+0x48>
 80080d4:	f7ff fddc 	bl	8007c90 <_ai_platform_acquire_crc>
 80080d8:	4b5d      	ldr	r3, [pc, #372]	; (8008250 <ai_platform_outputs_get+0x190>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080e4:	d03d      	beq.n	8008162 <ai_platform_outputs_get+0xa2>
 80080e6:	4a5b      	ldr	r2, [pc, #364]	; (8008254 <ai_platform_outputs_get+0x194>)
 80080e8:	2301      	movs	r3, #1
 80080ea:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80080ee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1fb      	bne.n	80080ee <ai_platform_outputs_get+0x2e>
 80080f6:	4b58      	ldr	r3, [pc, #352]	; (8008258 <ai_platform_outputs_get+0x198>)
 80080f8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80080fc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008100:	4b56      	ldr	r3, [pc, #344]	; (800825c <ai_platform_outputs_get+0x19c>)
 8008102:	429a      	cmp	r2, r3
 8008104:	d039      	beq.n	800817a <ai_platform_outputs_get+0xba>
 8008106:	e7fe      	b.n	8008106 <ai_platform_outputs_get+0x46>
 8008108:	f7ff fdc2 	bl	8007c90 <_ai_platform_acquire_crc>
 800810c:	4b50      	ldr	r3, [pc, #320]	; (8008250 <ai_platform_outputs_get+0x190>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008118:	d010      	beq.n	800813c <ai_platform_outputs_get+0x7c>
 800811a:	4a4e      	ldr	r2, [pc, #312]	; (8008254 <ai_platform_outputs_get+0x194>)
 800811c:	2301      	movs	r3, #1
 800811e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008122:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1fb      	bne.n	8008122 <ai_platform_outputs_get+0x62>
 800812a:	4b4b      	ldr	r3, [pc, #300]	; (8008258 <ai_platform_outputs_get+0x198>)
 800812c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008130:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008134:	4b49      	ldr	r3, [pc, #292]	; (800825c <ai_platform_outputs_get+0x19c>)
 8008136:	429a      	cmp	r2, r3
 8008138:	d00d      	beq.n	8008156 <ai_platform_outputs_get+0x96>
 800813a:	e7fe      	b.n	800813a <ai_platform_outputs_get+0x7a>
 800813c:	4a48      	ldr	r2, [pc, #288]	; (8008260 <ai_platform_outputs_get+0x1a0>)
 800813e:	2301      	movs	r3, #1
 8008140:	6093      	str	r3, [r2, #8]
 8008142:	6893      	ldr	r3, [r2, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1fc      	bne.n	8008142 <ai_platform_outputs_get+0x82>
 8008148:	4b43      	ldr	r3, [pc, #268]	; (8008258 <ai_platform_outputs_get+0x198>)
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	6812      	ldr	r2, [r2, #0]
 800814e:	4b43      	ldr	r3, [pc, #268]	; (800825c <ai_platform_outputs_get+0x19c>)
 8008150:	429a      	cmp	r2, r3
 8008152:	d000      	beq.n	8008156 <ai_platform_outputs_get+0x96>
 8008154:	e7fe      	b.n	8008154 <ai_platform_outputs_get+0x94>
 8008156:	f7ff fd9d 	bl	8007c94 <_ai_platform_release_crc>
 800815a:	2000      	movs	r0, #0
 800815c:	b005      	add	sp, #20
 800815e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008162:	4a3f      	ldr	r2, [pc, #252]	; (8008260 <ai_platform_outputs_get+0x1a0>)
 8008164:	2301      	movs	r3, #1
 8008166:	6093      	str	r3, [r2, #8]
 8008168:	6893      	ldr	r3, [r2, #8]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1fc      	bne.n	8008168 <ai_platform_outputs_get+0xa8>
 800816e:	4b3a      	ldr	r3, [pc, #232]	; (8008258 <ai_platform_outputs_get+0x198>)
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	6812      	ldr	r2, [r2, #0]
 8008174:	4b39      	ldr	r3, [pc, #228]	; (800825c <ai_platform_outputs_get+0x19c>)
 8008176:	429a      	cmp	r2, r3
 8008178:	d152      	bne.n	8008220 <ai_platform_outputs_get+0x160>
 800817a:	f7ff fd8b 	bl	8007c94 <_ai_platform_release_crc>
 800817e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008180:	2b01      	cmp	r3, #1
 8008182:	d95a      	bls.n	800823a <ai_platform_outputs_get+0x17a>
 8008184:	f04f 0b00 	mov.w	fp, #0
 8008188:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800818c:	9703      	str	r7, [sp, #12]
 800818e:	465d      	mov	r5, fp
 8008190:	e018      	b.n	80081c4 <ai_platform_outputs_get+0x104>
 8008192:	9901      	ldr	r1, [sp, #4]
 8008194:	f04f 0c01 	mov.w	ip, #1
 8008198:	f847 c001 	str.w	ip, [r7, r1]
 800819c:	69b1      	ldr	r1, [r6, #24]
 800819e:	6849      	ldr	r1, [r1, #4]
 80081a0:	6121      	str	r1, [r4, #16]
 80081a2:	e9c4 3200 	strd	r3, r2, [r4]
 80081a6:	f04f 0301 	mov.w	r3, #1
 80081aa:	7523      	strb	r3, [r4, #20]
 80081ac:	6962      	ldr	r2, [r4, #20]
 80081ae:	60a0      	str	r0, [r4, #8]
 80081b0:	2300      	movs	r3, #0
 80081b2:	f369 221f 	bfi	r2, r9, #8, #24
 80081b6:	f8c4 8018 	str.w	r8, [r4, #24]
 80081ba:	60e3      	str	r3, [r4, #12]
 80081bc:	3501      	adds	r5, #1
 80081be:	f10b 0b1c 	add.w	fp, fp, #28
 80081c2:	6162      	str	r2, [r4, #20]
 80081c4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80081c8:	42ab      	cmp	r3, r5
 80081ca:	b2aa      	uxth	r2, r5
 80081cc:	d929      	bls.n	8008222 <ai_platform_outputs_get+0x162>
 80081ce:	f8da 3010 	ldr.w	r3, [sl, #16]
 80081d2:	00e9      	lsls	r1, r5, #3
 80081d4:	9101      	str	r1, [sp, #4]
 80081d6:	b323      	cbz	r3, 8008222 <ai_platform_outputs_get+0x162>
 80081d8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80081dc:	b30e      	cbz	r6, 8008222 <ai_platform_outputs_get+0x162>
 80081de:	f8da 3014 	ldr.w	r3, [sl, #20]
 80081e2:	69b2      	ldr	r2, [r6, #24]
 80081e4:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80081e8:	6810      	ldr	r0, [r2, #0]
 80081ea:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80081ee:	68b3      	ldr	r3, [r6, #8]
 80081f0:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80081f4:	f004 f9be 	bl	800c574 <ai_array_to_buffer_fmt>
 80081f8:	69b1      	ldr	r1, [r6, #24]
 80081fa:	4603      	mov	r3, r0
 80081fc:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8008200:	688a      	ldr	r2, [r1, #8]
 8008202:	445c      	add	r4, fp
 8008204:	2800      	cmp	r0, #0
 8008206:	d0ca      	beq.n	800819e <ai_platform_outputs_get+0xde>
 8008208:	2100      	movs	r1, #0
 800820a:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800820e:	6831      	ldr	r1, [r6, #0]
 8008210:	6041      	str	r1, [r0, #4]
 8008212:	b111      	cbz	r1, 800821a <ai_platform_outputs_get+0x15a>
 8008214:	8849      	ldrh	r1, [r1, #2]
 8008216:	2900      	cmp	r1, #0
 8008218:	d1bb      	bne.n	8008192 <ai_platform_outputs_get+0xd2>
 800821a:	69b1      	ldr	r1, [r6, #24]
 800821c:	2000      	movs	r0, #0
 800821e:	e7be      	b.n	800819e <ai_platform_outputs_get+0xde>
 8008220:	e7fe      	b.n	8008220 <ai_platform_outputs_get+0x160>
 8008222:	9f03      	ldr	r7, [sp, #12]
 8008224:	b14a      	cbz	r2, 800823a <ai_platform_outputs_get+0x17a>
 8008226:	f8da 3014 	ldr.w	r3, [sl, #20]
 800822a:	6858      	ldr	r0, [r3, #4]
 800822c:	9b02      	ldr	r3, [sp, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d094      	beq.n	800815c <ai_platform_outputs_get+0x9c>
 8008232:	801a      	strh	r2, [r3, #0]
 8008234:	b005      	add	sp, #20
 8008236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823a:	2218      	movs	r2, #24
 800823c:	2111      	movs	r1, #17
 800823e:	f107 0010 	add.w	r0, r7, #16
 8008242:	f000 fce7 	bl	8008c14 <core_set_error>
 8008246:	2200      	movs	r2, #0
 8008248:	4610      	mov	r0, r2
 800824a:	e7ef      	b.n	800822c <ai_platform_outputs_get+0x16c>
 800824c:	a1c00100 	.word	0xa1c00100
 8008250:	e0042000 	.word	0xe0042000
 8008254:	58024000 	.word	0x58024000
 8008258:	f407a5c2 	.word	0xf407a5c2
 800825c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008260:	40023000 	.word	0x40023000

08008264 <ai_platform_network_create>:
 8008264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008268:	b083      	sub	sp, #12
 800826a:	4606      	mov	r6, r0
 800826c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8008270:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8008274:	4615      	mov	r5, r2
 8008276:	461f      	mov	r7, r3
 8008278:	f7ff fd0a 	bl	8007c90 <_ai_platform_acquire_crc>
 800827c:	b188      	cbz	r0, 80082a2 <ai_platform_network_create+0x3e>
 800827e:	4a5d      	ldr	r2, [pc, #372]	; (80083f4 <ai_platform_network_create+0x190>)
 8008280:	6812      	ldr	r2, [r2, #0]
 8008282:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008286:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800828a:	4603      	mov	r3, r0
 800828c:	d00e      	beq.n	80082ac <ai_platform_network_create+0x48>
 800828e:	4a5a      	ldr	r2, [pc, #360]	; (80083f8 <ai_platform_network_create+0x194>)
 8008290:	2118      	movs	r1, #24
 8008292:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8008296:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800829a:	2918      	cmp	r1, #24
 800829c:	d018      	beq.n	80082d0 <ai_platform_network_create+0x6c>
 800829e:	f7ff fcf9 	bl	8007c94 <_ai_platform_release_crc>
 80082a2:	f244 1033 	movw	r0, #16691	; 0x4133
 80082a6:	b003      	add	sp, #12
 80082a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082ac:	4a53      	ldr	r2, [pc, #332]	; (80083fc <ai_platform_network_create+0x198>)
 80082ae:	2101      	movs	r1, #1
 80082b0:	6091      	str	r1, [r2, #8]
 80082b2:	2114      	movs	r1, #20
 80082b4:	e001      	b.n	80082ba <ai_platform_network_create+0x56>
 80082b6:	3901      	subs	r1, #1
 80082b8:	d002      	beq.n	80082c0 <ai_platform_network_create+0x5c>
 80082ba:	6894      	ldr	r4, [r2, #8]
 80082bc:	2c00      	cmp	r4, #0
 80082be:	d1fa      	bne.n	80082b6 <ai_platform_network_create+0x52>
 80082c0:	4a4e      	ldr	r2, [pc, #312]	; (80083fc <ai_platform_network_create+0x198>)
 80082c2:	6891      	ldr	r1, [r2, #8]
 80082c4:	b911      	cbnz	r1, 80082cc <ai_platform_network_create+0x68>
 80082c6:	6812      	ldr	r2, [r2, #0]
 80082c8:	3201      	adds	r2, #1
 80082ca:	d008      	beq.n	80082de <ai_platform_network_create+0x7a>
 80082cc:	4618      	mov	r0, r3
 80082ce:	e7e6      	b.n	800829e <ai_platform_network_create+0x3a>
 80082d0:	2101      	movs	r1, #1
 80082d2:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80082d6:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80082da:	2900      	cmp	r1, #0
 80082dc:	d1fb      	bne.n	80082d6 <ai_platform_network_create+0x72>
 80082de:	4618      	mov	r0, r3
 80082e0:	f7ff fcd8 	bl	8007c94 <_ai_platform_release_crc>
 80082e4:	f7ff fcd4 	bl	8007c90 <_ai_platform_acquire_crc>
 80082e8:	4b42      	ldr	r3, [pc, #264]	; (80083f4 <ai_platform_network_create+0x190>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f4:	d010      	beq.n	8008318 <ai_platform_network_create+0xb4>
 80082f6:	4b40      	ldr	r3, [pc, #256]	; (80083f8 <ai_platform_network_create+0x194>)
 80082f8:	2201      	movs	r2, #1
 80082fa:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80082fe:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8008302:	2900      	cmp	r1, #0
 8008304:	d1fb      	bne.n	80082fe <ai_platform_network_create+0x9a>
 8008306:	4a3e      	ldr	r2, [pc, #248]	; (8008400 <ai_platform_network_create+0x19c>)
 8008308:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800830c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8008310:	4b3c      	ldr	r3, [pc, #240]	; (8008404 <ai_platform_network_create+0x1a0>)
 8008312:	429a      	cmp	r2, r3
 8008314:	d00c      	beq.n	8008330 <ai_platform_network_create+0xcc>
 8008316:	e7fe      	b.n	8008316 <ai_platform_network_create+0xb2>
 8008318:	4a38      	ldr	r2, [pc, #224]	; (80083fc <ai_platform_network_create+0x198>)
 800831a:	2301      	movs	r3, #1
 800831c:	6093      	str	r3, [r2, #8]
 800831e:	6893      	ldr	r3, [r2, #8]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1fc      	bne.n	800831e <ai_platform_network_create+0xba>
 8008324:	4b36      	ldr	r3, [pc, #216]	; (8008400 <ai_platform_network_create+0x19c>)
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	6812      	ldr	r2, [r2, #0]
 800832a:	4b36      	ldr	r3, [pc, #216]	; (8008404 <ai_platform_network_create+0x1a0>)
 800832c:	429a      	cmp	r2, r3
 800832e:	d122      	bne.n	8008376 <ai_platform_network_create+0x112>
 8008330:	f7ff fcb0 	bl	8007c94 <_ai_platform_release_crc>
 8008334:	b38e      	cbz	r6, 800839a <ai_platform_network_create+0x136>
 8008336:	4b34      	ldr	r3, [pc, #208]	; (8008408 <ai_platform_network_create+0x1a4>)
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	6035      	str	r5, [r6, #0]
 800833c:	f000 fc62 	bl	8008c04 <core_init>
 8008340:	b1d0      	cbz	r0, 8008378 <ai_platform_network_create+0x114>
 8008342:	f7ff fca5 	bl	8007c90 <_ai_platform_acquire_crc>
 8008346:	4b2b      	ldr	r3, [pc, #172]	; (80083f4 <ai_platform_network_create+0x190>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800834e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008352:	d025      	beq.n	80083a0 <ai_platform_network_create+0x13c>
 8008354:	4a28      	ldr	r2, [pc, #160]	; (80083f8 <ai_platform_network_create+0x194>)
 8008356:	2301      	movs	r3, #1
 8008358:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800835c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1fb      	bne.n	800835c <ai_platform_network_create+0xf8>
 8008364:	4b26      	ldr	r3, [pc, #152]	; (8008400 <ai_platform_network_create+0x19c>)
 8008366:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800836a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800836e:	4b25      	ldr	r3, [pc, #148]	; (8008404 <ai_platform_network_create+0x1a0>)
 8008370:	429a      	cmp	r2, r3
 8008372:	d022      	beq.n	80083ba <ai_platform_network_create+0x156>
 8008374:	e7fe      	b.n	8008374 <ai_platform_network_create+0x110>
 8008376:	e7fe      	b.n	8008376 <ai_platform_network_create+0x112>
 8008378:	2430      	movs	r4, #48	; 0x30
 800837a:	2300      	movs	r3, #0
 800837c:	6033      	str	r3, [r6, #0]
 800837e:	2610      	movs	r6, #16
 8008380:	464a      	mov	r2, r9
 8008382:	4641      	mov	r1, r8
 8008384:	4638      	mov	r0, r7
 8008386:	f004 f99b 	bl	800c6c0 <ai_version_get>
 800838a:	4603      	mov	r3, r0
 800838c:	2000      	movs	r0, #0
 800838e:	f364 0007 	bfi	r0, r4, #0, #8
 8008392:	64ab      	str	r3, [r5, #72]	; 0x48
 8008394:	f366 201f 	bfi	r0, r6, #8, #24
 8008398:	e785      	b.n	80082a6 <ai_platform_network_create+0x42>
 800839a:	f241 0010 	movw	r0, #4112	; 0x1010
 800839e:	e782      	b.n	80082a6 <ai_platform_network_create+0x42>
 80083a0:	4a16      	ldr	r2, [pc, #88]	; (80083fc <ai_platform_network_create+0x198>)
 80083a2:	2301      	movs	r3, #1
 80083a4:	6093      	str	r3, [r2, #8]
 80083a6:	6893      	ldr	r3, [r2, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1fc      	bne.n	80083a6 <ai_platform_network_create+0x142>
 80083ac:	4b14      	ldr	r3, [pc, #80]	; (8008400 <ai_platform_network_create+0x19c>)
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	6812      	ldr	r2, [r2, #0]
 80083b2:	4b14      	ldr	r3, [pc, #80]	; (8008404 <ai_platform_network_create+0x1a0>)
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d000      	beq.n	80083ba <ai_platform_network_create+0x156>
 80083b8:	e7fe      	b.n	80083b8 <ai_platform_network_create+0x154>
 80083ba:	f7ff fc6b 	bl	8007c94 <_ai_platform_release_crc>
 80083be:	2200      	movs	r2, #0
 80083c0:	4641      	mov	r1, r8
 80083c2:	4638      	mov	r0, r7
 80083c4:	f004 f97c 	bl	800c6c0 <ai_version_get>
 80083c8:	2200      	movs	r2, #0
 80083ca:	4604      	mov	r4, r0
 80083cc:	2105      	movs	r1, #5
 80083ce:	2001      	movs	r0, #1
 80083d0:	f004 f976 	bl	800c6c0 <ai_version_get>
 80083d4:	4284      	cmp	r4, r0
 80083d6:	d001      	beq.n	80083dc <ai_platform_network_create+0x178>
 80083d8:	2401      	movs	r4, #1
 80083da:	e7ce      	b.n	800837a <ai_platform_network_create+0x116>
 80083dc:	4b0b      	ldr	r3, [pc, #44]	; (800840c <ai_platform_network_create+0x1a8>)
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	a801      	add	r0, sp, #4
 80083e2:	f000 fd79 	bl	8008ed8 <ai_check_custom_types>
 80083e6:	b110      	cbz	r0, 80083ee <ai_platform_network_create+0x18a>
 80083e8:	2600      	movs	r6, #0
 80083ea:	4634      	mov	r4, r6
 80083ec:	e7c8      	b.n	8008380 <ai_platform_network_create+0x11c>
 80083ee:	2402      	movs	r4, #2
 80083f0:	e7c3      	b.n	800837a <ai_platform_network_create+0x116>
 80083f2:	bf00      	nop
 80083f4:	e0042000 	.word	0xe0042000
 80083f8:	58024000 	.word	0x58024000
 80083fc:	40023000 	.word	0x40023000
 8008400:	f407a5c2 	.word	0xf407a5c2
 8008404:	b5e8b5cd 	.word	0xb5e8b5cd
 8008408:	a1c00100 	.word	0xa1c00100
 800840c:	84048403 	.word	0x84048403

08008410 <ai_platform_network_init>:
 8008410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008414:	b1f8      	cbz	r0, 8008456 <ai_platform_network_init+0x46>
 8008416:	4b6e      	ldr	r3, [pc, #440]	; (80085d0 <ai_platform_network_init+0x1c0>)
 8008418:	6802      	ldr	r2, [r0, #0]
 800841a:	429a      	cmp	r2, r3
 800841c:	4604      	mov	r4, r0
 800841e:	d11a      	bne.n	8008456 <ai_platform_network_init+0x46>
 8008420:	460e      	mov	r6, r1
 8008422:	f7ff fc35 	bl	8007c90 <_ai_platform_acquire_crc>
 8008426:	4b6b      	ldr	r3, [pc, #428]	; (80085d4 <ai_platform_network_init+0x1c4>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800842e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008432:	d03d      	beq.n	80084b0 <ai_platform_network_init+0xa0>
 8008434:	4a68      	ldr	r2, [pc, #416]	; (80085d8 <ai_platform_network_init+0x1c8>)
 8008436:	2301      	movs	r3, #1
 8008438:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800843c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1fb      	bne.n	800843c <ai_platform_network_init+0x2c>
 8008444:	4b65      	ldr	r3, [pc, #404]	; (80085dc <ai_platform_network_init+0x1cc>)
 8008446:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800844a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800844e:	4b64      	ldr	r3, [pc, #400]	; (80085e0 <ai_platform_network_init+0x1d0>)
 8008450:	429a      	cmp	r2, r3
 8008452:	d039      	beq.n	80084c8 <ai_platform_network_init+0xb8>
 8008454:	e7fe      	b.n	8008454 <ai_platform_network_init+0x44>
 8008456:	f7ff fc1b 	bl	8007c90 <_ai_platform_acquire_crc>
 800845a:	4b5e      	ldr	r3, [pc, #376]	; (80085d4 <ai_platform_network_init+0x1c4>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008466:	d010      	beq.n	800848a <ai_platform_network_init+0x7a>
 8008468:	4a5b      	ldr	r2, [pc, #364]	; (80085d8 <ai_platform_network_init+0x1c8>)
 800846a:	2301      	movs	r3, #1
 800846c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008470:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1fb      	bne.n	8008470 <ai_platform_network_init+0x60>
 8008478:	4b58      	ldr	r3, [pc, #352]	; (80085dc <ai_platform_network_init+0x1cc>)
 800847a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800847e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008482:	4b57      	ldr	r3, [pc, #348]	; (80085e0 <ai_platform_network_init+0x1d0>)
 8008484:	429a      	cmp	r2, r3
 8008486:	d00d      	beq.n	80084a4 <ai_platform_network_init+0x94>
 8008488:	e7fe      	b.n	8008488 <ai_platform_network_init+0x78>
 800848a:	4a56      	ldr	r2, [pc, #344]	; (80085e4 <ai_platform_network_init+0x1d4>)
 800848c:	2301      	movs	r3, #1
 800848e:	6093      	str	r3, [r2, #8]
 8008490:	6893      	ldr	r3, [r2, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1fc      	bne.n	8008490 <ai_platform_network_init+0x80>
 8008496:	4b51      	ldr	r3, [pc, #324]	; (80085dc <ai_platform_network_init+0x1cc>)
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	6812      	ldr	r2, [r2, #0]
 800849c:	4b50      	ldr	r3, [pc, #320]	; (80085e0 <ai_platform_network_init+0x1d0>)
 800849e:	429a      	cmp	r2, r3
 80084a0:	d000      	beq.n	80084a4 <ai_platform_network_init+0x94>
 80084a2:	e7fe      	b.n	80084a2 <ai_platform_network_init+0x92>
 80084a4:	f7ff fbf6 	bl	8007c94 <_ai_platform_release_crc>
 80084a8:	2600      	movs	r6, #0
 80084aa:	4630      	mov	r0, r6
 80084ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084b0:	4a4c      	ldr	r2, [pc, #304]	; (80085e4 <ai_platform_network_init+0x1d4>)
 80084b2:	2301      	movs	r3, #1
 80084b4:	6093      	str	r3, [r2, #8]
 80084b6:	6893      	ldr	r3, [r2, #8]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1fc      	bne.n	80084b6 <ai_platform_network_init+0xa6>
 80084bc:	4b47      	ldr	r3, [pc, #284]	; (80085dc <ai_platform_network_init+0x1cc>)
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	6812      	ldr	r2, [r2, #0]
 80084c2:	4b47      	ldr	r3, [pc, #284]	; (80085e0 <ai_platform_network_init+0x1d0>)
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d11c      	bne.n	8008502 <ai_platform_network_init+0xf2>
 80084c8:	f7ff fbe4 	bl	8007c94 <_ai_platform_release_crc>
 80084cc:	2e00      	cmp	r6, #0
 80084ce:	d06f      	beq.n	80085b0 <ai_platform_network_init+0x1a0>
 80084d0:	4b45      	ldr	r3, [pc, #276]	; (80085e8 <ai_platform_network_init+0x1d8>)
 80084d2:	6832      	ldr	r2, [r6, #0]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d115      	bne.n	8008504 <ai_platform_network_init+0xf4>
 80084d8:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80084dc:	6933      	ldr	r3, [r6, #16]
 80084de:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 80084e2:	89f7      	ldrh	r7, [r6, #14]
 80084e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80084e6:	e9c4 2107 	strd	r2, r1, [r4, #28]
 80084ea:	2303      	movs	r3, #3
 80084ec:	84e7      	strh	r7, [r4, #38]	; 0x26
 80084ee:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 80084f2:	60e3      	str	r3, [r4, #12]
 80084f4:	4620      	mov	r0, r4
 80084f6:	4626      	mov	r6, r4
 80084f8:	f000 fd18 	bl	8008f2c <ai_layers_init_all>
 80084fc:	4630      	mov	r0, r6
 80084fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008502:	e7fe      	b.n	8008502 <ai_platform_network_init+0xf2>
 8008504:	2101      	movs	r1, #1
 8008506:	4630      	mov	r0, r6
 8008508:	4635      	mov	r5, r6
 800850a:	6876      	ldr	r6, [r6, #4]
 800850c:	f7ff fb72 	bl	8007bf4 <ai_buffer_get_size>
 8008510:	f105 081c 	add.w	r8, r5, #28
 8008514:	4681      	mov	r9, r0
 8008516:	2101      	movs	r1, #1
 8008518:	4640      	mov	r0, r8
 800851a:	6a2f      	ldr	r7, [r5, #32]
 800851c:	f7ff fb6a 	bl	8007bf4 <ai_buffer_get_size>
 8008520:	f1b9 0f00 	cmp.w	r9, #0
 8008524:	d025      	beq.n	8008572 <ai_platform_network_init+0x162>
 8008526:	2201      	movs	r2, #1
 8008528:	4696      	mov	lr, r2
 800852a:	bb30      	cbnz	r0, 800857a <ai_platform_network_init+0x16a>
 800852c:	4680      	mov	r8, r0
 800852e:	4607      	mov	r7, r0
 8008530:	b376      	cbz	r6, 8008590 <ai_platform_network_init+0x180>
 8008532:	8be3      	ldrh	r3, [r4, #30]
 8008534:	4573      	cmp	r3, lr
 8008536:	d323      	bcc.n	8008580 <ai_platform_network_init+0x170>
 8008538:	b142      	cbz	r2, 800854c <ai_platform_network_init+0x13c>
 800853a:	46ac      	mov	ip, r5
 800853c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008540:	6a25      	ldr	r5, [r4, #32]
 8008542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008544:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8008548:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800854c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800854e:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8008552:	2600      	movs	r6, #0
 8008554:	42bb      	cmp	r3, r7
 8008556:	83a6      	strh	r6, [r4, #28]
 8008558:	d323      	bcc.n	80085a2 <ai_platform_network_init+0x192>
 800855a:	b37f      	cbz	r7, 80085bc <ai_platform_network_init+0x1ac>
 800855c:	46c4      	mov	ip, r8
 800855e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008562:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008566:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800856a:	46b6      	mov	lr, r6
 800856c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8008570:	e7bb      	b.n	80084ea <ai_platform_network_init+0xda>
 8008572:	464a      	mov	r2, r9
 8008574:	46ce      	mov	lr, r9
 8008576:	464d      	mov	r5, r9
 8008578:	e7d7      	b.n	800852a <ai_platform_network_init+0x11a>
 800857a:	b30f      	cbz	r7, 80085c0 <ai_platform_network_init+0x1b0>
 800857c:	2701      	movs	r7, #1
 800857e:	e7d7      	b.n	8008530 <ai_platform_network_init+0x120>
 8008580:	2212      	movs	r2, #18
 8008582:	2116      	movs	r1, #22
 8008584:	f104 0010 	add.w	r0, r4, #16
 8008588:	f000 fb44 	bl	8008c14 <core_set_error>
 800858c:	2600      	movs	r6, #0
 800858e:	e78c      	b.n	80084aa <ai_platform_network_init+0x9a>
 8008590:	f1b9 0f00 	cmp.w	r9, #0
 8008594:	d0cd      	beq.n	8008532 <ai_platform_network_init+0x122>
 8008596:	2110      	movs	r1, #16
 8008598:	2212      	movs	r2, #18
 800859a:	1860      	adds	r0, r4, r1
 800859c:	f000 fb3a 	bl	8008c14 <core_set_error>
 80085a0:	e783      	b.n	80084aa <ai_platform_network_init+0x9a>
 80085a2:	2213      	movs	r2, #19
 80085a4:	2116      	movs	r1, #22
 80085a6:	f104 0010 	add.w	r0, r4, #16
 80085aa:	f000 fb33 	bl	8008c14 <core_set_error>
 80085ae:	e77c      	b.n	80084aa <ai_platform_network_init+0x9a>
 80085b0:	2110      	movs	r1, #16
 80085b2:	2211      	movs	r2, #17
 80085b4:	1860      	adds	r0, r4, r1
 80085b6:	f000 fb2d 	bl	8008c14 <core_set_error>
 80085ba:	e776      	b.n	80084aa <ai_platform_network_init+0x9a>
 80085bc:	46be      	mov	lr, r7
 80085be:	e794      	b.n	80084ea <ai_platform_network_init+0xda>
 80085c0:	2110      	movs	r1, #16
 80085c2:	2213      	movs	r2, #19
 80085c4:	1860      	adds	r0, r4, r1
 80085c6:	f000 fb25 	bl	8008c14 <core_set_error>
 80085ca:	463e      	mov	r6, r7
 80085cc:	e76d      	b.n	80084aa <ai_platform_network_init+0x9a>
 80085ce:	bf00      	nop
 80085d0:	a1c00100 	.word	0xa1c00100
 80085d4:	e0042000 	.word	0xe0042000
 80085d8:	58024000 	.word	0x58024000
 80085dc:	f407a5c2 	.word	0xf407a5c2
 80085e0:	b5e8b5cd 	.word	0xb5e8b5cd
 80085e4:	40023000 	.word	0x40023000
 80085e8:	a1facade 	.word	0xa1facade

080085ec <ai_platform_network_post_init>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	b1f0      	cbz	r0, 800862e <ai_platform_network_post_init+0x42>
 80085f0:	4b3c      	ldr	r3, [pc, #240]	; (80086e4 <ai_platform_network_post_init+0xf8>)
 80085f2:	6802      	ldr	r2, [r0, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	4604      	mov	r4, r0
 80085f8:	d119      	bne.n	800862e <ai_platform_network_post_init+0x42>
 80085fa:	f7ff fb49 	bl	8007c90 <_ai_platform_acquire_crc>
 80085fe:	4b3a      	ldr	r3, [pc, #232]	; (80086e8 <ai_platform_network_post_init+0xfc>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800860a:	d03b      	beq.n	8008684 <ai_platform_network_post_init+0x98>
 800860c:	4a37      	ldr	r2, [pc, #220]	; (80086ec <ai_platform_network_post_init+0x100>)
 800860e:	2301      	movs	r3, #1
 8008610:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008614:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1fb      	bne.n	8008614 <ai_platform_network_post_init+0x28>
 800861c:	4b34      	ldr	r3, [pc, #208]	; (80086f0 <ai_platform_network_post_init+0x104>)
 800861e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008622:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008626:	4b33      	ldr	r3, [pc, #204]	; (80086f4 <ai_platform_network_post_init+0x108>)
 8008628:	429a      	cmp	r2, r3
 800862a:	d037      	beq.n	800869c <ai_platform_network_post_init+0xb0>
 800862c:	e7fe      	b.n	800862c <ai_platform_network_post_init+0x40>
 800862e:	f7ff fb2f 	bl	8007c90 <_ai_platform_acquire_crc>
 8008632:	4b2d      	ldr	r3, [pc, #180]	; (80086e8 <ai_platform_network_post_init+0xfc>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800863a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800863e:	d010      	beq.n	8008662 <ai_platform_network_post_init+0x76>
 8008640:	4a2a      	ldr	r2, [pc, #168]	; (80086ec <ai_platform_network_post_init+0x100>)
 8008642:	2301      	movs	r3, #1
 8008644:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008648:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1fb      	bne.n	8008648 <ai_platform_network_post_init+0x5c>
 8008650:	4b27      	ldr	r3, [pc, #156]	; (80086f0 <ai_platform_network_post_init+0x104>)
 8008652:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008656:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800865a:	4b26      	ldr	r3, [pc, #152]	; (80086f4 <ai_platform_network_post_init+0x108>)
 800865c:	429a      	cmp	r2, r3
 800865e:	d00d      	beq.n	800867c <ai_platform_network_post_init+0x90>
 8008660:	e7fe      	b.n	8008660 <ai_platform_network_post_init+0x74>
 8008662:	4a25      	ldr	r2, [pc, #148]	; (80086f8 <ai_platform_network_post_init+0x10c>)
 8008664:	2301      	movs	r3, #1
 8008666:	6093      	str	r3, [r2, #8]
 8008668:	6893      	ldr	r3, [r2, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1fc      	bne.n	8008668 <ai_platform_network_post_init+0x7c>
 800866e:	4b20      	ldr	r3, [pc, #128]	; (80086f0 <ai_platform_network_post_init+0x104>)
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	6812      	ldr	r2, [r2, #0]
 8008674:	4b1f      	ldr	r3, [pc, #124]	; (80086f4 <ai_platform_network_post_init+0x108>)
 8008676:	429a      	cmp	r2, r3
 8008678:	d000      	beq.n	800867c <ai_platform_network_post_init+0x90>
 800867a:	e7fe      	b.n	800867a <ai_platform_network_post_init+0x8e>
 800867c:	f7ff fb0a 	bl	8007c94 <_ai_platform_release_crc>
 8008680:	2000      	movs	r0, #0
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	4a1c      	ldr	r2, [pc, #112]	; (80086f8 <ai_platform_network_post_init+0x10c>)
 8008686:	2301      	movs	r3, #1
 8008688:	6093      	str	r3, [r2, #8]
 800868a:	6893      	ldr	r3, [r2, #8]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1fc      	bne.n	800868a <ai_platform_network_post_init+0x9e>
 8008690:	4b17      	ldr	r3, [pc, #92]	; (80086f0 <ai_platform_network_post_init+0x104>)
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	6812      	ldr	r2, [r2, #0]
 8008696:	4b17      	ldr	r3, [pc, #92]	; (80086f4 <ai_platform_network_post_init+0x108>)
 8008698:	429a      	cmp	r2, r3
 800869a:	d11a      	bne.n	80086d2 <ai_platform_network_post_init+0xe6>
 800869c:	f7ff fafa 	bl	8007c94 <_ai_platform_release_crc>
 80086a0:	68e3      	ldr	r3, [r4, #12]
 80086a2:	f013 0502 	ands.w	r5, r3, #2
 80086a6:	d015      	beq.n	80086d4 <ai_platform_network_post_init+0xe8>
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 fc4d 	bl	8008f48 <ai_layers_post_init_all>
 80086ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80086b0:	b16b      	cbz	r3, 80086ce <ai_platform_network_post_init+0xe2>
 80086b2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80086b4:	e007      	b.n	80086c6 <ai_platform_network_post_init+0xda>
 80086b6:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80086ba:	4798      	blx	r3
 80086bc:	692b      	ldr	r3, [r5, #16]
 80086be:	42ab      	cmp	r3, r5
 80086c0:	d005      	beq.n	80086ce <ai_platform_network_post_init+0xe2>
 80086c2:	b123      	cbz	r3, 80086ce <ai_platform_network_post_init+0xe2>
 80086c4:	461d      	mov	r5, r3
 80086c6:	4629      	mov	r1, r5
 80086c8:	2000      	movs	r0, #0
 80086ca:	2d00      	cmp	r5, #0
 80086cc:	d1f3      	bne.n	80086b6 <ai_platform_network_post_init+0xca>
 80086ce:	2001      	movs	r0, #1
 80086d0:	bd38      	pop	{r3, r4, r5, pc}
 80086d2:	e7fe      	b.n	80086d2 <ai_platform_network_post_init+0xe6>
 80086d4:	2210      	movs	r2, #16
 80086d6:	2111      	movs	r1, #17
 80086d8:	18a0      	adds	r0, r4, r2
 80086da:	f000 fa9b 	bl	8008c14 <core_set_error>
 80086de:	4628      	mov	r0, r5
 80086e0:	bd38      	pop	{r3, r4, r5, pc}
 80086e2:	bf00      	nop
 80086e4:	a1c00100 	.word	0xa1c00100
 80086e8:	e0042000 	.word	0xe0042000
 80086ec:	58024000 	.word	0x58024000
 80086f0:	f407a5c2 	.word	0xf407a5c2
 80086f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80086f8:	40023000 	.word	0x40023000

080086fc <ai_platform_network_process>:
 80086fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	460e      	mov	r6, r1
 8008702:	b085      	sub	sp, #20
 8008704:	4693      	mov	fp, r2
 8008706:	4605      	mov	r5, r0
 8008708:	b120      	cbz	r0, 8008714 <ai_platform_network_process+0x18>
 800870a:	4bb8      	ldr	r3, [pc, #736]	; (80089ec <ai_platform_network_process+0x2f0>)
 800870c:	6802      	ldr	r2, [r0, #0]
 800870e:	429a      	cmp	r2, r3
 8008710:	bf18      	it	ne
 8008712:	2500      	movne	r5, #0
 8008714:	f7ff fabc 	bl	8007c90 <_ai_platform_acquire_crc>
 8008718:	4bb5      	ldr	r3, [pc, #724]	; (80089f0 <ai_platform_network_process+0x2f4>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008724:	d010      	beq.n	8008748 <ai_platform_network_process+0x4c>
 8008726:	4ab3      	ldr	r2, [pc, #716]	; (80089f4 <ai_platform_network_process+0x2f8>)
 8008728:	2301      	movs	r3, #1
 800872a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800872e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1fb      	bne.n	800872e <ai_platform_network_process+0x32>
 8008736:	4bb0      	ldr	r3, [pc, #704]	; (80089f8 <ai_platform_network_process+0x2fc>)
 8008738:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800873c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008740:	4bae      	ldr	r3, [pc, #696]	; (80089fc <ai_platform_network_process+0x300>)
 8008742:	429a      	cmp	r2, r3
 8008744:	d00d      	beq.n	8008762 <ai_platform_network_process+0x66>
 8008746:	e7fe      	b.n	8008746 <ai_platform_network_process+0x4a>
 8008748:	4aad      	ldr	r2, [pc, #692]	; (8008a00 <ai_platform_network_process+0x304>)
 800874a:	2301      	movs	r3, #1
 800874c:	6093      	str	r3, [r2, #8]
 800874e:	6893      	ldr	r3, [r2, #8]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1fc      	bne.n	800874e <ai_platform_network_process+0x52>
 8008754:	4ba8      	ldr	r3, [pc, #672]	; (80089f8 <ai_platform_network_process+0x2fc>)
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	6812      	ldr	r2, [r2, #0]
 800875a:	4ba8      	ldr	r3, [pc, #672]	; (80089fc <ai_platform_network_process+0x300>)
 800875c:	429a      	cmp	r2, r3
 800875e:	f040 812d 	bne.w	80089bc <ai_platform_network_process+0x2c0>
 8008762:	f7ff fa97 	bl	8007c94 <_ai_platform_release_crc>
 8008766:	2d00      	cmp	r5, #0
 8008768:	f000 8154 	beq.w	8008a14 <ai_platform_network_process+0x318>
 800876c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800876e:	2b00      	cmp	r3, #0
 8008770:	f000 8125 	beq.w	80089be <ai_platform_network_process+0x2c2>
 8008774:	68eb      	ldr	r3, [r5, #12]
 8008776:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800877a:	f003 0303 	and.w	r3, r3, #3
 800877e:	2700      	movs	r7, #0
 8008780:	2b03      	cmp	r3, #3
 8008782:	616f      	str	r7, [r5, #20]
 8008784:	f040 813e 	bne.w	8008a04 <ai_platform_network_process+0x308>
 8008788:	2e00      	cmp	r6, #0
 800878a:	f000 811e 	beq.w	80089ca <ai_platform_network_process+0x2ce>
 800878e:	f1ba 0f00 	cmp.w	sl, #0
 8008792:	f000 811a 	beq.w	80089ca <ai_platform_network_process+0x2ce>
 8008796:	f8ba 3000 	ldrh.w	r3, [sl]
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 8115 	beq.w	80089ca <ai_platform_network_process+0x2ce>
 80087a0:	69b3      	ldr	r3, [r6, #24]
 80087a2:	f8cd b00c 	str.w	fp, [sp, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80087ac:	f8da 3004 	ldr.w	r3, [sl, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d072      	beq.n	800889a <ai_platform_network_process+0x19e>
 80087b4:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80087b8:	2c00      	cmp	r4, #0
 80087ba:	d06e      	beq.n	800889a <ai_platform_network_process+0x19e>
 80087bc:	f8da 3008 	ldr.w	r3, [sl, #8]
 80087c0:	f8d3 9000 	ldr.w	r9, [r3]
 80087c4:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80087c8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80087cc:	f000 81de 	beq.w	8008b8c <ai_platform_network_process+0x490>
 80087d0:	69a3      	ldr	r3, [r4, #24]
 80087d2:	2101      	movs	r1, #1
 80087d4:	4630      	mov	r0, r6
 80087d6:	685d      	ldr	r5, [r3, #4]
 80087d8:	f7ff fa0c 	bl	8007bf4 <ai_buffer_get_size>
 80087dc:	4285      	cmp	r5, r0
 80087de:	f0c0 811b 	bcc.w	8008a18 <ai_platform_network_process+0x31c>
 80087e2:	68e0      	ldr	r0, [r4, #12]
 80087e4:	69b1      	ldr	r1, [r6, #24]
 80087e6:	68c2      	ldr	r2, [r0, #12]
 80087e8:	68cb      	ldr	r3, [r1, #12]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	f040 8114 	bne.w	8008a18 <ai_platform_network_process+0x31c>
 80087f0:	6882      	ldr	r2, [r0, #8]
 80087f2:	688b      	ldr	r3, [r1, #8]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	f040 810f 	bne.w	8008a18 <ai_platform_network_process+0x31c>
 80087fa:	6842      	ldr	r2, [r0, #4]
 80087fc:	684b      	ldr	r3, [r1, #4]
 80087fe:	429a      	cmp	r2, r3
 8008800:	f040 810a 	bne.w	8008a18 <ai_platform_network_process+0x31c>
 8008804:	69a3      	ldr	r3, [r4, #24]
 8008806:	e9d3 0100 	ldrd	r0, r1, [r3]
 800880a:	f003 ff47 	bl	800c69c <ai_array_get_data_byte_size>
 800880e:	4605      	mov	r5, r0
 8008810:	4620      	mov	r0, r4
 8008812:	f003 ff5b 	bl	800c6cc <get_tensor_byte_size>
 8008816:	4285      	cmp	r5, r0
 8008818:	f0c0 80fe 	bcc.w	8008a18 <ai_platform_network_process+0x31c>
 800881c:	69a3      	ldr	r3, [r4, #24]
 800881e:	6818      	ldr	r0, [r3, #0]
 8008820:	f003 fea8 	bl	800c574 <ai_array_to_buffer_fmt>
 8008824:	6833      	ldr	r3, [r6, #0]
 8008826:	4043      	eors	r3, r0
 8008828:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800882c:	f040 81b9 	bne.w	8008ba2 <ai_platform_network_process+0x4a6>
 8008830:	6872      	ldr	r2, [r6, #4]
 8008832:	2a00      	cmp	r2, #0
 8008834:	f000 81ac 	beq.w	8008b90 <ai_platform_network_process+0x494>
 8008838:	69b2      	ldr	r2, [r6, #24]
 800883a:	6812      	ldr	r2, [r2, #0]
 800883c:	2a00      	cmp	r2, #0
 800883e:	f000 819c 	beq.w	8008b7a <ai_platform_network_process+0x47e>
 8008842:	9b01      	ldr	r3, [sp, #4]
 8008844:	4293      	cmp	r3, r2
 8008846:	bf38      	it	cc
 8008848:	4613      	movcc	r3, r2
 800884a:	4620      	mov	r0, r4
 800884c:	9301      	str	r3, [sp, #4]
 800884e:	f003 ff3d 	bl	800c6cc <get_tensor_byte_size>
 8008852:	f8c8 0008 	str.w	r0, [r8, #8]
 8008856:	69b3      	ldr	r3, [r6, #24]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	fb00 f303 	mul.w	r3, r0, r3
 800885e:	f8c8 300c 	str.w	r3, [r8, #12]
 8008862:	6871      	ldr	r1, [r6, #4]
 8008864:	f8c8 1004 	str.w	r1, [r8, #4]
 8008868:	440b      	add	r3, r1
 800886a:	f849 300b 	str.w	r3, [r9, fp]
 800886e:	69a0      	ldr	r0, [r4, #24]
 8008870:	6803      	ldr	r3, [r0, #0]
 8008872:	009a      	lsls	r2, r3, #2
 8008874:	f107 0701 	add.w	r7, r7, #1
 8008878:	f106 061c 	add.w	r6, r6, #28
 800887c:	f100 80b0 	bmi.w	80089e0 <ai_platform_network_process+0x2e4>
 8008880:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8008884:	1a9b      	subs	r3, r3, r2
 8008886:	4419      	add	r1, r3
 8008888:	6081      	str	r1, [r0, #8]
 800888a:	69a3      	ldr	r3, [r4, #24]
 800888c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008890:	60da      	str	r2, [r3, #12]
 8008892:	f8ba 3000 	ldrh.w	r3, [sl]
 8008896:	42bb      	cmp	r3, r7
 8008898:	d888      	bhi.n	80087ac <ai_platform_network_process+0xb0>
 800889a:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800889e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80088a0:	f1bb 0f00 	cmp.w	fp, #0
 80088a4:	f000 8186 	beq.w	8008bb4 <ai_platform_network_process+0x4b8>
 80088a8:	2a01      	cmp	r2, #1
 80088aa:	f240 815e 	bls.w	8008b6a <ai_platform_network_process+0x46e>
 80088ae:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80088b2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f000 8157 	beq.w	8008b6a <ai_platform_network_process+0x46e>
 80088bc:	465e      	mov	r6, fp
 80088be:	2700      	movs	r7, #0
 80088c0:	462c      	mov	r4, r5
 80088c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 80b4 	beq.w	8008a34 <ai_platform_network_process+0x338>
 80088cc:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80088d0:	2d00      	cmp	r5, #0
 80088d2:	f000 80af 	beq.w	8008a34 <ai_platform_network_process+0x338>
 80088d6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80088da:	f8d3 8000 	ldr.w	r8, [r3]
 80088de:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80088e2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80088e6:	f000 8171 	beq.w	8008bcc <ai_platform_network_process+0x4d0>
 80088ea:	69ab      	ldr	r3, [r5, #24]
 80088ec:	2101      	movs	r1, #1
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	9302      	str	r3, [sp, #8]
 80088f2:	4630      	mov	r0, r6
 80088f4:	f7ff f97e 	bl	8007bf4 <ai_buffer_get_size>
 80088f8:	9b02      	ldr	r3, [sp, #8]
 80088fa:	4283      	cmp	r3, r0
 80088fc:	f0c0 8134 	bcc.w	8008b68 <ai_platform_network_process+0x46c>
 8008900:	68e8      	ldr	r0, [r5, #12]
 8008902:	69b1      	ldr	r1, [r6, #24]
 8008904:	68c2      	ldr	r2, [r0, #12]
 8008906:	68cb      	ldr	r3, [r1, #12]
 8008908:	429a      	cmp	r2, r3
 800890a:	f040 812d 	bne.w	8008b68 <ai_platform_network_process+0x46c>
 800890e:	6882      	ldr	r2, [r0, #8]
 8008910:	688b      	ldr	r3, [r1, #8]
 8008912:	429a      	cmp	r2, r3
 8008914:	f040 8128 	bne.w	8008b68 <ai_platform_network_process+0x46c>
 8008918:	6842      	ldr	r2, [r0, #4]
 800891a:	684b      	ldr	r3, [r1, #4]
 800891c:	429a      	cmp	r2, r3
 800891e:	f040 8123 	bne.w	8008b68 <ai_platform_network_process+0x46c>
 8008922:	69ab      	ldr	r3, [r5, #24]
 8008924:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008928:	f003 feb8 	bl	800c69c <ai_array_get_data_byte_size>
 800892c:	9002      	str	r0, [sp, #8]
 800892e:	4628      	mov	r0, r5
 8008930:	f003 fecc 	bl	800c6cc <get_tensor_byte_size>
 8008934:	9b02      	ldr	r3, [sp, #8]
 8008936:	4283      	cmp	r3, r0
 8008938:	f0c0 8116 	bcc.w	8008b68 <ai_platform_network_process+0x46c>
 800893c:	69ab      	ldr	r3, [r5, #24]
 800893e:	6818      	ldr	r0, [r3, #0]
 8008940:	f003 fe18 	bl	800c574 <ai_array_to_buffer_fmt>
 8008944:	6833      	ldr	r3, [r6, #0]
 8008946:	4043      	eors	r3, r0
 8008948:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800894c:	f040 8136 	bne.w	8008bbc <ai_platform_network_process+0x4c0>
 8008950:	6872      	ldr	r2, [r6, #4]
 8008952:	2a00      	cmp	r2, #0
 8008954:	f000 814d 	beq.w	8008bf2 <ai_platform_network_process+0x4f6>
 8008958:	69b2      	ldr	r2, [r6, #24]
 800895a:	6812      	ldr	r2, [r2, #0]
 800895c:	2a00      	cmp	r2, #0
 800895e:	f000 813f 	beq.w	8008be0 <ai_platform_network_process+0x4e4>
 8008962:	9b01      	ldr	r3, [sp, #4]
 8008964:	4293      	cmp	r3, r2
 8008966:	bf38      	it	cc
 8008968:	4613      	movcc	r3, r2
 800896a:	4628      	mov	r0, r5
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	f003 fead 	bl	800c6cc <get_tensor_byte_size>
 8008972:	f8ca 0008 	str.w	r0, [sl, #8]
 8008976:	69b2      	ldr	r2, [r6, #24]
 8008978:	6812      	ldr	r2, [r2, #0]
 800897a:	4603      	mov	r3, r0
 800897c:	fb02 f303 	mul.w	r3, r2, r3
 8008980:	f8ca 300c 	str.w	r3, [sl, #12]
 8008984:	6871      	ldr	r1, [r6, #4]
 8008986:	f8ca 1004 	str.w	r1, [sl, #4]
 800898a:	440b      	add	r3, r1
 800898c:	f848 300b 	str.w	r3, [r8, fp]
 8008990:	69a8      	ldr	r0, [r5, #24]
 8008992:	6803      	ldr	r3, [r0, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	f107 0701 	add.w	r7, r7, #1
 800899a:	f106 061c 	add.w	r6, r6, #28
 800899e:	d444      	bmi.n	8008a2a <ai_platform_network_process+0x32e>
 80089a0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80089a4:	1a9b      	subs	r3, r3, r2
 80089a6:	4419      	add	r1, r3
 80089a8:	6081      	str	r1, [r0, #8]
 80089aa:	69ab      	ldr	r3, [r5, #24]
 80089ac:	f8da 2004 	ldr.w	r2, [sl, #4]
 80089b0:	60da      	str	r2, [r3, #12]
 80089b2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80089b6:	429f      	cmp	r7, r3
 80089b8:	d383      	bcc.n	80088c2 <ai_platform_network_process+0x1c6>
 80089ba:	e03b      	b.n	8008a34 <ai_platform_network_process+0x338>
 80089bc:	e7fe      	b.n	80089bc <ai_platform_network_process+0x2c0>
 80089be:	68ea      	ldr	r2, [r5, #12]
 80089c0:	616b      	str	r3, [r5, #20]
 80089c2:	f002 0203 	and.w	r2, r2, #3
 80089c6:	2a03      	cmp	r2, #3
 80089c8:	d11c      	bne.n	8008a04 <ai_platform_network_process+0x308>
 80089ca:	2217      	movs	r2, #23
 80089cc:	2112      	movs	r1, #18
 80089ce:	f105 0010 	add.w	r0, r5, #16
 80089d2:	f000 f91f 	bl	8008c14 <core_set_error>
 80089d6:	2400      	movs	r4, #0
 80089d8:	4620      	mov	r0, r4
 80089da:	b005      	add	sp, #20
 80089dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e0:	f8ba 3000 	ldrh.w	r3, [sl]
 80089e4:	429f      	cmp	r7, r3
 80089e6:	f4ff aee1 	bcc.w	80087ac <ai_platform_network_process+0xb0>
 80089ea:	e756      	b.n	800889a <ai_platform_network_process+0x19e>
 80089ec:	a1c00100 	.word	0xa1c00100
 80089f0:	e0042000 	.word	0xe0042000
 80089f4:	58024000 	.word	0x58024000
 80089f8:	f407a5c2 	.word	0xf407a5c2
 80089fc:	b5e8b5cd 	.word	0xb5e8b5cd
 8008a00:	40023000 	.word	0x40023000
 8008a04:	2230      	movs	r2, #48	; 0x30
 8008a06:	2111      	movs	r1, #17
 8008a08:	f105 0010 	add.w	r0, r5, #16
 8008a0c:	f000 f902 	bl	8008c14 <core_set_error>
 8008a10:	2400      	movs	r4, #0
 8008a12:	e7e1      	b.n	80089d8 <ai_platform_network_process+0x2dc>
 8008a14:	462c      	mov	r4, r5
 8008a16:	e7df      	b.n	80089d8 <ai_platform_network_process+0x2dc>
 8008a18:	9d02      	ldr	r5, [sp, #8]
 8008a1a:	2218      	movs	r2, #24
 8008a1c:	2112      	movs	r1, #18
 8008a1e:	f105 0010 	add.w	r0, r5, #16
 8008a22:	f000 f8f7 	bl	8008c14 <core_set_error>
 8008a26:	2400      	movs	r4, #0
 8008a28:	e7d6      	b.n	80089d8 <ai_platform_network_process+0x2dc>
 8008a2a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008a2e:	429f      	cmp	r7, r3
 8008a30:	f4ff af47 	bcc.w	80088c2 <ai_platform_network_process+0x1c6>
 8008a34:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008a38:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8008a3a:	82a3      	strh	r3, [r4, #20]
 8008a3c:	4625      	mov	r5, r4
 8008a3e:	2a00      	cmp	r2, #0
 8008a40:	f040 808c 	bne.w	8008b5c <ai_platform_network_process+0x460>
 8008a44:	4616      	mov	r6, r2
 8008a46:	4617      	mov	r7, r2
 8008a48:	8aec      	ldrh	r4, [r5, #22]
 8008a4a:	429c      	cmp	r4, r3
 8008a4c:	bf38      	it	cc
 8008a4e:	46ab      	movcc	fp, r5
 8008a50:	d2c2      	bcs.n	80089d8 <ai_platform_network_process+0x2dc>
 8008a52:	2e00      	cmp	r6, #0
 8008a54:	d030      	beq.n	8008ab8 <ai_platform_network_process+0x3bc>
 8008a56:	f04f 0800 	mov.w	r8, #0
 8008a5a:	e014      	b.n	8008a86 <ai_platform_network_process+0x38a>
 8008a5c:	6882      	ldr	r2, [r0, #8]
 8008a5e:	68c5      	ldr	r5, [r0, #12]
 8008a60:	6863      	ldr	r3, [r4, #4]
 8008a62:	1b52      	subs	r2, r2, r5
 8008a64:	4413      	add	r3, r2
 8008a66:	6083      	str	r3, [r0, #8]
 8008a68:	698b      	ldr	r3, [r1, #24]
 8008a6a:	6862      	ldr	r2, [r4, #4]
 8008a6c:	60da      	str	r2, [r3, #12]
 8008a6e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8008a72:	f859 200a 	ldr.w	r2, [r9, sl]
 8008a76:	440b      	add	r3, r1
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	bf24      	itt	cs
 8008a7c:	68e3      	ldrcs	r3, [r4, #12]
 8008a7e:	1ad3      	subcs	r3, r2, r3
 8008a80:	6063      	str	r3, [r4, #4]
 8008a82:	f108 0801 	add.w	r8, r8, #1
 8008a86:	8833      	ldrh	r3, [r6, #0]
 8008a88:	4543      	cmp	r3, r8
 8008a8a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8008a8e:	d913      	bls.n	8008ab8 <ai_platform_network_process+0x3bc>
 8008a90:	6873      	ldr	r3, [r6, #4]
 8008a92:	b18b      	cbz	r3, 8008ab8 <ai_platform_network_process+0x3bc>
 8008a94:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8008a98:	b171      	cbz	r1, 8008ab8 <ai_platform_network_process+0x3bc>
 8008a9a:	6988      	ldr	r0, [r1, #24]
 8008a9c:	68b2      	ldr	r2, [r6, #8]
 8008a9e:	6803      	ldr	r3, [r0, #0]
 8008aa0:	f8d2 9000 	ldr.w	r9, [r2]
 8008aa4:	009d      	lsls	r5, r3, #2
 8008aa6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8008aaa:	d5d7      	bpl.n	8008a5c <ai_platform_network_process+0x360>
 8008aac:	6881      	ldr	r1, [r0, #8]
 8008aae:	68a2      	ldr	r2, [r4, #8]
 8008ab0:	6860      	ldr	r0, [r4, #4]
 8008ab2:	f002 fb83 	bl	800b1bc <st_int8_copy>
 8008ab6:	e7da      	b.n	8008a6e <ai_platform_network_process+0x372>
 8008ab8:	4658      	mov	r0, fp
 8008aba:	f000 fa59 	bl	8008f70 <ai_layers_forward_all>
 8008abe:	2f00      	cmp	r7, #0
 8008ac0:	d03d      	beq.n	8008b3e <ai_platform_network_process+0x442>
 8008ac2:	2400      	movs	r4, #0
 8008ac4:	e016      	b.n	8008af4 <ai_platform_network_process+0x3f8>
 8008ac6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8008aca:	f859 100a 	ldr.w	r1, [r9, sl]
 8008ace:	4413      	add	r3, r2
 8008ad0:	428b      	cmp	r3, r1
 8008ad2:	bf24      	itt	cs
 8008ad4:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8008ad8:	1acb      	subcs	r3, r1, r3
 8008ada:	f8c8 3004 	str.w	r3, [r8, #4]
 8008ade:	6981      	ldr	r1, [r0, #24]
 8008ae0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8008ae4:	1b52      	subs	r2, r2, r5
 8008ae6:	4413      	add	r3, r2
 8008ae8:	608b      	str	r3, [r1, #8]
 8008aea:	6983      	ldr	r3, [r0, #24]
 8008aec:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008af0:	60da      	str	r2, [r3, #12]
 8008af2:	3401      	adds	r4, #1
 8008af4:	883b      	ldrh	r3, [r7, #0]
 8008af6:	42a3      	cmp	r3, r4
 8008af8:	d921      	bls.n	8008b3e <ai_platform_network_process+0x442>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	b1fb      	cbz	r3, 8008b3e <ai_platform_network_process+0x442>
 8008afe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008b02:	b1e0      	cbz	r0, 8008b3e <ai_platform_network_process+0x442>
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	6983      	ldr	r3, [r0, #24]
 8008b08:	f8d2 9000 	ldr.w	r9, [r2]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	0092      	lsls	r2, r2, #2
 8008b10:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8008b14:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8008b18:	d5d5      	bpl.n	8008ac6 <ai_platform_network_process+0x3ca>
 8008b1a:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8008b1e:	6898      	ldr	r0, [r3, #8]
 8008b20:	f002 fb4c 	bl	800b1bc <st_int8_copy>
 8008b24:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8008b28:	f859 200a 	ldr.w	r2, [r9, sl]
 8008b2c:	440b      	add	r3, r1
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	bf24      	itt	cs
 8008b32:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8008b36:	1ad3      	subcs	r3, r2, r3
 8008b38:	f8c8 3004 	str.w	r3, [r8, #4]
 8008b3c:	e7d9      	b.n	8008af2 <ai_platform_network_process+0x3f6>
 8008b3e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8008b42:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8008b46:	3401      	adds	r4, #1
 8008b48:	b2a4      	uxth	r4, r4
 8008b4a:	42a3      	cmp	r3, r4
 8008b4c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8008b50:	f63f af7f 	bhi.w	8008a52 <ai_platform_network_process+0x356>
 8008b54:	4620      	mov	r0, r4
 8008b56:	b005      	add	sp, #20
 8008b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5c:	2a01      	cmp	r2, #1
 8008b5e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8008b60:	d03c      	beq.n	8008bdc <ai_platform_network_process+0x4e0>
 8008b62:	f106 070c 	add.w	r7, r6, #12
 8008b66:	e76f      	b.n	8008a48 <ai_platform_network_process+0x34c>
 8008b68:	4625      	mov	r5, r4
 8008b6a:	2218      	movs	r2, #24
 8008b6c:	2113      	movs	r1, #19
 8008b6e:	f105 0010 	add.w	r0, r5, #16
 8008b72:	f000 f84f 	bl	8008c14 <core_set_error>
 8008b76:	2400      	movs	r4, #0
 8008b78:	e72e      	b.n	80089d8 <ai_platform_network_process+0x2dc>
 8008b7a:	9d02      	ldr	r5, [sp, #8]
 8008b7c:	2221      	movs	r2, #33	; 0x21
 8008b7e:	2112      	movs	r1, #18
 8008b80:	f105 0010 	add.w	r0, r5, #16
 8008b84:	461c      	mov	r4, r3
 8008b86:	f000 f845 	bl	8008c14 <core_set_error>
 8008b8a:	e725      	b.n	80089d8 <ai_platform_network_process+0x2dc>
 8008b8c:	9d02      	ldr	r5, [sp, #8]
 8008b8e:	e71c      	b.n	80089ca <ai_platform_network_process+0x2ce>
 8008b90:	9d02      	ldr	r5, [sp, #8]
 8008b92:	2217      	movs	r2, #23
 8008b94:	2112      	movs	r1, #18
 8008b96:	f105 0010 	add.w	r0, r5, #16
 8008b9a:	461c      	mov	r4, r3
 8008b9c:	f000 f83a 	bl	8008c14 <core_set_error>
 8008ba0:	e71a      	b.n	80089d8 <ai_platform_network_process+0x2dc>
 8008ba2:	9d02      	ldr	r5, [sp, #8]
 8008ba4:	2219      	movs	r2, #25
 8008ba6:	2112      	movs	r1, #18
 8008ba8:	f105 0010 	add.w	r0, r5, #16
 8008bac:	f000 f832 	bl	8008c14 <core_set_error>
 8008bb0:	2400      	movs	r4, #0
 8008bb2:	e711      	b.n	80089d8 <ai_platform_network_process+0x2dc>
 8008bb4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008bb8:	82ab      	strh	r3, [r5, #20]
 8008bba:	e740      	b.n	8008a3e <ai_platform_network_process+0x342>
 8008bbc:	f104 0010 	add.w	r0, r4, #16
 8008bc0:	2219      	movs	r2, #25
 8008bc2:	2113      	movs	r1, #19
 8008bc4:	f000 f826 	bl	8008c14 <core_set_error>
 8008bc8:	2400      	movs	r4, #0
 8008bca:	e705      	b.n	80089d8 <ai_platform_network_process+0x2dc>
 8008bcc:	f104 0010 	add.w	r0, r4, #16
 8008bd0:	2217      	movs	r2, #23
 8008bd2:	2113      	movs	r1, #19
 8008bd4:	f000 f81e 	bl	8008c14 <core_set_error>
 8008bd8:	4654      	mov	r4, sl
 8008bda:	e6fd      	b.n	80089d8 <ai_platform_network_process+0x2dc>
 8008bdc:	2700      	movs	r7, #0
 8008bde:	e733      	b.n	8008a48 <ai_platform_network_process+0x34c>
 8008be0:	4625      	mov	r5, r4
 8008be2:	2221      	movs	r2, #33	; 0x21
 8008be4:	2113      	movs	r1, #19
 8008be6:	f105 0010 	add.w	r0, r5, #16
 8008bea:	461c      	mov	r4, r3
 8008bec:	f000 f812 	bl	8008c14 <core_set_error>
 8008bf0:	e6f2      	b.n	80089d8 <ai_platform_network_process+0x2dc>
 8008bf2:	4625      	mov	r5, r4
 8008bf4:	2217      	movs	r2, #23
 8008bf6:	2113      	movs	r1, #19
 8008bf8:	f105 0010 	add.w	r0, r5, #16
 8008bfc:	461c      	mov	r4, r3
 8008bfe:	f000 f809 	bl	8008c14 <core_set_error>
 8008c02:	e6e9      	b.n	80089d8 <ai_platform_network_process+0x2dc>

08008c04 <core_init>:
 8008c04:	2001      	movs	r0, #1
 8008c06:	4770      	bx	lr

08008c08 <core_get_error>:
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	6800      	ldr	r0, [r0, #0]
 8008c0e:	601a      	str	r2, [r3, #0]
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop

08008c14 <core_set_error>:
 8008c14:	4603      	mov	r3, r0
 8008c16:	7800      	ldrb	r0, [r0, #0]
 8008c18:	b108      	cbz	r0, 8008c1e <core_set_error+0xa>
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	4770      	bx	lr
 8008c1e:	7019      	strb	r1, [r3, #0]
 8008c20:	6819      	ldr	r1, [r3, #0]
 8008c22:	f362 211f 	bfi	r1, r2, #8, #24
 8008c26:	2001      	movs	r0, #1
 8008c28:	6019      	str	r1, [r3, #0]
 8008c2a:	4770      	bx	lr

08008c2c <node_convert_integer>:
 8008c2c:	6982      	ldr	r2, [r0, #24]
 8008c2e:	8813      	ldrh	r3, [r2, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d071      	beq.n	8008d18 <node_convert_integer+0xec>
 8008c34:	6852      	ldr	r2, [r2, #4]
 8008c36:	6850      	ldr	r0, [r2, #4]
 8008c38:	b100      	cbz	r0, 8008c3c <node_convert_integer+0x10>
 8008c3a:	6800      	ldr	r0, [r0, #0]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	f000 8146 	beq.w	8008ece <node_convert_integer+0x2a2>
 8008c42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c46:	6916      	ldr	r6, [r2, #16]
 8008c48:	b085      	sub	sp, #20
 8008c4a:	b106      	cbz	r6, 8008c4e <node_convert_integer+0x22>
 8008c4c:	6836      	ldr	r6, [r6, #0]
 8008c4e:	6883      	ldr	r3, [r0, #8]
 8008c50:	0a1b      	lsrs	r3, r3, #8
 8008c52:	f000 810f 	beq.w	8008e74 <node_convert_integer+0x248>
 8008c56:	68c1      	ldr	r1, [r0, #12]
 8008c58:	2401      	movs	r4, #1
 8008c5a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008c5e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008c62:	4299      	cmp	r1, r3
 8008c64:	fb02 f404 	mul.w	r4, r2, r4
 8008c68:	d1f9      	bne.n	8008c5e <node_convert_integer+0x32>
 8008c6a:	6805      	ldr	r5, [r0, #0]
 8008c6c:	f8d6 9000 	ldr.w	r9, [r6]
 8008c70:	b195      	cbz	r5, 8008c98 <node_convert_integer+0x6c>
 8008c72:	686b      	ldr	r3, [r5, #4]
 8008c74:	b183      	cbz	r3, 8008c98 <node_convert_integer+0x6c>
 8008c76:	886a      	ldrh	r2, [r5, #2]
 8008c78:	b172      	cbz	r2, 8008c98 <node_convert_integer+0x6c>
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f8d3 b000 	ldr.w	fp, [r3]
 8008c80:	f1b9 0f00 	cmp.w	r9, #0
 8008c84:	d00d      	beq.n	8008ca2 <node_convert_integer+0x76>
 8008c86:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008c8a:	b153      	cbz	r3, 8008ca2 <node_convert_integer+0x76>
 8008c8c:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8008c90:	b13a      	cbz	r2, 8008ca2 <node_convert_integer+0x76>
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6819      	ldr	r1, [r3, #0]
 8008c96:	e005      	b.n	8008ca4 <node_convert_integer+0x78>
 8008c98:	f04f 0b00 	mov.w	fp, #0
 8008c9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ca0:	d1f1      	bne.n	8008c86 <node_convert_integer+0x5a>
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8008ca8:	f8d6 a018 	ldr.w	sl, [r6, #24]
 8008cac:	9103      	str	r1, [sp, #12]
 8008cae:	4658      	mov	r0, fp
 8008cb0:	f7f7 fc2c 	bl	800050c <__aeabi_fdiv>
 8008cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8008cb8:	f8da 6000 	ldr.w	r6, [sl]
 8008cbc:	9903      	ldr	r1, [sp, #12]
 8008cbe:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008cc2:	f3c6 56c0 	ubfx	r6, r6, #23, #1
 8008cc6:	4607      	mov	r7, r0
 8008cc8:	d128      	bne.n	8008d1c <node_convert_integer+0xf0>
 8008cca:	2e00      	cmp	r6, #0
 8008ccc:	f040 80a0 	bne.w	8008e10 <node_convert_integer+0x1e4>
 8008cd0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8008cd4:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008cd8:	b13d      	cbz	r5, 8008cea <node_convert_integer+0xbe>
 8008cda:	686b      	ldr	r3, [r5, #4]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 80de 	beq.w	8008e9e <node_convert_integer+0x272>
 8008ce2:	886d      	ldrh	r5, [r5, #2]
 8008ce4:	b10d      	cbz	r5, 8008cea <node_convert_integer+0xbe>
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	781d      	ldrb	r5, [r3, #0]
 8008cea:	f1b9 0f00 	cmp.w	r9, #0
 8008cee:	f000 80bb 	beq.w	8008e68 <node_convert_integer+0x23c>
 8008cf2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8008cf6:	2a00      	cmp	r2, #0
 8008cf8:	f000 80cd 	beq.w	8008e96 <node_convert_integer+0x26a>
 8008cfc:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8008d00:	b10b      	cbz	r3, 8008d06 <node_convert_integer+0xda>
 8008d02:	6853      	ldr	r3, [r2, #4]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	e9cd 5300 	strd	r5, r3, [sp]
 8008d0a:	4622      	mov	r2, r4
 8008d0c:	463b      	mov	r3, r7
 8008d0e:	f001 fb35 	bl	800a37c <forward_lite_node_convert_integer_iu8ou8>
 8008d12:	b005      	add	sp, #20
 8008d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	deff      	udf	#255	; 0xff
 8008d1c:	2e00      	cmp	r6, #0
 8008d1e:	d04b      	beq.n	8008db8 <node_convert_integer+0x18c>
 8008d20:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8008d24:	f8da 8008 	ldr.w	r8, [sl, #8]
 8008d28:	b145      	cbz	r5, 8008d3c <node_convert_integer+0x110>
 8008d2a:	686b      	ldr	r3, [r5, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 80a5 	beq.w	8008e7c <node_convert_integer+0x250>
 8008d32:	886d      	ldrh	r5, [r5, #2]
 8008d34:	b115      	cbz	r5, 8008d3c <node_convert_integer+0x110>
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f993 5000 	ldrsb.w	r5, [r3]
 8008d3c:	f1b9 0f00 	cmp.w	r9, #0
 8008d40:	f000 8094 	beq.w	8008e6c <node_convert_integer+0x240>
 8008d44:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f000 8095 	beq.w	8008e78 <node_convert_integer+0x24c>
 8008d4e:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8008d52:	b110      	cbz	r0, 8008d5a <node_convert_integer+0x12e>
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f993 0000 	ldrsb.w	r0, [r3]
 8008d5a:	2c00      	cmp	r4, #0
 8008d5c:	d07f      	beq.n	8008e5e <node_convert_integer+0x232>
 8008d5e:	f7f7 facd 	bl	80002fc <__aeabi_i2f>
 8008d62:	1933      	adds	r3, r6, r4
 8008d64:	4681      	mov	r9, r0
 8008d66:	9303      	str	r3, [sp, #12]
 8008d68:	f04f 0a00 	mov.w	sl, #0
 8008d6c:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 8008d70:	e00c      	b.n	8008d8c <node_convert_integer+0x160>
 8008d72:	4620      	mov	r0, r4
 8008d74:	4659      	mov	r1, fp
 8008d76:	f7f7 fa0d 	bl	8000194 <__addsf3>
 8008d7a:	f7f7 fcd9 	bl	8000730 <__aeabi_f2iz>
 8008d7e:	f300 0007 	ssat	r0, #8, r0
 8008d82:	f808 0b01 	strb.w	r0, [r8], #1
 8008d86:	9b03      	ldr	r3, [sp, #12]
 8008d88:	429e      	cmp	r6, r3
 8008d8a:	d068      	beq.n	8008e5e <node_convert_integer+0x232>
 8008d8c:	f916 0b01 	ldrsb.w	r0, [r6], #1
 8008d90:	1b40      	subs	r0, r0, r5
 8008d92:	f7f7 fab3 	bl	80002fc <__aeabi_i2f>
 8008d96:	4639      	mov	r1, r7
 8008d98:	f7f7 fb04 	bl	80003a4 <__aeabi_fmul>
 8008d9c:	4649      	mov	r1, r9
 8008d9e:	f7f7 f9f9 	bl	8000194 <__addsf3>
 8008da2:	4651      	mov	r1, sl
 8008da4:	4604      	mov	r4, r0
 8008da6:	f7f7 fcb9 	bl	800071c <__aeabi_fcmpgt>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	d1e1      	bne.n	8008d72 <node_convert_integer+0x146>
 8008dae:	4949      	ldr	r1, [pc, #292]	; (8008ed4 <node_convert_integer+0x2a8>)
 8008db0:	4620      	mov	r0, r4
 8008db2:	f7f7 f9ed 	bl	8000190 <__aeabi_fsub>
 8008db6:	e7e0      	b.n	8008d7a <node_convert_integer+0x14e>
 8008db8:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8008dbc:	f8da a008 	ldr.w	sl, [sl, #8]
 8008dc0:	b13d      	cbz	r5, 8008dd2 <node_convert_integer+0x1a6>
 8008dc2:	686b      	ldr	r3, [r5, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d070      	beq.n	8008eaa <node_convert_integer+0x27e>
 8008dc8:	886d      	ldrh	r5, [r5, #2]
 8008dca:	b115      	cbz	r5, 8008dd2 <node_convert_integer+0x1a6>
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f993 5000 	ldrsb.w	r5, [r3]
 8008dd2:	f1b9 0f00 	cmp.w	r9, #0
 8008dd6:	d045      	beq.n	8008e64 <node_convert_integer+0x238>
 8008dd8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d05c      	beq.n	8008e9a <node_convert_integer+0x26e>
 8008de0:	f8b9 6002 	ldrh.w	r6, [r9, #2]
 8008de4:	b10e      	cbz	r6, 8008dea <node_convert_integer+0x1be>
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	781e      	ldrb	r6, [r3, #0]
 8008dea:	4658      	mov	r0, fp
 8008dec:	f7f7 fc6e 	bl	80006cc <__aeabi_fcmpeq>
 8008df0:	e9cd 5600 	strd	r5, r6, [sp]
 8008df4:	b118      	cbz	r0, 8008dfe <node_convert_integer+0x1d2>
 8008df6:	f105 0380 	add.w	r3, r5, #128	; 0x80
 8008dfa:	42b3      	cmp	r3, r6
 8008dfc:	d060      	beq.n	8008ec0 <node_convert_integer+0x294>
 8008dfe:	463b      	mov	r3, r7
 8008e00:	4622      	mov	r2, r4
 8008e02:	4651      	mov	r1, sl
 8008e04:	4640      	mov	r0, r8
 8008e06:	f001 fb75 	bl	800a4f4 <forward_lite_node_convert_integer_is8ou8>
 8008e0a:	b005      	add	sp, #20
 8008e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e10:	b135      	cbz	r5, 8008e20 <node_convert_integer+0x1f4>
 8008e12:	686b      	ldr	r3, [r5, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d039      	beq.n	8008e8c <node_convert_integer+0x260>
 8008e18:	886d      	ldrh	r5, [r5, #2]
 8008e1a:	b10d      	cbz	r5, 8008e20 <node_convert_integer+0x1f4>
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	781d      	ldrb	r5, [r3, #0]
 8008e20:	f1b9 0f00 	cmp.w	r9, #0
 8008e24:	d024      	beq.n	8008e70 <node_convert_integer+0x244>
 8008e26:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008e2a:	b36b      	cbz	r3, 8008e88 <node_convert_integer+0x25c>
 8008e2c:	f8b9 6002 	ldrh.w	r6, [r9, #2]
 8008e30:	b116      	cbz	r6, 8008e38 <node_convert_integer+0x20c>
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	f993 6000 	ldrsb.w	r6, [r3]
 8008e38:	4658      	mov	r0, fp
 8008e3a:	f7f7 fc47 	bl	80006cc <__aeabi_fcmpeq>
 8008e3e:	f8d8 c008 	ldr.w	ip, [r8, #8]
 8008e42:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008e46:	e9cd 5600 	strd	r5, r6, [sp]
 8008e4a:	b118      	cbz	r0, 8008e54 <node_convert_integer+0x228>
 8008e4c:	f106 0380 	add.w	r3, r6, #128	; 0x80
 8008e50:	429d      	cmp	r5, r3
 8008e52:	d02f      	beq.n	8008eb4 <node_convert_integer+0x288>
 8008e54:	463b      	mov	r3, r7
 8008e56:	4622      	mov	r2, r4
 8008e58:	4660      	mov	r0, ip
 8008e5a:	f001 fac5 	bl	800a3e8 <forward_lite_node_convert_integer_iu8os8>
 8008e5e:	b005      	add	sp, #20
 8008e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e64:	464e      	mov	r6, r9
 8008e66:	e7c0      	b.n	8008dea <node_convert_integer+0x1be>
 8008e68:	464b      	mov	r3, r9
 8008e6a:	e74c      	b.n	8008d06 <node_convert_integer+0xda>
 8008e6c:	4648      	mov	r0, r9
 8008e6e:	e774      	b.n	8008d5a <node_convert_integer+0x12e>
 8008e70:	464e      	mov	r6, r9
 8008e72:	e7e1      	b.n	8008e38 <node_convert_integer+0x20c>
 8008e74:	2401      	movs	r4, #1
 8008e76:	e6f8      	b.n	8008c6a <node_convert_integer+0x3e>
 8008e78:	4618      	mov	r0, r3
 8008e7a:	e76e      	b.n	8008d5a <node_convert_integer+0x12e>
 8008e7c:	461d      	mov	r5, r3
 8008e7e:	f1b9 0f00 	cmp.w	r9, #0
 8008e82:	f47f af5f 	bne.w	8008d44 <node_convert_integer+0x118>
 8008e86:	e7f1      	b.n	8008e6c <node_convert_integer+0x240>
 8008e88:	461e      	mov	r6, r3
 8008e8a:	e7d5      	b.n	8008e38 <node_convert_integer+0x20c>
 8008e8c:	461d      	mov	r5, r3
 8008e8e:	f1b9 0f00 	cmp.w	r9, #0
 8008e92:	d1c8      	bne.n	8008e26 <node_convert_integer+0x1fa>
 8008e94:	e7ec      	b.n	8008e70 <node_convert_integer+0x244>
 8008e96:	4613      	mov	r3, r2
 8008e98:	e735      	b.n	8008d06 <node_convert_integer+0xda>
 8008e9a:	461e      	mov	r6, r3
 8008e9c:	e7a5      	b.n	8008dea <node_convert_integer+0x1be>
 8008e9e:	461d      	mov	r5, r3
 8008ea0:	f1b9 0f00 	cmp.w	r9, #0
 8008ea4:	f47f af25 	bne.w	8008cf2 <node_convert_integer+0xc6>
 8008ea8:	e7de      	b.n	8008e68 <node_convert_integer+0x23c>
 8008eaa:	461d      	mov	r5, r3
 8008eac:	f1b9 0f00 	cmp.w	r9, #0
 8008eb0:	d192      	bne.n	8008dd8 <node_convert_integer+0x1ac>
 8008eb2:	e7d7      	b.n	8008e64 <node_convert_integer+0x238>
 8008eb4:	463b      	mov	r3, r7
 8008eb6:	4622      	mov	r2, r4
 8008eb8:	4660      	mov	r0, ip
 8008eba:	f001 fae3 	bl	800a484 <forward_lite_node_convert_integer_iu8os8_fast>
 8008ebe:	e7ce      	b.n	8008e5e <node_convert_integer+0x232>
 8008ec0:	463b      	mov	r3, r7
 8008ec2:	4622      	mov	r2, r4
 8008ec4:	4651      	mov	r1, sl
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	f001 fb4a 	bl	800a560 <forward_lite_node_convert_integer_is8ou8_fast>
 8008ecc:	e7c7      	b.n	8008e5e <node_convert_integer+0x232>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	deff      	udf	#255	; 0xff
 8008ed4:	3efffffc 	.word	0x3efffffc

08008ed8 <ai_check_custom_types>:
 8008ed8:	b082      	sub	sp, #8
 8008eda:	4b13      	ldr	r3, [pc, #76]	; (8008f28 <ai_check_custom_types+0x50>)
 8008edc:	9301      	str	r3, [sp, #4]
 8008ede:	b118      	cbz	r0, 8008ee8 <ai_check_custom_types+0x10>
 8008ee0:	7803      	ldrb	r3, [r0, #0]
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d002      	beq.n	8008eec <ai_check_custom_types+0x14>
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	b002      	add	sp, #8
 8008eea:	4770      	bx	lr
 8008eec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d004      	beq.n	8008efe <ai_check_custom_types+0x26>
 8008ef4:	2001      	movs	r0, #1
 8008ef6:	f080 0001 	eor.w	r0, r0, #1
 8008efa:	b002      	add	sp, #8
 8008efc:	4770      	bx	lr
 8008efe:	7842      	ldrb	r2, [r0, #1]
 8008f00:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	f100 0001 	add.w	r0, r0, #1
 8008f0a:	d1f3      	bne.n	8008ef4 <ai_check_custom_types+0x1c>
 8008f0c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008f10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d1ed      	bne.n	8008ef4 <ai_check_custom_types+0x1c>
 8008f18:	7842      	ldrb	r2, [r0, #1]
 8008f1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d1e8      	bne.n	8008ef4 <ai_check_custom_types+0x1c>
 8008f22:	2000      	movs	r0, #0
 8008f24:	e7e7      	b.n	8008ef6 <ai_check_custom_types+0x1e>
 8008f26:	bf00      	nop
 8008f28:	84048403 	.word	0x84048403

08008f2c <ai_layers_init_all>:
 8008f2c:	4601      	mov	r1, r0
 8008f2e:	2000      	movs	r0, #0
 8008f30:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008f32:	b143      	cbz	r3, 8008f46 <ai_layers_init_all+0x1a>
 8008f34:	691a      	ldr	r2, [r3, #16]
 8008f36:	60d9      	str	r1, [r3, #12]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	f100 0001 	add.w	r0, r0, #1
 8008f3e:	d002      	beq.n	8008f46 <ai_layers_init_all+0x1a>
 8008f40:	b10a      	cbz	r2, 8008f46 <ai_layers_init_all+0x1a>
 8008f42:	4613      	mov	r3, r2
 8008f44:	e7f5      	b.n	8008f32 <ai_layers_init_all+0x6>
 8008f46:	4770      	bx	lr

08008f48 <ai_layers_post_init_all>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008f4c:	2500      	movs	r5, #0
 8008f4e:	b16c      	cbz	r4, 8008f6c <ai_layers_post_init_all+0x24>
 8008f50:	6863      	ldr	r3, [r4, #4]
 8008f52:	07db      	lsls	r3, r3, #31
 8008f54:	d504      	bpl.n	8008f60 <ai_layers_post_init_all+0x18>
 8008f56:	6a23      	ldr	r3, [r4, #32]
 8008f58:	4620      	mov	r0, r4
 8008f5a:	b10b      	cbz	r3, 8008f60 <ai_layers_post_init_all+0x18>
 8008f5c:	4798      	blx	r3
 8008f5e:	3501      	adds	r5, #1
 8008f60:	6923      	ldr	r3, [r4, #16]
 8008f62:	42a3      	cmp	r3, r4
 8008f64:	d002      	beq.n	8008f6c <ai_layers_post_init_all+0x24>
 8008f66:	b10b      	cbz	r3, 8008f6c <ai_layers_post_init_all+0x24>
 8008f68:	461c      	mov	r4, r3
 8008f6a:	e7f0      	b.n	8008f4e <ai_layers_post_init_all+0x6>
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	bd38      	pop	{r3, r4, r5, pc}

08008f70 <ai_layers_forward_all>:
 8008f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f74:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8008f78:	4604      	mov	r4, r0
 8008f7a:	f1b8 0f00 	cmp.w	r8, #0
 8008f7e:	d02b      	beq.n	8008fd8 <ai_layers_forward_all+0x68>
 8008f80:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008f82:	6381      	str	r1, [r0, #56]	; 0x38
 8008f84:	b321      	cbz	r1, 8008fd0 <ai_layers_forward_all+0x60>
 8008f86:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008f88:	2001      	movs	r0, #1
 8008f8a:	47c0      	blx	r8
 8008f8c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008f8e:	b1fe      	cbz	r6, 8008fd0 <ai_layers_forward_all+0x60>
 8008f90:	2700      	movs	r7, #0
 8008f92:	4631      	mov	r1, r6
 8008f94:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008f96:	2002      	movs	r0, #2
 8008f98:	47c0      	blx	r8
 8008f9a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	696b      	ldr	r3, [r5, #20]
 8008fa0:	4798      	blx	r3
 8008fa2:	692e      	ldr	r6, [r5, #16]
 8008fa4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008fa6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008fa8:	42b5      	cmp	r5, r6
 8008faa:	f04f 0003 	mov.w	r0, #3
 8008fae:	d007      	beq.n	8008fc0 <ai_layers_forward_all+0x50>
 8008fb0:	47c0      	blx	r8
 8008fb2:	3701      	adds	r7, #1
 8008fb4:	63a6      	str	r6, [r4, #56]	; 0x38
 8008fb6:	2e00      	cmp	r6, #0
 8008fb8:	d1eb      	bne.n	8008f92 <ai_layers_forward_all+0x22>
 8008fba:	4638      	mov	r0, r7
 8008fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc0:	2003      	movs	r0, #3
 8008fc2:	47c0      	blx	r8
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	3701      	adds	r7, #1
 8008fc8:	63a3      	str	r3, [r4, #56]	; 0x38
 8008fca:	4638      	mov	r0, r7
 8008fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd0:	2700      	movs	r7, #0
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008fda:	6385      	str	r5, [r0, #56]	; 0x38
 8008fdc:	2d00      	cmp	r5, #0
 8008fde:	d0f7      	beq.n	8008fd0 <ai_layers_forward_all+0x60>
 8008fe0:	4647      	mov	r7, r8
 8008fe2:	696b      	ldr	r3, [r5, #20]
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	4798      	blx	r3
 8008fe8:	462b      	mov	r3, r5
 8008fea:	692d      	ldr	r5, [r5, #16]
 8008fec:	429d      	cmp	r5, r3
 8008fee:	d004      	beq.n	8008ffa <ai_layers_forward_all+0x8a>
 8008ff0:	63a5      	str	r5, [r4, #56]	; 0x38
 8008ff2:	3701      	adds	r7, #1
 8008ff4:	2d00      	cmp	r5, #0
 8008ff6:	d1f4      	bne.n	8008fe2 <ai_layers_forward_all+0x72>
 8008ff8:	e7df      	b.n	8008fba <ai_layers_forward_all+0x4a>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	63a3      	str	r3, [r4, #56]	; 0x38
 8008ffe:	3701      	adds	r7, #1
 8009000:	e7db      	b.n	8008fba <ai_layers_forward_all+0x4a>
 8009002:	bf00      	nop

08009004 <func_dummy>:
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop

08009008 <forward_conv2d_sssa8_ch>:
 8009008:	6983      	ldr	r3, [r0, #24]
 800900a:	881a      	ldrh	r2, [r3, #0]
 800900c:	2a00      	cmp	r2, #0
 800900e:	f000 8117 	beq.w	8009240 <forward_conv2d_sssa8_ch+0x238>
 8009012:	4601      	mov	r1, r0
 8009014:	6858      	ldr	r0, [r3, #4]
 8009016:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800901a:	f1bc 0f00 	cmp.w	ip, #0
 800901e:	d001      	beq.n	8009024 <forward_conv2d_sssa8_ch+0x1c>
 8009020:	f8dc c000 	ldr.w	ip, [ip]
 8009024:	2a01      	cmp	r2, #1
 8009026:	f000 812d 	beq.w	8009284 <forward_conv2d_sssa8_ch+0x27c>
 800902a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8009032:	b0a9      	sub	sp, #164	; 0xa4
 8009034:	f1b9 0f00 	cmp.w	r9, #0
 8009038:	d001      	beq.n	800903e <forward_conv2d_sssa8_ch+0x36>
 800903a:	f8d9 9000 	ldr.w	r9, [r9]
 800903e:	2a02      	cmp	r2, #2
 8009040:	f000 80fb 	beq.w	800923a <forward_conv2d_sssa8_ch+0x232>
 8009044:	69c3      	ldr	r3, [r0, #28]
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 8115 	beq.w	8009276 <forward_conv2d_sssa8_ch+0x26e>
 800904c:	8b04      	ldrh	r4, [r0, #24]
 800904e:	f8d3 a000 	ldr.w	sl, [r3]
 8009052:	2c01      	cmp	r4, #1
 8009054:	f200 80f6 	bhi.w	8009244 <forward_conv2d_sssa8_ch+0x23c>
 8009058:	2400      	movs	r4, #0
 800905a:	2a03      	cmp	r2, #3
 800905c:	f000 8115 	beq.w	800928a <forward_conv2d_sssa8_ch+0x282>
 8009060:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009062:	2a00      	cmp	r2, #0
 8009064:	f000 810a 	beq.w	800927c <forward_conv2d_sssa8_ch+0x274>
 8009068:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800906a:	6815      	ldr	r5, [r2, #0]
 800906c:	901b      	str	r0, [sp, #108]	; 0x6c
 800906e:	9514      	str	r5, [sp, #80]	; 0x50
 8009070:	2800      	cmp	r0, #0
 8009072:	f000 80f7 	beq.w	8009264 <forward_conv2d_sssa8_ch+0x25c>
 8009076:	6856      	ldr	r6, [r2, #4]
 8009078:	4628      	mov	r0, r5
 800907a:	69a2      	ldr	r2, [r4, #24]
 800907c:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8009080:	68f5      	ldr	r5, [r6, #12]
 8009082:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8009086:	6892      	ldr	r2, [r2, #8]
 8009088:	9227      	str	r2, [sp, #156]	; 0x9c
 800908a:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
 800908e:	686a      	ldr	r2, [r5, #4]
 8009090:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8009094:	68ad      	ldr	r5, [r5, #8]
 8009096:	951e      	str	r5, [sp, #120]	; 0x78
 8009098:	68e5      	ldr	r5, [r4, #12]
 800909a:	68a4      	ldr	r4, [r4, #8]
 800909c:	f8d1 e03c 	ldr.w	lr, [r1, #60]	; 0x3c
 80090a0:	9420      	str	r4, [sp, #128]	; 0x80
 80090a2:	8d0c      	ldrh	r4, [r1, #40]	; 0x28
 80090a4:	9421      	str	r4, [sp, #132]	; 0x84
 80090a6:	8d8c      	ldrh	r4, [r1, #44]	; 0x2c
 80090a8:	f8da 700c 	ldr.w	r7, [sl, #12]
 80090ac:	9422      	str	r4, [sp, #136]	; 0x88
 80090ae:	f8be 4000 	ldrh.w	r4, [lr]
 80090b2:	9423      	str	r4, [sp, #140]	; 0x8c
 80090b4:	f8be 4004 	ldrh.w	r4, [lr, #4]
 80090b8:	9424      	str	r4, [sp, #144]	; 0x90
 80090ba:	68bc      	ldr	r4, [r7, #8]
 80090bc:	6980      	ldr	r0, [r0, #24]
 80090be:	9425      	str	r4, [sp, #148]	; 0x94
 80090c0:	687c      	ldr	r4, [r7, #4]
 80090c2:	9426      	str	r4, [sp, #152]	; 0x98
 80090c4:	b294      	uxth	r4, r2
 80090c6:	f8d0 b008 	ldr.w	fp, [r0, #8]
 80090ca:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80090ce:	951f      	str	r5, [sp, #124]	; 0x7c
 80090d0:	9413      	str	r4, [sp, #76]	; 0x4c
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f000 80bd 	beq.w	8009252 <forward_conv2d_sssa8_ch+0x24a>
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 80b9 	beq.w	8009252 <forward_conv2d_sssa8_ch+0x24a>
 80090e0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80090e4:	f1b8 0f00 	cmp.w	r8, #0
 80090e8:	bf18      	it	ne
 80090ea:	4698      	movne	r8, r3
 80090ec:	f8dc 4000 	ldr.w	r4, [ip]
 80090f0:	6835      	ldr	r5, [r6, #0]
 80090f2:	f8da 7000 	ldr.w	r7, [sl]
 80090f6:	2c00      	cmp	r4, #0
 80090f8:	f000 80a8 	beq.w	800924c <forward_conv2d_sssa8_ch+0x244>
 80090fc:	6863      	ldr	r3, [r4, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f000 80a4 	beq.w	800924c <forward_conv2d_sssa8_ch+0x244>
 8009104:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 8009108:	f1be 0f00 	cmp.w	lr, #0
 800910c:	f000 809e 	beq.w	800924c <forward_conv2d_sssa8_ch+0x244>
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	9315      	str	r3, [sp, #84]	; 0x54
 8009116:	2d00      	cmp	r5, #0
 8009118:	f000 8096 	beq.w	8009248 <forward_conv2d_sssa8_ch+0x240>
 800911c:	686b      	ldr	r3, [r5, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	f000 8092 	beq.w	8009248 <forward_conv2d_sssa8_ch+0x240>
 8009124:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 8009128:	f1be 0f00 	cmp.w	lr, #0
 800912c:	f000 808c 	beq.w	8009248 <forward_conv2d_sssa8_ch+0x240>
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f8dc e018 	ldr.w	lr, [ip, #24]
 8009138:	f8da c018 	ldr.w	ip, [sl, #24]
 800913c:	f891 1041 	ldrb.w	r1, [r1, #65]	; 0x41
 8009140:	9116      	str	r1, [sp, #88]	; 0x58
 8009142:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8009146:	9118      	str	r1, [sp, #96]	; 0x60
 8009148:	69b1      	ldr	r1, [r6, #24]
 800914a:	f8de a008 	ldr.w	sl, [lr, #8]
 800914e:	6889      	ldr	r1, [r1, #8]
 8009150:	9117      	str	r1, [sp, #92]	; 0x5c
 8009152:	b117      	cbz	r7, 800915a <forward_conv2d_sssa8_ch+0x152>
 8009154:	687f      	ldr	r7, [r7, #4]
 8009156:	b107      	cbz	r7, 800915a <forward_conv2d_sssa8_ch+0x152>
 8009158:	683f      	ldr	r7, [r7, #0]
 800915a:	b292      	uxth	r2, r2
 800915c:	b144      	cbz	r4, 8009170 <forward_conv2d_sssa8_ch+0x168>
 800915e:	6861      	ldr	r1, [r4, #4]
 8009160:	2900      	cmp	r1, #0
 8009162:	f000 8084 	beq.w	800926e <forward_conv2d_sssa8_ch+0x266>
 8009166:	8864      	ldrh	r4, [r4, #2]
 8009168:	b114      	cbz	r4, 8009170 <forward_conv2d_sssa8_ch+0x168>
 800916a:	6849      	ldr	r1, [r1, #4]
 800916c:	f991 4000 	ldrsb.w	r4, [r1]
 8009170:	b13d      	cbz	r5, 8009182 <forward_conv2d_sssa8_ch+0x17a>
 8009172:	6869      	ldr	r1, [r5, #4]
 8009174:	2900      	cmp	r1, #0
 8009176:	d07c      	beq.n	8009272 <forward_conv2d_sssa8_ch+0x26a>
 8009178:	886d      	ldrh	r5, [r5, #2]
 800917a:	b115      	cbz	r5, 8009182 <forward_conv2d_sssa8_ch+0x17a>
 800917c:	6849      	ldr	r1, [r1, #4]
 800917e:	f991 5000 	ldrsb.w	r5, [r1]
 8009182:	e9d0 0100 	ldrd	r0, r1, [r0]
 8009186:	e9cd 3219 	strd	r3, r2, [sp, #100]	; 0x64
 800918a:	f003 fa5f 	bl	800c64c <ai_array_get_byte_size>
 800918e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009190:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009192:	f8cd b000 	str.w	fp, [sp]
 8009196:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
 800919a:	445a      	add	r2, fp
 800919c:	4619      	mov	r1, r3
 800919e:	9815      	ldr	r0, [sp, #84]	; 0x54
 80091a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091a2:	9201      	str	r2, [sp, #4]
 80091a4:	463a      	mov	r2, r7
 80091a6:	f001 fc43 	bl	800aa30 <align_factor_ch>
 80091aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091ac:	6993      	ldr	r3, [r2, #24]
 80091ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091b2:	f003 fa4b 	bl	800c64c <ai_array_get_byte_size>
 80091b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80091b8:	920c      	str	r2, [sp, #48]	; 0x30
 80091ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80091bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091be:	9301      	str	r3, [sp, #4]
 80091c0:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
 80091c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80091c6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80091c8:	9208      	str	r2, [sp, #32]
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80091ce:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 80091d2:	9207      	str	r2, [sp, #28]
 80091d4:	930d      	str	r3, [sp, #52]	; 0x34
 80091d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80091d8:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 80091dc:	9206      	str	r2, [sp, #24]
 80091de:	9303      	str	r3, [sp, #12]
 80091e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80091e2:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 80091e6:	9205      	str	r2, [sp, #20]
 80091e8:	2701      	movs	r7, #1
 80091ea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091ec:	9302      	str	r3, [sp, #8]
 80091ee:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 80091f2:	9204      	str	r2, [sp, #16]
 80091f4:	e9cd 0b10 	strd	r0, fp, [sp, #64]	; 0x40
 80091f8:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
 80091fc:	930e      	str	r3, [sp, #56]	; 0x38
 80091fe:	9409      	str	r4, [sp, #36]	; 0x24
 8009200:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009202:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
 8009206:	970f      	str	r7, [sp, #60]	; 0x3c
 8009208:	4650      	mov	r0, sl
 800920a:	f000 fb33 	bl	8009874 <forward_lite_conv2d_sssa8_ch>
 800920e:	68b3      	ldr	r3, [r6, #8]
 8009210:	0a1b      	lsrs	r3, r3, #8
 8009212:	463a      	mov	r2, r7
 8009214:	d008      	beq.n	8009228 <forward_conv2d_sssa8_ch+0x220>
 8009216:	68f0      	ldr	r0, [r6, #12]
 8009218:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800921c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009220:	4298      	cmp	r0, r3
 8009222:	fb01 f202 	mul.w	r2, r1, r2
 8009226:	d1f9      	bne.n	800921c <forward_conv2d_sssa8_ch+0x214>
 8009228:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800922c:	4643      	mov	r3, r8
 800922e:	4631      	mov	r1, r6
 8009230:	4648      	mov	r0, r9
 8009232:	b029      	add	sp, #164	; 0xa4
 8009234:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009238:	4760      	bx	ip
 800923a:	2300      	movs	r3, #0
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	deff      	udf	#255	; 0xff
 8009240:	6853      	ldr	r3, [r2, #4]
 8009242:	deff      	udf	#255	; 0xff
 8009244:	685c      	ldr	r4, [r3, #4]
 8009246:	e708      	b.n	800905a <forward_conv2d_sssa8_ch+0x52>
 8009248:	2300      	movs	r3, #0
 800924a:	e773      	b.n	8009134 <forward_conv2d_sssa8_ch+0x12c>
 800924c:	2300      	movs	r3, #0
 800924e:	9315      	str	r3, [sp, #84]	; 0x54
 8009250:	e761      	b.n	8009116 <forward_conv2d_sssa8_ch+0x10e>
 8009252:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8009256:	f1b8 0f00 	cmp.w	r8, #0
 800925a:	f43f af47 	beq.w	80090ec <forward_conv2d_sssa8_ch+0xe4>
 800925e:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8009262:	e743      	b.n	80090ec <forward_conv2d_sssa8_ch+0xe4>
 8009264:	4a0b      	ldr	r2, [pc, #44]	; (8009294 <forward_conv2d_sssa8_ch+0x28c>)
 8009266:	921b      	str	r2, [sp, #108]	; 0x6c
 8009268:	464e      	mov	r6, r9
 800926a:	4628      	mov	r0, r5
 800926c:	e705      	b.n	800907a <forward_conv2d_sssa8_ch+0x72>
 800926e:	460c      	mov	r4, r1
 8009270:	e77e      	b.n	8009170 <forward_conv2d_sssa8_ch+0x168>
 8009272:	460d      	mov	r5, r1
 8009274:	e785      	b.n	8009182 <forward_conv2d_sssa8_ch+0x17a>
 8009276:	469a      	mov	sl, r3
 8009278:	461c      	mov	r4, r3
 800927a:	e6ee      	b.n	800905a <forward_conv2d_sssa8_ch+0x52>
 800927c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800927e:	b93b      	cbnz	r3, 8009290 <forward_conv2d_sssa8_ch+0x288>
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	deff      	udf	#255	; 0xff
 8009284:	2300      	movs	r3, #0
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	deff      	udf	#255	; 0xff
 800928a:	2300      	movs	r3, #0
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	deff      	udf	#255	; 0xff
 8009290:	68d3      	ldr	r3, [r2, #12]
 8009292:	deff      	udf	#255	; 0xff
 8009294:	08009005 	.word	0x08009005

08009298 <forward_dense_integer_SSSA>:
 8009298:	6983      	ldr	r3, [r0, #24]
 800929a:	8818      	ldrh	r0, [r3, #0]
 800929c:	2800      	cmp	r0, #0
 800929e:	f000 80b7 	beq.w	8009410 <forward_dense_integer_SSSA+0x178>
 80092a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a6:	685c      	ldr	r4, [r3, #4]
 80092a8:	6863      	ldr	r3, [r4, #4]
 80092aa:	b093      	sub	sp, #76	; 0x4c
 80092ac:	b103      	cbz	r3, 80092b0 <forward_dense_integer_SSSA+0x18>
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2801      	cmp	r0, #1
 80092b2:	f000 8159 	beq.w	8009568 <forward_dense_integer_SSSA+0x2d0>
 80092b6:	6922      	ldr	r2, [r4, #16]
 80092b8:	b102      	cbz	r2, 80092bc <forward_dense_integer_SSSA+0x24>
 80092ba:	6812      	ldr	r2, [r2, #0]
 80092bc:	2802      	cmp	r0, #2
 80092be:	f000 8156 	beq.w	800956e <forward_dense_integer_SSSA+0x2d6>
 80092c2:	69e5      	ldr	r5, [r4, #28]
 80092c4:	2d00      	cmp	r5, #0
 80092c6:	f000 80f2 	beq.w	80094ae <forward_dense_integer_SSSA+0x216>
 80092ca:	8b26      	ldrh	r6, [r4, #24]
 80092cc:	6829      	ldr	r1, [r5, #0]
 80092ce:	2e01      	cmp	r6, #1
 80092d0:	f240 8120 	bls.w	8009514 <forward_dense_integer_SSSA+0x27c>
 80092d4:	686d      	ldr	r5, [r5, #4]
 80092d6:	2803      	cmp	r0, #3
 80092d8:	f000 814c 	beq.w	8009574 <forward_dense_integer_SSSA+0x2dc>
 80092dc:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 80092de:	69a8      	ldr	r0, [r5, #24]
 80092e0:	9408      	str	r4, [sp, #32]
 80092e2:	2c00      	cmp	r4, #0
 80092e4:	f000 8102 	beq.w	80094ec <forward_dense_integer_SSSA+0x254>
 80092e8:	6880      	ldr	r0, [r0, #8]
 80092ea:	6826      	ldr	r6, [r4, #0]
 80092ec:	900c      	str	r0, [sp, #48]	; 0x30
 80092ee:	68dc      	ldr	r4, [r3, #12]
 80092f0:	68d0      	ldr	r0, [r2, #12]
 80092f2:	6867      	ldr	r7, [r4, #4]
 80092f4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80092f8:	6995      	ldr	r5, [r2, #24]
 80092fa:	9608      	str	r6, [sp, #32]
 80092fc:	e9d0 4002 	ldrd	r4, r0, [r0, #8]
 8009300:	fb00 f004 	mul.w	r0, r0, r4
 8009304:	970e      	str	r7, [sp, #56]	; 0x38
 8009306:	699c      	ldr	r4, [r3, #24]
 8009308:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800930c:	9009      	str	r0, [sp, #36]	; 0x24
 800930e:	fa1f f887 	uxth.w	r8, r7
 8009312:	fa1f f98c 	uxth.w	r9, ip
 8009316:	b116      	cbz	r6, 800931e <forward_dense_integer_SSSA+0x86>
 8009318:	69b0      	ldr	r0, [r6, #24]
 800931a:	6880      	ldr	r0, [r0, #8]
 800931c:	9008      	str	r0, [sp, #32]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6812      	ldr	r2, [r2, #0]
 8009322:	f8d1 c000 	ldr.w	ip, [r1]
 8009326:	6988      	ldr	r0, [r1, #24]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d073      	beq.n	8009414 <forward_dense_integer_SSSA+0x17c>
 800932c:	6859      	ldr	r1, [r3, #4]
 800932e:	2900      	cmp	r1, #0
 8009330:	f000 80a0 	beq.w	8009474 <forward_dense_integer_SSSA+0x1dc>
 8009334:	885f      	ldrh	r7, [r3, #2]
 8009336:	2f00      	cmp	r7, #0
 8009338:	f000 808c 	beq.w	8009454 <forward_dense_integer_SSSA+0x1bc>
 800933c:	680e      	ldr	r6, [r1, #0]
 800933e:	f8d6 a000 	ldr.w	sl, [r6]
 8009342:	2a00      	cmp	r2, #0
 8009344:	f000 808b 	beq.w	800945e <forward_dense_integer_SSSA+0x1c6>
 8009348:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800934c:	f1be 0f00 	cmp.w	lr, #0
 8009350:	f000 8099 	beq.w	8009486 <forward_dense_integer_SSSA+0x1ee>
 8009354:	8857      	ldrh	r7, [r2, #2]
 8009356:	2f00      	cmp	r7, #0
 8009358:	d068      	beq.n	800942c <forward_dense_integer_SSSA+0x194>
 800935a:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800935e:	f8de 0000 	ldr.w	r0, [lr]
 8009362:	68ae      	ldr	r6, [r5, #8]
 8009364:	6800      	ldr	r0, [r0, #0]
 8009366:	68a5      	ldr	r5, [r4, #8]
 8009368:	900d      	str	r0, [sp, #52]	; 0x34
 800936a:	2900      	cmp	r1, #0
 800936c:	d069      	beq.n	8009442 <forward_dense_integer_SSSA+0x1aa>
 800936e:	885b      	ldrh	r3, [r3, #2]
 8009370:	2b00      	cmp	r3, #0
 8009372:	f000 8093 	beq.w	800949c <forward_dense_integer_SSSA+0x204>
 8009376:	684b      	ldr	r3, [r1, #4]
 8009378:	f993 3000 	ldrsb.w	r3, [r3]
 800937c:	930b      	str	r3, [sp, #44]	; 0x2c
 800937e:	2a00      	cmp	r2, #0
 8009380:	f000 80ea 	beq.w	8009558 <forward_dense_integer_SSSA+0x2c0>
 8009384:	f1be 0f00 	cmp.w	lr, #0
 8009388:	f000 808e 	beq.w	80094a8 <forward_dense_integer_SSSA+0x210>
 800938c:	8857      	ldrh	r7, [r2, #2]
 800938e:	2f00      	cmp	r7, #0
 8009390:	d15a      	bne.n	8009448 <forward_dense_integer_SSSA+0x1b0>
 8009392:	970a      	str	r7, [sp, #40]	; 0x28
 8009394:	f1bc 0f00 	cmp.w	ip, #0
 8009398:	f000 80e0 	beq.w	800955c <forward_dense_integer_SSSA+0x2c4>
 800939c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 80db 	beq.w	800955c <forward_dense_integer_SSSA+0x2c4>
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2400      	movs	r4, #0
 80093aa:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 80093ae:	9411      	str	r4, [sp, #68]	; 0x44
 80093b0:	6819      	ldr	r1, [r3, #0]
 80093b2:	4650      	mov	r0, sl
 80093b4:	f7f6 fff6 	bl	80003a4 <__aeabi_fmul>
 80093b8:	f10d 0742 	add.w	r7, sp, #66	; 0x42
 80093bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80093be:	f7f7 f8a5 	bl	800050c <__aeabi_fdiv>
 80093c2:	4639      	mov	r1, r7
 80093c4:	f001 fad6 	bl	800a974 <align_factor>
 80093c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ca:	9011      	str	r0, [sp, #68]	; 0x44
 80093cc:	b1eb      	cbz	r3, 800940a <forward_dense_integer_SSSA+0x172>
 80093ce:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80093d2:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80093d6:	930d      	str	r3, [sp, #52]	; 0x34
 80093d8:	9b08      	ldr	r3, [sp, #32]
 80093da:	9306      	str	r3, [sp, #24]
 80093dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093de:	9304      	str	r3, [sp, #16]
 80093e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e2:	9303      	str	r3, [sp, #12]
 80093e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e6:	9605      	str	r6, [sp, #20]
 80093e8:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80093ec:	ab11      	add	r3, sp, #68	; 0x44
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093f2:	4628      	mov	r0, r5
 80093f4:	4642      	mov	r2, r8
 80093f6:	441d      	add	r5, r3
 80093f8:	4659      	mov	r1, fp
 80093fa:	464b      	mov	r3, r9
 80093fc:	f001 fbe6 	bl	800abcc <st_sssa8_fully_connected>
 8009400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009402:	3401      	adds	r4, #1
 8009404:	429c      	cmp	r4, r3
 8009406:	4456      	add	r6, sl
 8009408:	d1e6      	bne.n	80093d8 <forward_dense_integer_SSSA+0x140>
 800940a:	b013      	add	sp, #76	; 0x4c
 800940c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009410:	6843      	ldr	r3, [r0, #4]
 8009412:	deff      	udf	#255	; 0xff
 8009414:	2a00      	cmp	r2, #0
 8009416:	d051      	beq.n	80094bc <forward_dense_integer_SSSA+0x224>
 8009418:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800941c:	f1be 0f00 	cmp.w	lr, #0
 8009420:	d057      	beq.n	80094d2 <forward_dense_integer_SSSA+0x23a>
 8009422:	8857      	ldrh	r7, [r2, #2]
 8009424:	2f00      	cmp	r7, #0
 8009426:	d177      	bne.n	8009518 <forward_dense_integer_SSSA+0x280>
 8009428:	f04f 0a00 	mov.w	sl, #0
 800942c:	68ae      	ldr	r6, [r5, #8]
 800942e:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8009432:	68a5      	ldr	r5, [r4, #8]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d03c      	beq.n	80094b2 <forward_dense_integer_SSSA+0x21a>
 8009438:	2100      	movs	r1, #0
 800943a:	910d      	str	r1, [sp, #52]	; 0x34
 800943c:	6859      	ldr	r1, [r3, #4]
 800943e:	2900      	cmp	r1, #0
 8009440:	d195      	bne.n	800936e <forward_dense_integer_SSSA+0xd6>
 8009442:	910b      	str	r1, [sp, #44]	; 0x2c
 8009444:	2f00      	cmp	r7, #0
 8009446:	d0a4      	beq.n	8009392 <forward_dense_integer_SSSA+0xfa>
 8009448:	f8de 3004 	ldr.w	r3, [lr, #4]
 800944c:	f993 3000 	ldrsb.w	r3, [r3]
 8009450:	930a      	str	r3, [sp, #40]	; 0x28
 8009452:	e79f      	b.n	8009394 <forward_dense_integer_SSSA+0xfc>
 8009454:	f04f 0a00 	mov.w	sl, #0
 8009458:	2a00      	cmp	r2, #0
 800945a:	f47f af75 	bne.w	8009348 <forward_dense_integer_SSSA+0xb0>
 800945e:	68ae      	ldr	r6, [r5, #8]
 8009460:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8009464:	68a5      	ldr	r5, [r4, #8]
 8009466:	2f00      	cmp	r7, #0
 8009468:	d162      	bne.n	8009530 <forward_dense_integer_SSSA+0x298>
 800946a:	2300      	movs	r3, #0
 800946c:	970b      	str	r7, [sp, #44]	; 0x2c
 800946e:	930d      	str	r3, [sp, #52]	; 0x34
 8009470:	970a      	str	r7, [sp, #40]	; 0x28
 8009472:	e78f      	b.n	8009394 <forward_dense_integer_SSSA+0xfc>
 8009474:	b312      	cbz	r2, 80094bc <forward_dense_integer_SSSA+0x224>
 8009476:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800947a:	f04f 0a00 	mov.w	sl, #0
 800947e:	f1be 0f00 	cmp.w	lr, #0
 8009482:	f47f af67 	bne.w	8009354 <forward_dense_integer_SSSA+0xbc>
 8009486:	68ae      	ldr	r6, [r5, #8]
 8009488:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800948c:	68a5      	ldr	r5, [r4, #8]
 800948e:	2900      	cmp	r1, #0
 8009490:	d05d      	beq.n	800954e <forward_dense_integer_SSSA+0x2b6>
 8009492:	885b      	ldrh	r3, [r3, #2]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d153      	bne.n	8009540 <forward_dense_integer_SSSA+0x2a8>
 8009498:	2300      	movs	r3, #0
 800949a:	930d      	str	r3, [sp, #52]	; 0x34
 800949c:	2300      	movs	r3, #0
 800949e:	930b      	str	r3, [sp, #44]	; 0x2c
 80094a0:	f1be 0f00 	cmp.w	lr, #0
 80094a4:	f47f af72 	bne.w	800938c <forward_dense_integer_SSSA+0xf4>
 80094a8:	2300      	movs	r3, #0
 80094aa:	930a      	str	r3, [sp, #40]	; 0x28
 80094ac:	e772      	b.n	8009394 <forward_dense_integer_SSSA+0xfc>
 80094ae:	4629      	mov	r1, r5
 80094b0:	e711      	b.n	80092d6 <forward_dense_integer_SSSA+0x3e>
 80094b2:	2200      	movs	r2, #0
 80094b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80094b6:	920d      	str	r2, [sp, #52]	; 0x34
 80094b8:	930a      	str	r3, [sp, #40]	; 0x28
 80094ba:	e76b      	b.n	8009394 <forward_dense_integer_SSSA+0xfc>
 80094bc:	f04f 0a00 	mov.w	sl, #0
 80094c0:	68ae      	ldr	r6, [r5, #8]
 80094c2:	f8d0 b008 	ldr.w	fp, [r0, #8]
 80094c6:	68a5      	ldr	r5, [r4, #8]
 80094c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80094ca:	920a      	str	r2, [sp, #40]	; 0x28
 80094cc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80094d0:	e760      	b.n	8009394 <forward_dense_integer_SSSA+0xfc>
 80094d2:	f04f 0a00 	mov.w	sl, #0
 80094d6:	68ae      	ldr	r6, [r5, #8]
 80094d8:	f8d0 b008 	ldr.w	fp, [r0, #8]
 80094dc:	68a5      	ldr	r5, [r4, #8]
 80094de:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80094e2:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 80094e6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80094ea:	e753      	b.n	8009394 <forward_dense_integer_SSSA+0xfc>
 80094ec:	6880      	ldr	r0, [r0, #8]
 80094ee:	68dc      	ldr	r4, [r3, #12]
 80094f0:	900c      	str	r0, [sp, #48]	; 0x30
 80094f2:	68d0      	ldr	r0, [r2, #12]
 80094f4:	6866      	ldr	r6, [r4, #4]
 80094f6:	6847      	ldr	r7, [r0, #4]
 80094f8:	6995      	ldr	r5, [r2, #24]
 80094fa:	960e      	str	r6, [sp, #56]	; 0x38
 80094fc:	e9d0 4002 	ldrd	r4, r0, [r0, #8]
 8009500:	fb00 f004 	mul.w	r0, r0, r4
 8009504:	970f      	str	r7, [sp, #60]	; 0x3c
 8009506:	699c      	ldr	r4, [r3, #24]
 8009508:	9009      	str	r0, [sp, #36]	; 0x24
 800950a:	fa1f f886 	uxth.w	r8, r6
 800950e:	fa1f f987 	uxth.w	r9, r7
 8009512:	e704      	b.n	800931e <forward_dense_integer_SSSA+0x86>
 8009514:	2500      	movs	r5, #0
 8009516:	e6de      	b.n	80092d6 <forward_dense_integer_SSSA+0x3e>
 8009518:	930b      	str	r3, [sp, #44]	; 0x2c
 800951a:	f8de 3000 	ldr.w	r3, [lr]
 800951e:	68ae      	ldr	r6, [r5, #8]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68a5      	ldr	r5, [r4, #8]
 8009524:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8009528:	930d      	str	r3, [sp, #52]	; 0x34
 800952a:	f04f 0a00 	mov.w	sl, #0
 800952e:	e78b      	b.n	8009448 <forward_dense_integer_SSSA+0x1b0>
 8009530:	684b      	ldr	r3, [r1, #4]
 8009532:	920a      	str	r2, [sp, #40]	; 0x28
 8009534:	f993 3000 	ldrsb.w	r3, [r3]
 8009538:	930b      	str	r3, [sp, #44]	; 0x2c
 800953a:	2300      	movs	r3, #0
 800953c:	930d      	str	r3, [sp, #52]	; 0x34
 800953e:	e729      	b.n	8009394 <forward_dense_integer_SSSA+0xfc>
 8009540:	684b      	ldr	r3, [r1, #4]
 8009542:	f993 3000 	ldrsb.w	r3, [r3]
 8009546:	930b      	str	r3, [sp, #44]	; 0x2c
 8009548:	2300      	movs	r3, #0
 800954a:	930d      	str	r3, [sp, #52]	; 0x34
 800954c:	e7ac      	b.n	80094a8 <forward_dense_integer_SSSA+0x210>
 800954e:	2300      	movs	r3, #0
 8009550:	910b      	str	r1, [sp, #44]	; 0x2c
 8009552:	930d      	str	r3, [sp, #52]	; 0x34
 8009554:	910a      	str	r1, [sp, #40]	; 0x28
 8009556:	e71d      	b.n	8009394 <forward_dense_integer_SSSA+0xfc>
 8009558:	920a      	str	r2, [sp, #40]	; 0x28
 800955a:	e71b      	b.n	8009394 <forward_dense_integer_SSSA+0xfc>
 800955c:	2300      	movs	r3, #0
 800955e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8009562:	9311      	str	r3, [sp, #68]	; 0x44
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	deff      	udf	#255	; 0xff
 8009568:	2300      	movs	r3, #0
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	deff      	udf	#255	; 0xff
 800956e:	2300      	movs	r3, #0
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	deff      	udf	#255	; 0xff
 8009574:	2300      	movs	r3, #0
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	deff      	udf	#255	; 0xff
 800957a:	bf00      	nop

0800957c <forward_nl_integer>:
 800957c:	6982      	ldr	r2, [r0, #24]
 800957e:	8813      	ldrh	r3, [r2, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d02f      	beq.n	80095e4 <forward_nl_integer+0x68>
 8009584:	b470      	push	{r4, r5, r6}
 8009586:	6852      	ldr	r2, [r2, #4]
 8009588:	6855      	ldr	r5, [r2, #4]
 800958a:	b105      	cbz	r5, 800958e <forward_nl_integer+0x12>
 800958c:	682d      	ldr	r5, [r5, #0]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d048      	beq.n	8009624 <forward_nl_integer+0xa8>
 8009592:	6916      	ldr	r6, [r2, #16]
 8009594:	b106      	cbz	r6, 8009598 <forward_nl_integer+0x1c>
 8009596:	6836      	ldr	r6, [r6, #0]
 8009598:	68ab      	ldr	r3, [r5, #8]
 800959a:	0a1b      	lsrs	r3, r3, #8
 800959c:	d033      	beq.n	8009606 <forward_nl_integer+0x8a>
 800959e:	68ec      	ldr	r4, [r5, #12]
 80095a0:	2201      	movs	r2, #1
 80095a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095aa:	429c      	cmp	r4, r3
 80095ac:	fb01 f202 	mul.w	r2, r1, r2
 80095b0:	d1f9      	bne.n	80095a6 <forward_nl_integer+0x2a>
 80095b2:	69ab      	ldr	r3, [r5, #24]
 80095b4:	69c0      	ldr	r0, [r0, #28]
 80095b6:	6819      	ldr	r1, [r3, #0]
 80095b8:	6884      	ldr	r4, [r0, #8]
 80095ba:	69b0      	ldr	r0, [r6, #24]
 80095bc:	020d      	lsls	r5, r1, #8
 80095be:	d513      	bpl.n	80095e8 <forward_nl_integer+0x6c>
 80095c0:	689e      	ldr	r6, [r3, #8]
 80095c2:	6885      	ldr	r5, [r0, #8]
 80095c4:	b162      	cbz	r2, 80095e0 <forward_nl_integer+0x64>
 80095c6:	1e70      	subs	r0, r6, #1
 80095c8:	4603      	mov	r3, r0
 80095ca:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 80095ce:	3302      	adds	r3, #2
 80095d0:	f081 0180 	eor.w	r1, r1, #128	; 0x80
 80095d4:	1b9b      	subs	r3, r3, r6
 80095d6:	5c61      	ldrb	r1, [r4, r1]
 80095d8:	f805 1b01 	strb.w	r1, [r5], #1
 80095dc:	429a      	cmp	r2, r3
 80095de:	d8f3      	bhi.n	80095c8 <forward_nl_integer+0x4c>
 80095e0:	bc70      	pop	{r4, r5, r6}
 80095e2:	4770      	bx	lr
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	deff      	udf	#255	; 0xff
 80095e8:	6899      	ldr	r1, [r3, #8]
 80095ea:	6883      	ldr	r3, [r0, #8]
 80095ec:	2a00      	cmp	r2, #0
 80095ee:	d0f7      	beq.n	80095e0 <forward_nl_integer+0x64>
 80095f0:	3901      	subs	r1, #1
 80095f2:	441a      	add	r2, r3
 80095f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80095f8:	5c20      	ldrb	r0, [r4, r0]
 80095fa:	f803 0b01 	strb.w	r0, [r3], #1
 80095fe:	4293      	cmp	r3, r2
 8009600:	d1f8      	bne.n	80095f4 <forward_nl_integer+0x78>
 8009602:	bc70      	pop	{r4, r5, r6}
 8009604:	4770      	bx	lr
 8009606:	69ab      	ldr	r3, [r5, #24]
 8009608:	69c2      	ldr	r2, [r0, #28]
 800960a:	6819      	ldr	r1, [r3, #0]
 800960c:	6894      	ldr	r4, [r2, #8]
 800960e:	69b2      	ldr	r2, [r6, #24]
 8009610:	0209      	lsls	r1, r1, #8
 8009612:	d503      	bpl.n	800961c <forward_nl_integer+0xa0>
 8009614:	6895      	ldr	r5, [r2, #8]
 8009616:	689e      	ldr	r6, [r3, #8]
 8009618:	2201      	movs	r2, #1
 800961a:	e7d4      	b.n	80095c6 <forward_nl_integer+0x4a>
 800961c:	6899      	ldr	r1, [r3, #8]
 800961e:	6893      	ldr	r3, [r2, #8]
 8009620:	2201      	movs	r2, #1
 8009622:	e7e5      	b.n	80095f0 <forward_nl_integer+0x74>
 8009624:	2300      	movs	r3, #0
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	deff      	udf	#255	; 0xff
 800962a:	bf00      	nop

0800962c <forward_mp_integer_INT8>:
 800962c:	6983      	ldr	r3, [r0, #24]
 800962e:	881a      	ldrh	r2, [r3, #0]
 8009630:	2a00      	cmp	r2, #0
 8009632:	f000 8086 	beq.w	8009742 <forward_mp_integer_INT8+0x116>
 8009636:	6859      	ldr	r1, [r3, #4]
 8009638:	684b      	ldr	r3, [r1, #4]
 800963a:	b103      	cbz	r3, 800963e <forward_mp_integer_INT8+0x12>
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2a01      	cmp	r2, #1
 8009640:	f000 8113 	beq.w	800986a <forward_mp_integer_INT8+0x23e>
 8009644:	690a      	ldr	r2, [r1, #16]
 8009646:	2a00      	cmp	r2, #0
 8009648:	f000 810d 	beq.w	8009866 <forward_mp_integer_INT8+0x23a>
 800964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009650:	68dd      	ldr	r5, [r3, #12]
 8009652:	681c      	ldr	r4, [r3, #0]
 8009654:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8009658:	88ab      	ldrh	r3, [r5, #4]
 800965a:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800965c:	6812      	ldr	r2, [r2, #0]
 800965e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8009662:	68d1      	ldr	r1, [r2, #12]
 8009664:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
 8009668:	6817      	ldr	r7, [r2, #0]
 800966a:	b099      	sub	sp, #100	; 0x64
 800966c:	9315      	str	r3, [sp, #84]	; 0x54
 800966e:	8b83      	ldrh	r3, [r0, #28]
 8009670:	930d      	str	r3, [sp, #52]	; 0x34
 8009672:	8c03      	ldrh	r3, [r0, #32]
 8009674:	930e      	str	r3, [sp, #56]	; 0x38
 8009676:	88b3      	ldrh	r3, [r6, #4]
 8009678:	930f      	str	r3, [sp, #60]	; 0x3c
 800967a:	8833      	ldrh	r3, [r6, #0]
 800967c:	9310      	str	r3, [sp, #64]	; 0x40
 800967e:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8009680:	9311      	str	r3, [sp, #68]	; 0x44
 8009682:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8009684:	9312      	str	r3, [sp, #72]	; 0x48
 8009686:	890b      	ldrh	r3, [r1, #8]
 8009688:	9313      	str	r3, [sp, #76]	; 0x4c
 800968a:	898b      	ldrh	r3, [r1, #12]
 800968c:	6996      	ldr	r6, [r2, #24]
 800968e:	9314      	str	r3, [sp, #80]	; 0x50
 8009690:	2c00      	cmp	r4, #0
 8009692:	d075      	beq.n	8009780 <forward_mp_integer_INT8+0x154>
 8009694:	6862      	ldr	r2, [r4, #4]
 8009696:	2a00      	cmp	r2, #0
 8009698:	d055      	beq.n	8009746 <forward_mp_integer_INT8+0x11a>
 800969a:	8865      	ldrh	r5, [r4, #2]
 800969c:	2d00      	cmp	r5, #0
 800969e:	f000 8089 	beq.w	80097b4 <forward_mp_integer_INT8+0x188>
 80096a2:	6813      	ldr	r3, [r2, #0]
 80096a4:	f8d3 b000 	ldr.w	fp, [r3]
 80096a8:	2f00      	cmp	r7, #0
 80096aa:	f000 8088 	beq.w	80097be <forward_mp_integer_INT8+0x192>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d04f      	beq.n	8009754 <forward_mp_integer_INT8+0x128>
 80096b4:	887d      	ldrh	r5, [r7, #2]
 80096b6:	2d00      	cmp	r5, #0
 80096b8:	d06b      	beq.n	8009792 <forward_mp_integer_INT8+0x166>
 80096ba:	6819      	ldr	r1, [r3, #0]
 80096bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80096be:	6809      	ldr	r1, [r1, #0]
 80096c0:	9316      	str	r3, [sp, #88]	; 0x58
 80096c2:	4658      	mov	r0, fp
 80096c4:	f7f6 ff22 	bl	800050c <__aeabi_fdiv>
 80096c8:	e9dd 3216 	ldrd	r3, r2, [sp, #88]	; 0x58
 80096cc:	f8d8 8008 	ldr.w	r8, [r8, #8]
 80096d0:	68b6      	ldr	r6, [r6, #8]
 80096d2:	900c      	str	r0, [sp, #48]	; 0x30
 80096d4:	2a00      	cmp	r2, #0
 80096d6:	d06b      	beq.n	80097b0 <forward_mp_integer_INT8+0x184>
 80096d8:	8861      	ldrh	r1, [r4, #2]
 80096da:	2900      	cmp	r1, #0
 80096dc:	f000 80a3 	beq.w	8009826 <forward_mp_integer_INT8+0x1fa>
 80096e0:	6852      	ldr	r2, [r2, #4]
 80096e2:	f992 4000 	ldrsb.w	r4, [r2]
 80096e6:	2f00      	cmp	r7, #0
 80096e8:	d048      	beq.n	800977c <forward_mp_integer_INT8+0x150>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d046      	beq.n	800977c <forward_mp_integer_INT8+0x150>
 80096ee:	887d      	ldrh	r5, [r7, #2]
 80096f0:	b115      	cbz	r5, 80096f8 <forward_mp_integer_INT8+0xcc>
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f993 5000 	ldrsb.w	r5, [r3]
 80096f8:	4658      	mov	r0, fp
 80096fa:	2100      	movs	r1, #0
 80096fc:	f7f7 f804 	bl	8000708 <__aeabi_fcmpge>
 8009700:	2800      	cmp	r0, #0
 8009702:	d171      	bne.n	80097e8 <forward_mp_integer_INT8+0x1bc>
 8009704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009706:	9309      	str	r3, [sp, #36]	; 0x24
 8009708:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800970a:	9308      	str	r3, [sp, #32]
 800970c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800970e:	9307      	str	r3, [sp, #28]
 8009710:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009712:	9306      	str	r3, [sp, #24]
 8009714:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009716:	9305      	str	r3, [sp, #20]
 8009718:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800971a:	9304      	str	r3, [sp, #16]
 800971c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800971e:	9303      	str	r3, [sp, #12]
 8009720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009722:	9302      	str	r3, [sp, #8]
 8009724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009726:	9301      	str	r3, [sp, #4]
 8009728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	464a      	mov	r2, r9
 800972e:	4653      	mov	r3, sl
 8009730:	4631      	mov	r1, r6
 8009732:	4640      	mov	r0, r8
 8009734:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8009738:	f001 f832 	bl	800a7a0 <forward_lite_maxpool_is8os8_scaleneg>
 800973c:	b019      	add	sp, #100	; 0x64
 800973e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009742:	6853      	ldr	r3, [r2, #4]
 8009744:	deff      	udf	#255	; 0xff
 8009746:	2f00      	cmp	r7, #0
 8009748:	d047      	beq.n	80097da <forward_mp_integer_INT8+0x1ae>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f04f 0b00 	mov.w	fp, #0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1af      	bne.n	80096b4 <forward_mp_integer_INT8+0x88>
 8009754:	2100      	movs	r1, #0
 8009756:	4658      	mov	r0, fp
 8009758:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800975c:	f7f6 fed6 	bl	800050c <__aeabi_fdiv>
 8009760:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009764:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8009768:	68b6      	ldr	r6, [r6, #8]
 800976a:	900c      	str	r0, [sp, #48]	; 0x30
 800976c:	2a00      	cmp	r2, #0
 800976e:	d077      	beq.n	8009860 <forward_mp_integer_INT8+0x234>
 8009770:	8861      	ldrh	r1, [r4, #2]
 8009772:	2900      	cmp	r1, #0
 8009774:	d057      	beq.n	8009826 <forward_mp_integer_INT8+0x1fa>
 8009776:	6853      	ldr	r3, [r2, #4]
 8009778:	f993 4000 	ldrsb.w	r4, [r3]
 800977c:	2500      	movs	r5, #0
 800977e:	e7bb      	b.n	80096f8 <forward_mp_integer_INT8+0xcc>
 8009780:	2f00      	cmp	r7, #0
 8009782:	d052      	beq.n	800982a <forward_mp_integer_INT8+0x1fe>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	b343      	cbz	r3, 80097da <forward_mp_integer_INT8+0x1ae>
 8009788:	887d      	ldrh	r5, [r7, #2]
 800978a:	2d00      	cmp	r5, #0
 800978c:	d155      	bne.n	800983a <forward_mp_integer_INT8+0x20e>
 800978e:	f04f 0b00 	mov.w	fp, #0
 8009792:	2100      	movs	r1, #0
 8009794:	4658      	mov	r0, fp
 8009796:	9316      	str	r3, [sp, #88]	; 0x58
 8009798:	f7f6 feb8 	bl	800050c <__aeabi_fdiv>
 800979c:	f8d8 8008 	ldr.w	r8, [r8, #8]
 80097a0:	68b6      	ldr	r6, [r6, #8]
 80097a2:	900c      	str	r0, [sp, #48]	; 0x30
 80097a4:	2c00      	cmp	r4, #0
 80097a6:	d0e9      	beq.n	800977c <forward_mp_integer_INT8+0x150>
 80097a8:	6862      	ldr	r2, [r4, #4]
 80097aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80097ac:	2a00      	cmp	r2, #0
 80097ae:	d193      	bne.n	80096d8 <forward_mp_integer_INT8+0xac>
 80097b0:	4614      	mov	r4, r2
 80097b2:	e79d      	b.n	80096f0 <forward_mp_integer_INT8+0xc4>
 80097b4:	f04f 0b00 	mov.w	fp, #0
 80097b8:	2f00      	cmp	r7, #0
 80097ba:	f47f af78 	bne.w	80096ae <forward_mp_integer_INT8+0x82>
 80097be:	2100      	movs	r1, #0
 80097c0:	4658      	mov	r0, fp
 80097c2:	9216      	str	r2, [sp, #88]	; 0x58
 80097c4:	f7f6 fea2 	bl	800050c <__aeabi_fdiv>
 80097c8:	f8d8 8008 	ldr.w	r8, [r8, #8]
 80097cc:	68b6      	ldr	r6, [r6, #8]
 80097ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80097d0:	900c      	str	r0, [sp, #48]	; 0x30
 80097d2:	2d00      	cmp	r5, #0
 80097d4:	d13f      	bne.n	8009856 <forward_mp_integer_INT8+0x22a>
 80097d6:	462c      	mov	r4, r5
 80097d8:	e78e      	b.n	80096f8 <forward_mp_integer_INT8+0xcc>
 80097da:	4b25      	ldr	r3, [pc, #148]	; (8009870 <forward_mp_integer_INT8+0x244>)
 80097dc:	f8d8 8008 	ldr.w	r8, [r8, #8]
 80097e0:	68b6      	ldr	r6, [r6, #8]
 80097e2:	930c      	str	r3, [sp, #48]	; 0x30
 80097e4:	2400      	movs	r4, #0
 80097e6:	4625      	mov	r5, r4
 80097e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097ea:	9309      	str	r3, [sp, #36]	; 0x24
 80097ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097ee:	9308      	str	r3, [sp, #32]
 80097f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097f2:	9307      	str	r3, [sp, #28]
 80097f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097f6:	9306      	str	r3, [sp, #24]
 80097f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097fa:	9305      	str	r3, [sp, #20]
 80097fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097fe:	9304      	str	r3, [sp, #16]
 8009800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009802:	9303      	str	r3, [sp, #12]
 8009804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009806:	9302      	str	r3, [sp, #8]
 8009808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800980a:	9301      	str	r3, [sp, #4]
 800980c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	464a      	mov	r2, r9
 8009812:	4653      	mov	r3, sl
 8009814:	4631      	mov	r1, r6
 8009816:	4640      	mov	r0, r8
 8009818:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800981c:	f000 fed4 	bl	800a5c8 <forward_lite_maxpool_is8os8_scalepos>
 8009820:	b019      	add	sp, #100	; 0x64
 8009822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009826:	2400      	movs	r4, #0
 8009828:	e75f      	b.n	80096ea <forward_mp_integer_INT8+0xbe>
 800982a:	4b11      	ldr	r3, [pc, #68]	; (8009870 <forward_mp_integer_INT8+0x244>)
 800982c:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8009830:	68b6      	ldr	r6, [r6, #8]
 8009832:	930c      	str	r3, [sp, #48]	; 0x30
 8009834:	463c      	mov	r4, r7
 8009836:	463d      	mov	r5, r7
 8009838:	e7d6      	b.n	80097e8 <forward_mp_integer_INT8+0x1bc>
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	9316      	str	r3, [sp, #88]	; 0x58
 800983e:	6811      	ldr	r1, [r2, #0]
 8009840:	2000      	movs	r0, #0
 8009842:	f7f6 fe63 	bl	800050c <__aeabi_fdiv>
 8009846:	f04f 0b00 	mov.w	fp, #0
 800984a:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800984e:	68b6      	ldr	r6, [r6, #8]
 8009850:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009852:	900c      	str	r0, [sp, #48]	; 0x30
 8009854:	e74d      	b.n	80096f2 <forward_mp_integer_INT8+0xc6>
 8009856:	6853      	ldr	r3, [r2, #4]
 8009858:	463d      	mov	r5, r7
 800985a:	f993 4000 	ldrsb.w	r4, [r3]
 800985e:	e74b      	b.n	80096f8 <forward_mp_integer_INT8+0xcc>
 8009860:	4614      	mov	r4, r2
 8009862:	4615      	mov	r5, r2
 8009864:	e748      	b.n	80096f8 <forward_mp_integer_INT8+0xcc>
 8009866:	68d3      	ldr	r3, [r2, #12]
 8009868:	deff      	udf	#255	; 0xff
 800986a:	2300      	movs	r3, #0
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	deff      	udf	#255	; 0xff
 8009870:	7fc00000 	.word	0x7fc00000

08009874 <forward_lite_conv2d_sssa8_ch>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	b0db      	sub	sp, #364	; 0x16c
 800987a:	4699      	mov	r9, r3
 800987c:	f8dd a1d0 	ldr.w	sl, [sp, #464]	; 0x1d0
 8009880:	f8bd 3194 	ldrh.w	r3, [sp, #404]	; 0x194
 8009884:	900b      	str	r0, [sp, #44]	; 0x2c
 8009886:	931d      	str	r3, [sp, #116]	; 0x74
 8009888:	4618      	mov	r0, r3
 800988a:	ebaa 0543 	sub.w	r5, sl, r3, lsl #1
 800988e:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
 8009890:	f89d c1bc 	ldrb.w	ip, [sp, #444]	; 0x1bc
 8009894:	f99d b1b4 	ldrsb.w	fp, [sp, #436]	; 0x1b4
 8009898:	9216      	str	r2, [sp, #88]	; 0x58
 800989a:	441d      	add	r5, r3
 800989c:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80098a0:	932a      	str	r3, [sp, #168]	; 0xa8
 80098a2:	f8bd 319c 	ldrh.w	r3, [sp, #412]	; 0x19c
 80098a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80098a8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80098ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80098ae:	f8bd 31a4 	ldrh.w	r3, [sp, #420]	; 0x1a4
 80098b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80098b4:	f8bd 31a8 	ldrh.w	r3, [sp, #424]	; 0x1a8
 80098b8:	9322      	str	r3, [sp, #136]	; 0x88
 80098ba:	f8bd 31ac 	ldrh.w	r3, [sp, #428]	; 0x1ac
 80098be:	932e      	str	r3, [sp, #184]	; 0xb8
 80098c0:	4688      	mov	r8, r1
 80098c2:	f8bd 31c4 	ldrh.w	r3, [sp, #452]	; 0x1c4
 80098c6:	f8bd 11c8 	ldrh.w	r1, [sp, #456]	; 0x1c8
 80098ca:	9312      	str	r3, [sp, #72]	; 0x48
 80098cc:	f01c 0f01 	tst.w	ip, #1
 80098d0:	912c      	str	r1, [sp, #176]	; 0xb0
 80098d2:	bf1c      	itt	ne
 80098d4:	3302      	addne	r3, #2
 80098d6:	3102      	addne	r1, #2
 80098d8:	fb01 f303 	mul.w	r3, r1, r3
 80098dc:	931f      	str	r3, [sp, #124]	; 0x7c
 80098de:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
 80098e0:	9a6c      	ldr	r2, [sp, #432]	; 0x1b0
 80098e2:	f8cd c09c 	str.w	ip, [sp, #156]	; 0x9c
 80098e6:	9201      	str	r2, [sp, #4]
 80098e8:	f99d 41b8 	ldrsb.w	r4, [sp, #440]	; 0x1b8
 80098ec:	f8bd 71cc 	ldrh.w	r7, [sp, #460]	; 0x1cc
 80098f0:	e9cd b302 	strd	fp, r3, [sp, #8]
 80098f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80098f6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80098f8:	9964      	ldr	r1, [sp, #400]	; 0x190
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	0046      	lsls	r6, r0, #1
 80098fe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009900:	4648      	mov	r0, r9
 8009902:	f001 f8d5 	bl	800aab0 <st_sssa8_ch_convolve_rank1upd>
 8009906:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009908:	9975      	ldr	r1, [sp, #468]	; 0x1d4
 800990a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800990c:	18b3      	adds	r3, r6, r2
 800990e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8009912:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009914:	911a      	str	r1, [sp, #104]	; 0x68
 8009916:	fb10 f303 	smulbb	r3, r0, r3
 800991a:	fb13 f309 	smulbb	r3, r3, r9
 800991e:	b29b      	uxth	r3, r3
 8009920:	931c      	str	r3, [sp, #112]	; 0x70
 8009922:	ebc2 7342 	rsb	r3, r2, r2, lsl #29
 8009926:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800992a:	9324      	str	r3, [sp, #144]	; 0x90
 800992c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009930:	9326      	str	r3, [sp, #152]	; 0x98
 8009932:	b1d2      	cbz	r2, 800996a <forward_lite_conv2d_sssa8_ch+0xf6>
 8009934:	1d19      	adds	r1, r3, #4
 8009936:	eb05 0c06 	add.w	ip, r5, r6
 800993a:	f04f 0e01 	mov.w	lr, #1
 800993e:	f935 3b02 	ldrsh.w	r3, [r5], #2
 8009942:	1e5a      	subs	r2, r3, #1
 8009944:	b292      	uxth	r2, r2
 8009946:	fa0e f003 	lsl.w	r0, lr, r3
 800994a:	2a14      	cmp	r2, #20
 800994c:	fa04 f303 	lsl.w	r3, r4, r3
 8009950:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8009954:	f200 8186 	bhi.w	8009c64 <forward_lite_conv2d_sssa8_ch+0x3f0>
 8009958:	4565      	cmp	r5, ip
 800995a:	f841 3c04 	str.w	r3, [r1, #-4]
 800995e:	f101 0104 	add.w	r1, r1, #4
 8009962:	d1ec      	bne.n	800993e <forward_lite_conv2d_sssa8_ch+0xca>
 8009964:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
 8009966:	eb03 050a 	add.w	r5, r3, sl
 800996a:	1bab      	subs	r3, r5, r6
 800996c:	9325      	str	r3, [sp, #148]	; 0x94
 800996e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009970:	933b      	str	r3, [sp, #236]	; 0xec
 8009972:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009974:	9340      	str	r3, [sp, #256]	; 0x100
 8009976:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8009978:	933f      	str	r3, [sp, #252]	; 0xfc
 800997a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800997c:	9352      	str	r3, [sp, #328]	; 0x148
 800997e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009980:	9353      	str	r3, [sp, #332]	; 0x14c
 8009982:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009984:	9354      	str	r3, [sp, #336]	; 0x150
 8009986:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009988:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800998a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 800998c:	9355      	str	r3, [sp, #340]	; 0x154
 800998e:	ab42      	add	r3, sp, #264	; 0x108
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	aa3a      	add	r2, sp, #232	; 0xe8
 8009994:	ab3e      	add	r3, sp, #248	; 0xf8
 8009996:	a950      	add	r1, sp, #320	; 0x140
 8009998:	a846      	add	r0, sp, #280	; 0x118
 800999a:	9444      	str	r4, [sp, #272]	; 0x110
 800999c:	9543      	str	r5, [sp, #268]	; 0x10c
 800999e:	f8cd 80f0 	str.w	r8, [sp, #240]	; 0xf0
 80099a2:	f001 ff0f 	bl	800b7c4 <ai_padding_opt_init>
 80099a6:	462a      	mov	r2, r5
 80099a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099aa:	fb05 f504 	mul.w	r5, r5, r4
 80099ae:	fb09 fa04 	mul.w	sl, r9, r4
 80099b2:	fb09 f405 	mul.w	r4, r9, r5
 80099b6:	fb03 f404 	mul.w	r4, r3, r4
 80099ba:	fb0a f302 	mul.w	r3, sl, r2
 80099be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80099c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099c4:	931e      	str	r3, [sp, #120]	; 0x78
 80099c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80099c8:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80099cc:	f003 0202 	and.w	r2, r3, #2
 80099d0:	bfa8      	it	ge
 80099d2:	f44f 6420 	movge.w	r4, #2560	; 0xa00
 80099d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80099da:	2f01      	cmp	r7, #1
 80099dc:	9233      	str	r2, [sp, #204]	; 0xcc
 80099de:	9320      	str	r3, [sp, #128]	; 0x80
 80099e0:	f000 83a7 	beq.w	800a132 <forward_lite_conv2d_sssa8_ch+0x8be>
 80099e4:	2300      	movs	r3, #0
 80099e6:	9334      	str	r3, [sp, #208]	; 0xd0
 80099e8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	f240 825a 	bls.w	8009ea4 <forward_lite_conv2d_sssa8_ch+0x630>
 80099f0:	991d      	ldr	r1, [sp, #116]	; 0x74
 80099f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80099f4:	fbb4 f3f3 	udiv	r3, r4, r3
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	428b      	cmp	r3, r1
 80099fc:	bf28      	it	cs
 80099fe:	460b      	movcs	r3, r1
 8009a00:	9321      	str	r3, [sp, #132]	; 0x84
 8009a02:	fbb1 f2f3 	udiv	r2, r1, r3
 8009a06:	fb03 1312 	mls	r3, r3, r2, r1
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	b292      	uxth	r2, r2
 8009a0e:	9231      	str	r2, [sp, #196]	; 0xc4
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f040 813c 	bne.w	8009c8e <forward_lite_conv2d_sssa8_ch+0x41a>
 8009a16:	4613      	mov	r3, r2
 8009a18:	3a01      	subs	r2, #1
 8009a1a:	b292      	uxth	r2, r2
 8009a1c:	9231      	str	r2, [sp, #196]	; 0xc4
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f000 822a 	beq.w	8009e78 <forward_lite_conv2d_sssa8_ch+0x604>
 8009a24:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009a26:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8009a2a:	fb09 f505 	mul.w	r5, r9, r5
 8009a2e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009a32:	9318      	str	r3, [sp, #96]	; 0x60
 8009a34:	f009 0303 	and.w	r3, r9, #3
 8009a38:	9314      	str	r3, [sp, #80]	; 0x50
 8009a3a:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8009a3e:	fa0f f68b 	sxth.w	r6, fp
 8009a42:	9319      	str	r3, [sp, #100]	; 0x64
 8009a44:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 8009a48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a4a:	9332      	str	r3, [sp, #200]	; 0xc8
 8009a4c:	f8cd b0bc 	str.w	fp, [sp, #188]	; 0xbc
 8009a50:	464f      	mov	r7, r9
 8009a52:	9630      	str	r6, [sp, #192]	; 0xc0
 8009a54:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8009a56:	b94b      	cbnz	r3, 8009a6c <forward_lite_conv2d_sssa8_ch+0x1f8>
 8009a58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f040 8215 	bne.w	8009e8a <forward_lite_conv2d_sssa8_ch+0x616>
 8009a60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a62:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a64:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009a66:	9864      	ldr	r0, [sp, #400]	; 0x190
 8009a68:	f001 fdf2 	bl	800b650 <st_int8_to16_dual_interleaved>
 8009a6c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	f000 8205 	beq.w	8009e7e <forward_lite_conv2d_sssa8_ch+0x60a>
 8009a74:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 8009a76:	931b      	str	r3, [sp, #108]	; 0x6c
 8009a78:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f000 80bf 	beq.w	8009bfe <forward_lite_conv2d_sssa8_ch+0x38a>
 8009a80:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009a82:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009a84:	425b      	negs	r3, r3
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	2400      	movs	r4, #0
 8009a8a:	9323      	str	r3, [sp, #140]	; 0x8c
 8009a8c:	4626      	mov	r6, r4
 8009a8e:	a846      	add	r0, sp, #280	; 0x118
 8009a90:	f001 fef2 	bl	800b878 <ai_padding_opt_phase1>
 8009a94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f000 81e4 	beq.w	8009e64 <forward_lite_conv2d_sssa8_ch+0x5f0>
 8009a9c:	b2a3      	uxth	r3, r4
 8009a9e:	932b      	str	r3, [sp, #172]	; 0xac
 8009aa0:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
 8009aa4:	1a9b      	subs	r3, r3, r2
 8009aa6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8009aa8:	fb06 3302 	mla	r3, r6, r2, r3
 8009aac:	930e      	str	r3, [sp, #56]	; 0x38
 8009aae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ab0:	f9bd 208c 	ldrsh.w	r2, [sp, #140]	; 0x8c
 8009ab4:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ab6:	425b      	negs	r3, r3
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	930c      	str	r3, [sp, #48]	; 0x30
 8009abc:	2300      	movs	r3, #0
 8009abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ac0:	9315      	str	r3, [sp, #84]	; 0x54
 8009ac2:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 80e6 	beq.w	8009c96 <forward_lite_conv2d_sssa8_ch+0x422>
 8009aca:	3b01      	subs	r3, #1
 8009acc:	9346      	str	r3, [sp, #280]	; 0x118
 8009ace:	2301      	movs	r3, #1
 8009ad0:	f8ad 313e 	strh.w	r3, [sp, #318]	; 0x13e
 8009ad4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ad6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	f280 80ea 	bge.w	8009cb2 <forward_lite_conv2d_sssa8_ch+0x43e>
 8009ade:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009ae0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ae2:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009ae4:	f8dd 90bc 	ldr.w	r9, [sp, #188]	; 0xbc
 8009ae8:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8009aec:	f8cd a0a0 	str.w	sl, [sp, #160]	; 0xa0
 8009af0:	fb01 3402 	mla	r4, r1, r2, r3
 8009af4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009af6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8009afa:	1ae4      	subs	r4, r4, r3
 8009afc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8009b00:	9311      	str	r3, [sp, #68]	; 0x44
 8009b02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b04:	4692      	mov	sl, r2
 8009b06:	461e      	mov	r6, r3
 8009b08:	4554      	cmp	r4, sl
 8009b0a:	dd3a      	ble.n	8009b82 <forward_lite_conv2d_sssa8_ch+0x30e>
 8009b0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b0e:	2e00      	cmp	r6, #0
 8009b10:	fb02 f203 	mul.w	r2, r2, r3
 8009b14:	9210      	str	r2, [sp, #64]	; 0x40
 8009b16:	f2c0 8170 	blt.w	8009dfa <forward_lite_conv2d_sssa8_ch+0x586>
 8009b1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b1c:	2a00      	cmp	r2, #0
 8009b1e:	f000 811c 	beq.w	8009d5a <forward_lite_conv2d_sssa8_ch+0x4e6>
 8009b22:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009b24:	429a      	cmp	r2, r3
 8009b26:	46d3      	mov	fp, sl
 8009b28:	f340 80a4 	ble.w	8009c74 <forward_lite_conv2d_sssa8_ch+0x400>
 8009b2c:	4643      	mov	r3, r8
 8009b2e:	46d4      	mov	ip, sl
 8009b30:	46b0      	mov	r8, r6
 8009b32:	461e      	mov	r6, r3
 8009b34:	e012      	b.n	8009b5c <forward_lite_conv2d_sssa8_ch+0x2e8>
 8009b36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b38:	eb03 0e0c 	add.w	lr, r3, ip
 8009b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b3e:	4563      	cmp	r3, ip
 8009b40:	dd12      	ble.n	8009b68 <forward_lite_conv2d_sssa8_ch+0x2f4>
 8009b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b44:	f10b 0b01 	add.w	fp, fp, #1
 8009b48:	fa0f fb8b 	sxth.w	fp, fp
 8009b4c:	fb07 300e 	mla	r0, r7, lr, r3
 8009b50:	f001 fbf0 	bl	800b334 <st_int8_to16_no_shift>
 8009b54:	45a3      	cmp	fp, r4
 8009b56:	444d      	add	r5, r9
 8009b58:	46dc      	mov	ip, fp
 8009b5a:	da0f      	bge.n	8009b7c <forward_lite_conv2d_sssa8_ch+0x308>
 8009b5c:	f1bb 0f00 	cmp.w	fp, #0
 8009b60:	463a      	mov	r2, r7
 8009b62:	4629      	mov	r1, r5
 8009b64:	4630      	mov	r0, r6
 8009b66:	dae6      	bge.n	8009b36 <forward_lite_conv2d_sssa8_ch+0x2c2>
 8009b68:	f10b 0b01 	add.w	fp, fp, #1
 8009b6c:	fa0f fb8b 	sxth.w	fp, fp
 8009b70:	f002 fcd2 	bl	800c518 <arm_fill_q15>
 8009b74:	45a3      	cmp	fp, r4
 8009b76:	444d      	add	r5, r9
 8009b78:	46dc      	mov	ip, fp
 8009b7a:	dbef      	blt.n	8009b5c <forward_lite_conv2d_sssa8_ch+0x2e8>
 8009b7c:	4633      	mov	r3, r6
 8009b7e:	4646      	mov	r6, r8
 8009b80:	4698      	mov	r8, r3
 8009b82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b84:	3601      	adds	r6, #1
 8009b86:	b236      	sxth	r6, r6
 8009b88:	4296      	cmp	r6, r2
 8009b8a:	4633      	mov	r3, r6
 8009b8c:	dbbc      	blt.n	8009b08 <forward_lite_conv2d_sssa8_ch+0x294>
 8009b8e:	f8dd a0a0 	ldr.w	sl, [sp, #160]	; 0xa0
 8009b92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009b94:	42ab      	cmp	r3, r5
 8009b96:	f000 8093 	beq.w	8009cc0 <forward_lite_conv2d_sssa8_ch+0x44c>
 8009b9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b9c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	b21a      	sxth	r2, r3
 8009ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ba4:	920f      	str	r2, [sp, #60]	; 0x3c
 8009ba6:	440b      	add	r3, r1
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	930c      	str	r3, [sp, #48]	; 0x30
 8009bac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bae:	9215      	str	r2, [sp, #84]	; 0x54
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	dc86      	bgt.n	8009ac2 <forward_lite_conv2d_sssa8_ch+0x24e>
 8009bb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bb6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8009bb8:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8009bba:	4413      	add	r3, r2
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	3401      	adds	r4, #1
 8009bc0:	9323      	str	r3, [sp, #140]	; 0x8c
 8009bc2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8009bc4:	b224      	sxth	r4, r4
 8009bc6:	42a3      	cmp	r3, r4
 8009bc8:	4626      	mov	r6, r4
 8009bca:	f73f af60 	bgt.w	8009a8e <forward_lite_conv2d_sssa8_ch+0x21a>
 8009bce:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009bd0:	42a9      	cmp	r1, r5
 8009bd2:	d014      	beq.n	8009bfe <forward_lite_conv2d_sssa8_ch+0x38a>
 8009bd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009bd6:	9307      	str	r3, [sp, #28]
 8009bd8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009bda:	9306      	str	r3, [sp, #24]
 8009bdc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009bde:	9305      	str	r3, [sp, #20]
 8009be0:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
 8009be2:	9304      	str	r3, [sp, #16]
 8009be4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009be6:	9303      	str	r3, [sp, #12]
 8009be8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009bea:	9302      	str	r3, [sp, #8]
 8009bec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bee:	9301      	str	r3, [sp, #4]
 8009bf0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009bf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bf8:	981e      	ldr	r0, [sp, #120]	; 0x78
 8009bfa:	f002 fa51 	bl	800c0a0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8009bfe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c00:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8009c02:	1a9b      	subs	r3, r3, r2
 8009c04:	b299      	uxth	r1, r3
 8009c06:	428a      	cmp	r2, r1
 8009c08:	4613      	mov	r3, r2
 8009c0a:	bf28      	it	cs
 8009c0c:	460b      	movcs	r3, r1
 8009c0e:	9132      	str	r1, [sp, #200]	; 0xc8
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f000 812a 	beq.w	8009e6a <forward_lite_conv2d_sssa8_ch+0x5f6>
 8009c16:	9964      	ldr	r1, [sp, #400]	; 0x190
 8009c18:	981c      	ldr	r0, [sp, #112]	; 0x70
 8009c1a:	fb02 1100 	mla	r1, r2, r0, r1
 8009c1e:	9164      	str	r1, [sp, #400]	; 0x190
 8009c20:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009c22:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c26:	9124      	str	r1, [sp, #144]	; 0x90
 8009c28:	9925      	ldr	r1, [sp, #148]	; 0x94
 8009c2a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8009c2e:	9125      	str	r1, [sp, #148]	; 0x94
 8009c30:	9975      	ldr	r1, [sp, #468]	; 0x1d4
 8009c32:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c36:	9175      	str	r1, [sp, #468]	; 0x1d4
 8009c38:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009c3a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c3e:	9126      	str	r1, [sp, #152]	; 0x98
 8009c40:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8009c42:	2900      	cmp	r1, #0
 8009c44:	f000 8128 	beq.w	8009e98 <forward_lite_conv2d_sssa8_ch+0x624>
 8009c48:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 8009c4a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8009c4c:	9321      	str	r3, [sp, #132]	; 0x84
 8009c4e:	fb00 1202 	mla	r2, r0, r2, r1
 8009c52:	9270      	str	r2, [sp, #448]	; 0x1c0
 8009c54:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8009c56:	1e53      	subs	r3, r2, #1
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	2a00      	cmp	r2, #0
 8009c5c:	f000 810c 	beq.w	8009e78 <forward_lite_conv2d_sssa8_ch+0x604>
 8009c60:	9331      	str	r3, [sp, #196]	; 0xc4
 8009c62:	e6f7      	b.n	8009a54 <forward_lite_conv2d_sssa8_ch+0x1e0>
 8009c64:	4565      	cmp	r5, ip
 8009c66:	f841 4c04 	str.w	r4, [r1, #-4]
 8009c6a:	f101 0104 	add.w	r1, r1, #4
 8009c6e:	f47f ae66 	bne.w	800993e <forward_lite_conv2d_sssa8_ch+0xca>
 8009c72:	e677      	b.n	8009964 <forward_lite_conv2d_sssa8_ch+0xf0>
 8009c74:	f10b 0b01 	add.w	fp, fp, #1
 8009c78:	4629      	mov	r1, r5
 8009c7a:	463a      	mov	r2, r7
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	fa0f fb8b 	sxth.w	fp, fp
 8009c82:	f002 fc49 	bl	800c518 <arm_fill_q15>
 8009c86:	45a3      	cmp	fp, r4
 8009c88:	444d      	add	r5, r9
 8009c8a:	dbf3      	blt.n	8009c74 <forward_lite_conv2d_sssa8_ch+0x400>
 8009c8c:	e779      	b.n	8009b82 <forward_lite_conv2d_sssa8_ch+0x30e>
 8009c8e:	4613      	mov	r3, r2
 8009c90:	3301      	adds	r3, #1
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	e6c3      	b.n	8009a1e <forward_lite_conv2d_sssa8_ch+0x1aa>
 8009c96:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d130      	bne.n	8009cfe <forward_lite_conv2d_sssa8_ch+0x48a>
 8009c9c:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8009c9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	9348      	str	r3, [sp, #288]	; 0x120
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	f8ad 313e 	strh.w	r3, [sp, #318]	; 0x13e
 8009caa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cac:	4293      	cmp	r3, r2
 8009cae:	f6ff af16 	blt.w	8009ade <forward_lite_conv2d_sssa8_ch+0x26a>
 8009cb2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8009cb6:	9311      	str	r3, [sp, #68]	; 0x44
 8009cb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009cba:	42ab      	cmp	r3, r5
 8009cbc:	f47f af6d 	bne.w	8009b9a <forward_lite_conv2d_sssa8_ch+0x326>
 8009cc0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009cc2:	2b03      	cmp	r3, #3
 8009cc4:	f000 80a7 	beq.w	8009e16 <forward_lite_conv2d_sssa8_ch+0x5a2>
 8009cc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cca:	9308      	str	r3, [sp, #32]
 8009ccc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009cce:	9307      	str	r3, [sp, #28]
 8009cd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009cd2:	9306      	str	r3, [sp, #24]
 8009cd4:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
 8009cd6:	9305      	str	r3, [sp, #20]
 8009cd8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009cda:	9304      	str	r3, [sp, #16]
 8009cdc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009cde:	9303      	str	r3, [sp, #12]
 8009ce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ce2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009ce4:	9302      	str	r3, [sp, #8]
 8009ce6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	2300      	movs	r3, #0
 8009cec:	9301      	str	r3, [sp, #4]
 8009cee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009cf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009cf2:	981e      	ldr	r0, [sp, #120]	; 0x78
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	f001 fdd9 	bl	800b8ac <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8009cfa:	901b      	str	r0, [sp, #108]	; 0x6c
 8009cfc:	e74d      	b.n	8009b9a <forward_lite_conv2d_sssa8_ch+0x326>
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	9347      	str	r3, [sp, #284]	; 0x11c
 8009d02:	f8bd 313c 	ldrh.w	r3, [sp, #316]	; 0x13c
 8009d06:	f8ad 313e 	strh.w	r3, [sp, #318]	; 0x13e
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	f43f aee2 	beq.w	8009ad4 <forward_lite_conv2d_sssa8_ch+0x260>
 8009d10:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8009d14:	9311      	str	r3, [sp, #68]	; 0x44
 8009d16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d18:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	; 0x30
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d14f      	bne.n	8009dc0 <forward_lite_conv2d_sssa8_ch+0x54c>
 8009d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d22:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8009d26:	455b      	cmp	r3, fp
 8009d28:	f6bf af33 	bge.w	8009b92 <forward_lite_conv2d_sssa8_ch+0x31e>
 8009d2c:	46b8      	mov	r8, r7
 8009d2e:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8009d32:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009d34:	461e      	mov	r6, r3
 8009d36:	4618      	mov	r0, r3
 8009d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d3a:	fb00 4007 	mla	r0, r0, r7, r4
 8009d3e:	3601      	adds	r6, #1
 8009d40:	fb08 3000 	mla	r0, r8, r0, r3
 8009d44:	4629      	mov	r1, r5
 8009d46:	b236      	sxth	r6, r6
 8009d48:	4652      	mov	r2, sl
 8009d4a:	f001 fb53 	bl	800b3f4 <st_int8_to16_no_shift_interleaved>
 8009d4e:	455e      	cmp	r6, fp
 8009d50:	444d      	add	r5, r9
 8009d52:	4630      	mov	r0, r6
 8009d54:	dbf0      	blt.n	8009d38 <forward_lite_conv2d_sssa8_ch+0x4c4>
 8009d56:	4647      	mov	r7, r8
 8009d58:	e71b      	b.n	8009b92 <forward_lite_conv2d_sssa8_ch+0x31e>
 8009d5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	46d3      	mov	fp, sl
 8009d60:	dd21      	ble.n	8009da6 <forward_lite_conv2d_sssa8_ch+0x532>
 8009d62:	4643      	mov	r3, r8
 8009d64:	46d4      	mov	ip, sl
 8009d66:	46b0      	mov	r8, r6
 8009d68:	461e      	mov	r6, r3
 8009d6a:	e013      	b.n	8009d94 <forward_lite_conv2d_sssa8_ch+0x520>
 8009d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d6e:	eb03 0e0c 	add.w	lr, r3, ip
 8009d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d74:	4563      	cmp	r3, ip
 8009d76:	dd13      	ble.n	8009da0 <forward_lite_conv2d_sssa8_ch+0x52c>
 8009d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d7a:	fb07 300e 	mla	r0, r7, lr, r3
 8009d7e:	f001 fb39 	bl	800b3f4 <st_int8_to16_no_shift_interleaved>
 8009d82:	f10b 0b01 	add.w	fp, fp, #1
 8009d86:	fa0f fb8b 	sxth.w	fp, fp
 8009d8a:	455c      	cmp	r4, fp
 8009d8c:	444d      	add	r5, r9
 8009d8e:	46dc      	mov	ip, fp
 8009d90:	f77f aef4 	ble.w	8009b7c <forward_lite_conv2d_sssa8_ch+0x308>
 8009d94:	f1bb 0f00 	cmp.w	fp, #0
 8009d98:	4629      	mov	r1, r5
 8009d9a:	463a      	mov	r2, r7
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	dae5      	bge.n	8009d6c <forward_lite_conv2d_sssa8_ch+0x4f8>
 8009da0:	f002 fbba 	bl	800c518 <arm_fill_q15>
 8009da4:	e7ed      	b.n	8009d82 <forward_lite_conv2d_sssa8_ch+0x50e>
 8009da6:	f10b 0b01 	add.w	fp, fp, #1
 8009daa:	4629      	mov	r1, r5
 8009dac:	463a      	mov	r2, r7
 8009dae:	4640      	mov	r0, r8
 8009db0:	fa0f fb8b 	sxth.w	fp, fp
 8009db4:	f002 fbb0 	bl	800c518 <arm_fill_q15>
 8009db8:	45a3      	cmp	fp, r4
 8009dba:	444d      	add	r5, r9
 8009dbc:	dbf3      	blt.n	8009da6 <forward_lite_conv2d_sssa8_ch+0x532>
 8009dbe:	e6e0      	b.n	8009b82 <forward_lite_conv2d_sssa8_ch+0x30e>
 8009dc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dc2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8009dc6:	455b      	cmp	r3, fp
 8009dc8:	f6bf aee3 	bge.w	8009b92 <forward_lite_conv2d_sssa8_ch+0x31e>
 8009dcc:	46b8      	mov	r8, r7
 8009dce:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8009dd2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009dd4:	461e      	mov	r6, r3
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dda:	fb00 4007 	mla	r0, r0, r7, r4
 8009dde:	3601      	adds	r6, #1
 8009de0:	fb08 3000 	mla	r0, r8, r0, r3
 8009de4:	4629      	mov	r1, r5
 8009de6:	b236      	sxth	r6, r6
 8009de8:	4652      	mov	r2, sl
 8009dea:	f001 faa3 	bl	800b334 <st_int8_to16_no_shift>
 8009dee:	455e      	cmp	r6, fp
 8009df0:	444d      	add	r5, r9
 8009df2:	4630      	mov	r0, r6
 8009df4:	dbf0      	blt.n	8009dd8 <forward_lite_conv2d_sssa8_ch+0x564>
 8009df6:	4647      	mov	r7, r8
 8009df8:	e6cb      	b.n	8009b92 <forward_lite_conv2d_sssa8_ch+0x31e>
 8009dfa:	46d3      	mov	fp, sl
 8009dfc:	f10b 0b01 	add.w	fp, fp, #1
 8009e00:	4629      	mov	r1, r5
 8009e02:	463a      	mov	r2, r7
 8009e04:	4640      	mov	r0, r8
 8009e06:	fa0f fb8b 	sxth.w	fp, fp
 8009e0a:	f002 fb85 	bl	800c518 <arm_fill_q15>
 8009e0e:	45a3      	cmp	fp, r4
 8009e10:	444d      	add	r5, r9
 8009e12:	dbf3      	blt.n	8009dfc <forward_lite_conv2d_sssa8_ch+0x588>
 8009e14:	e6b5      	b.n	8009b82 <forward_lite_conv2d_sssa8_ch+0x30e>
 8009e16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e18:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009e1a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009e1c:	981e      	ldr	r0, [sp, #120]	; 0x78
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e22:	9308      	str	r3, [sp, #32]
 8009e24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009e26:	9307      	str	r3, [sp, #28]
 8009e28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e2a:	9306      	str	r3, [sp, #24]
 8009e2c:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
 8009e2e:	9305      	str	r3, [sp, #20]
 8009e30:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009e32:	9304      	str	r3, [sp, #16]
 8009e34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009e36:	9303      	str	r3, [sp, #12]
 8009e38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e3a:	9302      	str	r3, [sp, #8]
 8009e3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	bf0c      	ite	eq
 8009e42:	2302      	moveq	r3, #2
 8009e44:	2300      	movne	r3, #0
 8009e46:	9301      	str	r3, [sp, #4]
 8009e48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e4a:	f001 fd2f 	bl	800b8ac <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8009e4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e52:	901b      	str	r0, [sp, #108]	; 0x6c
 8009e54:	3b01      	subs	r3, #1
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d102      	bne.n	8009e60 <forward_lite_conv2d_sssa8_ch+0x5ec>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	3302      	adds	r3, #2
 8009e5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e60:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009e62:	e69a      	b.n	8009b9a <forward_lite_conv2d_sssa8_ch+0x326>
 8009e64:	b2a3      	uxth	r3, r4
 8009e66:	932b      	str	r3, [sp, #172]	; 0xac
 8009e68:	e6a4      	b.n	8009bb4 <forward_lite_conv2d_sssa8_ch+0x340>
 8009e6a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8009e6c:	9321      	str	r3, [sp, #132]	; 0x84
 8009e6e:	1e53      	subs	r3, r2, #1
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	2a00      	cmp	r2, #0
 8009e74:	f47f aef4 	bne.w	8009c60 <forward_lite_conv2d_sssa8_ch+0x3ec>
 8009e78:	b05b      	add	sp, #364	; 0x16c
 8009e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e80:	9a70      	ldr	r2, [sp, #448]	; 0x1c0
 8009e82:	3303      	adds	r3, #3
 8009e84:	18d3      	adds	r3, r2, r3
 8009e86:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e88:	e5f6      	b.n	8009a78 <forward_lite_conv2d_sssa8_ch+0x204>
 8009e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e8c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009e8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009e90:	9864      	ldr	r0, [sp, #400]	; 0x190
 8009e92:	f001 faf1 	bl	800b478 <st_int8_to16_dual>
 8009e96:	e5e9      	b.n	8009a6c <forward_lite_conv2d_sssa8_ch+0x1f8>
 8009e98:	4611      	mov	r1, r2
 8009e9a:	9a70      	ldr	r2, [sp, #448]	; 0x1c0
 8009e9c:	9321      	str	r3, [sp, #132]	; 0x84
 8009e9e:	440a      	add	r2, r1
 8009ea0:	9270      	str	r2, [sp, #448]	; 0x1c0
 8009ea2:	e6d7      	b.n	8009c54 <forward_lite_conv2d_sssa8_ch+0x3e0>
 8009ea4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8009ea6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ea8:	991d      	ldr	r1, [sp, #116]	; 0x74
 8009eaa:	fb02 f303 	mul.w	r3, r2, r3
 8009eae:	9a70      	ldr	r2, [sp, #448]	; 0x1c0
 8009eb0:	fb01 2303 	mla	r3, r1, r3, r2
 8009eb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	f4bf ad9a 	bcs.w	80099f0 <forward_lite_conv2d_sssa8_ch+0x17c>
 8009ebc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ebe:	fb03 f308 	mul.w	r3, r3, r8
 8009ec2:	fb09 2303 	mla	r3, r9, r3, r2
 8009ec6:	9a70      	ldr	r2, [sp, #448]	; 0x1c0
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	f4bf ad91 	bcs.w	80099f0 <forward_lite_conv2d_sssa8_ch+0x17c>
 8009ece:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009ed0:	fbb4 f3f3 	udiv	r3, r4, r3
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	428b      	cmp	r3, r1
 8009ed8:	bf28      	it	cs
 8009eda:	460b      	movcs	r3, r1
 8009edc:	9337      	str	r3, [sp, #220]	; 0xdc
 8009ede:	fbb1 f2f3 	udiv	r2, r1, r3
 8009ee2:	fb03 1312 	mls	r3, r3, r2, r1
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	b292      	uxth	r2, r2
 8009eea:	9235      	str	r2, [sp, #212]	; 0xd4
 8009eec:	b11b      	cbz	r3, 8009ef6 <forward_lite_conv2d_sssa8_ch+0x682>
 8009eee:	4613      	mov	r3, r2
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	9335      	str	r3, [sp, #212]	; 0xd4
 8009ef6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d0bd      	beq.n	8009e78 <forward_lite_conv2d_sssa8_ch+0x604>
 8009efc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009efe:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8009f02:	fb09 f505 	mul.w	r5, r9, r5
 8009f06:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009f0a:	9315      	str	r3, [sp, #84]	; 0x54
 8009f0c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	9339      	str	r3, [sp, #228]	; 0xe4
 8009f14:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009f16:	425b      	negs	r3, r3
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	9336      	str	r3, [sp, #216]	; 0xd8
 8009f1c:	f009 0303 	and.w	r3, r9, #3
 8009f20:	9311      	str	r3, [sp, #68]	; 0x44
 8009f22:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8009f26:	fa0f f68b 	sxth.w	r6, fp
 8009f2a:	2400      	movs	r4, #0
 8009f2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f2e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8009f32:	9331      	str	r3, [sp, #196]	; 0xc4
 8009f34:	4625      	mov	r5, r4
 8009f36:	46d3      	mov	fp, sl
 8009f38:	464f      	mov	r7, r9
 8009f3a:	9632      	str	r6, [sp, #200]	; 0xc8
 8009f3c:	a846      	add	r0, sp, #280	; 0x118
 8009f3e:	f001 fc9b 	bl	800b878 <ai_padding_opt_phase1>
 8009f42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f44:	9a70      	ldr	r2, [sp, #448]	; 0x1c0
 8009f46:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009f48:	fb03 f305 	mul.w	r3, r3, r5
 8009f4c:	fb01 2303 	mla	r3, r1, r3, r2
 8009f50:	931b      	str	r3, [sp, #108]	; 0x6c
 8009f52:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8009f54:	b94b      	cbnz	r3, 8009f6a <forward_lite_conv2d_sssa8_ch+0x6f6>
 8009f56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f040 81f9 	bne.w	800a350 <forward_lite_conv2d_sssa8_ch+0xadc>
 8009f5e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8009f60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009f62:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009f64:	9864      	ldr	r0, [sp, #400]	; 0x190
 8009f66:	f001 fb73 	bl	800b650 <st_int8_to16_dual_interleaved>
 8009f6a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f000 81f9 	beq.w	800a364 <forward_lite_conv2d_sssa8_ch+0xaf0>
 8009f72:	b2a3      	uxth	r3, r4
 8009f74:	9338      	str	r3, [sp, #224]	; 0xe0
 8009f76:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
 8009f7a:	1a9b      	subs	r3, r3, r2
 8009f7c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8009f7e:	fb05 3302 	mla	r3, r5, r2, r3
 8009f82:	930e      	str	r3, [sp, #56]	; 0x38
 8009f84:	f9bd 30d8 	ldrsh.w	r3, [sp, #216]	; 0xd8
 8009f88:	9314      	str	r3, [sp, #80]	; 0x50
 8009f8a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8009f8c:	932f      	str	r3, [sp, #188]	; 0xbc
 8009f8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f90:	9330      	str	r3, [sp, #192]	; 0xc0
 8009f92:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8009f94:	9319      	str	r3, [sp, #100]	; 0x64
 8009f96:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8009f98:	9333      	str	r3, [sp, #204]	; 0xcc
 8009f9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f9c:	9321      	str	r3, [sp, #132]	; 0x84
 8009f9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009fa0:	9328      	str	r3, [sp, #160]	; 0xa0
 8009fa2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009fa4:	9327      	str	r3, [sp, #156]	; 0x9c
 8009fa6:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
 8009fa8:	9323      	str	r3, [sp, #140]	; 0x8c
 8009faa:	46da      	mov	sl, fp
 8009fac:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8009fae:	9247      	str	r2, [sp, #284]	; 0x11c
 8009fb0:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
 8009fb2:	9248      	str	r2, [sp, #288]	; 0x120
 8009fb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009fb6:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8009fb8:	9346      	str	r3, [sp, #280]	; 0x118
 8009fba:	2a00      	cmp	r2, #0
 8009fbc:	f000 817b 	beq.w	800a2b6 <forward_lite_conv2d_sssa8_ch+0xa42>
 8009fc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009fc2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009fc4:	4252      	negs	r2, r2
 8009fc6:	b292      	uxth	r2, r2
 8009fc8:	920c      	str	r2, [sp, #48]	; 0x30
 8009fca:	2100      	movs	r1, #0
 8009fcc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009fce:	9218      	str	r2, [sp, #96]	; 0x60
 8009fd0:	460a      	mov	r2, r1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d073      	beq.n	800a0be <forward_lite_conv2d_sssa8_ch+0x84a>
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	9346      	str	r3, [sp, #280]	; 0x118
 8009fda:	2301      	movs	r3, #1
 8009fdc:	f8ad 313e 	strh.w	r3, [sp, #318]	; 0x13e
 8009fe0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fe2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009fe4:	4283      	cmp	r3, r0
 8009fe6:	da77      	bge.n	800a0d8 <forward_lite_conv2d_sssa8_ch+0x864>
 8009fe8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009fea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009fec:	f8dd 90c4 	ldr.w	r9, [sp, #196]	; 0xc4
 8009ff0:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8009ff4:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 8009ff8:	fb02 3200 	mla	r2, r2, r0, r3
 8009ffc:	b28b      	uxth	r3, r1
 8009ffe:	9310      	str	r3, [sp, #64]	; 0x40
 800a000:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a002:	1ad5      	subs	r5, r2, r3
 800a004:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 800a008:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a00a:	4692      	mov	sl, r2
 800a00c:	461e      	mov	r6, r3
 800a00e:	4555      	cmp	r5, sl
 800a010:	dd3a      	ble.n	800a088 <forward_lite_conv2d_sssa8_ch+0x814>
 800a012:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a014:	2e00      	cmp	r6, #0
 800a016:	fb03 f202 	mul.w	r2, r3, r2
 800a01a:	920f      	str	r2, [sp, #60]	; 0x3c
 800a01c:	f2c0 8125 	blt.w	800a26a <forward_lite_conv2d_sssa8_ch+0x9f6>
 800a020:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a022:	2a00      	cmp	r2, #0
 800a024:	f000 80d1 	beq.w	800a1ca <forward_lite_conv2d_sssa8_ch+0x956>
 800a028:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a02a:	429a      	cmp	r2, r3
 800a02c:	46d3      	mov	fp, sl
 800a02e:	f340 8092 	ble.w	800a156 <forward_lite_conv2d_sssa8_ch+0x8e2>
 800a032:	4643      	mov	r3, r8
 800a034:	46d4      	mov	ip, sl
 800a036:	46b0      	mov	r8, r6
 800a038:	461e      	mov	r6, r3
 800a03a:	e012      	b.n	800a062 <forward_lite_conv2d_sssa8_ch+0x7ee>
 800a03c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a03e:	eb03 0e0c 	add.w	lr, r3, ip
 800a042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a044:	4563      	cmp	r3, ip
 800a046:	dd12      	ble.n	800a06e <forward_lite_conv2d_sssa8_ch+0x7fa>
 800a048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a04a:	f10b 0b01 	add.w	fp, fp, #1
 800a04e:	fa0f fb8b 	sxth.w	fp, fp
 800a052:	fb07 300e 	mla	r0, r7, lr, r3
 800a056:	f001 f96d 	bl	800b334 <st_int8_to16_no_shift>
 800a05a:	455d      	cmp	r5, fp
 800a05c:	444c      	add	r4, r9
 800a05e:	46dc      	mov	ip, fp
 800a060:	dd0f      	ble.n	800a082 <forward_lite_conv2d_sssa8_ch+0x80e>
 800a062:	f1bb 0f00 	cmp.w	fp, #0
 800a066:	463a      	mov	r2, r7
 800a068:	4621      	mov	r1, r4
 800a06a:	4630      	mov	r0, r6
 800a06c:	dae6      	bge.n	800a03c <forward_lite_conv2d_sssa8_ch+0x7c8>
 800a06e:	f10b 0b01 	add.w	fp, fp, #1
 800a072:	fa0f fb8b 	sxth.w	fp, fp
 800a076:	f002 fa4f 	bl	800c518 <arm_fill_q15>
 800a07a:	455d      	cmp	r5, fp
 800a07c:	444c      	add	r4, r9
 800a07e:	46dc      	mov	ip, fp
 800a080:	dcef      	bgt.n	800a062 <forward_lite_conv2d_sssa8_ch+0x7ee>
 800a082:	4633      	mov	r3, r6
 800a084:	4646      	mov	r6, r8
 800a086:	4698      	mov	r8, r3
 800a088:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a08a:	3601      	adds	r6, #1
 800a08c:	b236      	sxth	r6, r6
 800a08e:	4296      	cmp	r6, r2
 800a090:	4633      	mov	r3, r6
 800a092:	dbbc      	blt.n	800a00e <forward_lite_conv2d_sssa8_ch+0x79a>
 800a094:	f8dd a0ac 	ldr.w	sl, [sp, #172]	; 0xac
 800a098:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a09a:	42a3      	cmp	r3, r4
 800a09c:	d021      	beq.n	800a0e2 <forward_lite_conv2d_sssa8_ch+0x86e>
 800a09e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a0a2:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a0a4:	4413      	add	r3, r2
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	3101      	adds	r1, #1
 800a0aa:	930c      	str	r3, [sp, #48]	; 0x30
 800a0ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0ae:	b209      	sxth	r1, r1
 800a0b0:	4299      	cmp	r1, r3
 800a0b2:	460a      	mov	r2, r1
 800a0b4:	f280 80e7 	bge.w	800a286 <forward_lite_conv2d_sssa8_ch+0xa12>
 800a0b8:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d18b      	bne.n	8009fd6 <forward_lite_conv2d_sssa8_ch+0x762>
 800a0be:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d155      	bne.n	800a170 <forward_lite_conv2d_sssa8_ch+0x8fc>
 800a0c4:	9b48      	ldr	r3, [sp, #288]	; 0x120
 800a0c6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	9348      	str	r3, [sp, #288]	; 0x120
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	f8ad 313e 	strh.w	r3, [sp, #318]	; 0x13e
 800a0d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0d4:	4283      	cmp	r3, r0
 800a0d6:	db87      	blt.n	8009fe8 <forward_lite_conv2d_sssa8_ch+0x774>
 800a0d8:	b28b      	uxth	r3, r1
 800a0da:	9310      	str	r3, [sp, #64]	; 0x40
 800a0dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0de:	42a3      	cmp	r3, r4
 800a0e0:	d1dd      	bne.n	800a09e <forward_lite_conv2d_sssa8_ch+0x82a>
 800a0e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a0e4:	9308      	str	r3, [sp, #32]
 800a0e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a0e8:	9307      	str	r3, [sp, #28]
 800a0ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0ec:	9306      	str	r3, [sp, #24]
 800a0ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0f0:	9305      	str	r3, [sp, #20]
 800a0f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a0f4:	9304      	str	r3, [sp, #16]
 800a0f6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a0f8:	9303      	str	r3, [sp, #12]
 800a0fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0fc:	9302      	str	r3, [sp, #8]
 800a0fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	2300      	movs	r3, #0
 800a104:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800a106:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800a10c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a10e:	f001 fbcd 	bl	800b8ac <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800a112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a114:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a116:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a118:	9018      	str	r0, [sp, #96]	; 0x60
 800a11a:	4413      	add	r3, r2
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	3101      	adds	r1, #1
 800a120:	930c      	str	r3, [sp, #48]	; 0x30
 800a122:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a124:	b209      	sxth	r1, r1
 800a126:	4299      	cmp	r1, r3
 800a128:	460a      	mov	r2, r1
 800a12a:	f280 80c4 	bge.w	800a2b6 <forward_lite_conv2d_sssa8_ch+0xa42>
 800a12e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800a130:	e7c2      	b.n	800a0b8 <forward_lite_conv2d_sssa8_ch+0x844>
 800a132:	e9dd 211c 	ldrd	r2, r1, [sp, #112]	; 0x70
 800a136:	fb01 f302 	mul.w	r3, r1, r2
 800a13a:	42a3      	cmp	r3, r4
 800a13c:	f73f ac52 	bgt.w	80099e4 <forward_lite_conv2d_sssa8_ch+0x170>
 800a140:	f019 0f03 	tst.w	r9, #3
 800a144:	f040 8111 	bne.w	800a36a <forward_lite_conv2d_sssa8_ch+0xaf6>
 800a148:	460b      	mov	r3, r1
 800a14a:	9864      	ldr	r0, [sp, #400]	; 0x190
 800a14c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a14e:	9734      	str	r7, [sp, #208]	; 0xd0
 800a150:	f001 fa7e 	bl	800b650 <st_int8_to16_dual_interleaved>
 800a154:	e448      	b.n	80099e8 <forward_lite_conv2d_sssa8_ch+0x174>
 800a156:	f10b 0b01 	add.w	fp, fp, #1
 800a15a:	4621      	mov	r1, r4
 800a15c:	463a      	mov	r2, r7
 800a15e:	4640      	mov	r0, r8
 800a160:	fa0f fb8b 	sxth.w	fp, fp
 800a164:	f002 f9d8 	bl	800c518 <arm_fill_q15>
 800a168:	455d      	cmp	r5, fp
 800a16a:	444c      	add	r4, r9
 800a16c:	dcf3      	bgt.n	800a156 <forward_lite_conv2d_sssa8_ch+0x8e2>
 800a16e:	e78b      	b.n	800a088 <forward_lite_conv2d_sssa8_ch+0x814>
 800a170:	3b01      	subs	r3, #1
 800a172:	9347      	str	r3, [sp, #284]	; 0x11c
 800a174:	f8bd 313c 	ldrh.w	r3, [sp, #316]	; 0x13c
 800a178:	f8ad 313e 	strh.w	r3, [sp, #318]	; 0x13e
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	f43f af2f 	beq.w	8009fe0 <forward_lite_conv2d_sssa8_ch+0x76c>
 800a182:	b28b      	uxth	r3, r1
 800a184:	9310      	str	r3, [sp, #64]	; 0x40
 800a186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a188:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d14f      	bne.n	800a230 <forward_lite_conv2d_sssa8_ch+0x9bc>
 800a190:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a192:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800a196:	455b      	cmp	r3, fp
 800a198:	f6bf af7e 	bge.w	800a098 <forward_lite_conv2d_sssa8_ch+0x824>
 800a19c:	46b8      	mov	r8, r7
 800a19e:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800a1a2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a1a4:	461e      	mov	r6, r3
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1aa:	fb00 5007 	mla	r0, r0, r7, r5
 800a1ae:	3601      	adds	r6, #1
 800a1b0:	fb08 3000 	mla	r0, r8, r0, r3
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	b236      	sxth	r6, r6
 800a1b8:	4652      	mov	r2, sl
 800a1ba:	f001 f91b 	bl	800b3f4 <st_int8_to16_no_shift_interleaved>
 800a1be:	455e      	cmp	r6, fp
 800a1c0:	444c      	add	r4, r9
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	dbf0      	blt.n	800a1a8 <forward_lite_conv2d_sssa8_ch+0x934>
 800a1c6:	4647      	mov	r7, r8
 800a1c8:	e766      	b.n	800a098 <forward_lite_conv2d_sssa8_ch+0x824>
 800a1ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	46d3      	mov	fp, sl
 800a1d0:	dd21      	ble.n	800a216 <forward_lite_conv2d_sssa8_ch+0x9a2>
 800a1d2:	4643      	mov	r3, r8
 800a1d4:	46d4      	mov	ip, sl
 800a1d6:	46b0      	mov	r8, r6
 800a1d8:	461e      	mov	r6, r3
 800a1da:	e013      	b.n	800a204 <forward_lite_conv2d_sssa8_ch+0x990>
 800a1dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1de:	eb03 0e0c 	add.w	lr, r3, ip
 800a1e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1e4:	4563      	cmp	r3, ip
 800a1e6:	dd13      	ble.n	800a210 <forward_lite_conv2d_sssa8_ch+0x99c>
 800a1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ea:	fb07 300e 	mla	r0, r7, lr, r3
 800a1ee:	f001 f901 	bl	800b3f4 <st_int8_to16_no_shift_interleaved>
 800a1f2:	f10b 0b01 	add.w	fp, fp, #1
 800a1f6:	fa0f fb8b 	sxth.w	fp, fp
 800a1fa:	455d      	cmp	r5, fp
 800a1fc:	444c      	add	r4, r9
 800a1fe:	46dc      	mov	ip, fp
 800a200:	f77f af3f 	ble.w	800a082 <forward_lite_conv2d_sssa8_ch+0x80e>
 800a204:	f1bb 0f00 	cmp.w	fp, #0
 800a208:	4621      	mov	r1, r4
 800a20a:	463a      	mov	r2, r7
 800a20c:	4630      	mov	r0, r6
 800a20e:	dae5      	bge.n	800a1dc <forward_lite_conv2d_sssa8_ch+0x968>
 800a210:	f002 f982 	bl	800c518 <arm_fill_q15>
 800a214:	e7ed      	b.n	800a1f2 <forward_lite_conv2d_sssa8_ch+0x97e>
 800a216:	f10b 0b01 	add.w	fp, fp, #1
 800a21a:	4621      	mov	r1, r4
 800a21c:	463a      	mov	r2, r7
 800a21e:	4640      	mov	r0, r8
 800a220:	fa0f fb8b 	sxth.w	fp, fp
 800a224:	f002 f978 	bl	800c518 <arm_fill_q15>
 800a228:	455d      	cmp	r5, fp
 800a22a:	444c      	add	r4, r9
 800a22c:	dcf3      	bgt.n	800a216 <forward_lite_conv2d_sssa8_ch+0x9a2>
 800a22e:	e72b      	b.n	800a088 <forward_lite_conv2d_sssa8_ch+0x814>
 800a230:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a232:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800a236:	455b      	cmp	r3, fp
 800a238:	f6bf af2e 	bge.w	800a098 <forward_lite_conv2d_sssa8_ch+0x824>
 800a23c:	46b8      	mov	r8, r7
 800a23e:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800a242:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a244:	461e      	mov	r6, r3
 800a246:	4618      	mov	r0, r3
 800a248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a24a:	fb00 5007 	mla	r0, r0, r7, r5
 800a24e:	3601      	adds	r6, #1
 800a250:	fb08 3000 	mla	r0, r8, r0, r3
 800a254:	4621      	mov	r1, r4
 800a256:	b236      	sxth	r6, r6
 800a258:	4652      	mov	r2, sl
 800a25a:	f001 f86b 	bl	800b334 <st_int8_to16_no_shift>
 800a25e:	455e      	cmp	r6, fp
 800a260:	444c      	add	r4, r9
 800a262:	4630      	mov	r0, r6
 800a264:	dbf0      	blt.n	800a248 <forward_lite_conv2d_sssa8_ch+0x9d4>
 800a266:	4647      	mov	r7, r8
 800a268:	e716      	b.n	800a098 <forward_lite_conv2d_sssa8_ch+0x824>
 800a26a:	46d3      	mov	fp, sl
 800a26c:	f10b 0b01 	add.w	fp, fp, #1
 800a270:	4621      	mov	r1, r4
 800a272:	463a      	mov	r2, r7
 800a274:	4640      	mov	r0, r8
 800a276:	fa0f fb8b 	sxth.w	fp, fp
 800a27a:	f002 f94d 	bl	800c518 <arm_fill_q15>
 800a27e:	45ab      	cmp	fp, r5
 800a280:	444c      	add	r4, r9
 800a282:	dbf3      	blt.n	800a26c <forward_lite_conv2d_sssa8_ch+0x9f8>
 800a284:	e700      	b.n	800a088 <forward_lite_conv2d_sssa8_ch+0x814>
 800a286:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a288:	428c      	cmp	r4, r1
 800a28a:	d014      	beq.n	800a2b6 <forward_lite_conv2d_sssa8_ch+0xa42>
 800a28c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a28e:	9307      	str	r3, [sp, #28]
 800a290:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a292:	9306      	str	r3, [sp, #24]
 800a294:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a296:	9305      	str	r3, [sp, #20]
 800a298:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a29a:	9304      	str	r3, [sp, #16]
 800a29c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a29e:	9303      	str	r3, [sp, #12]
 800a2a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a2a2:	9302      	str	r3, [sp, #8]
 800a2a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a2a6:	9301      	str	r3, [sp, #4]
 800a2a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800a2ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a2b0:	981e      	ldr	r0, [sp, #120]	; 0x78
 800a2b2:	f001 fef5 	bl	800c0a0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800a2b6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a2b8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800a2ba:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800a2bc:	1a9b      	subs	r3, r3, r2
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	9330      	str	r3, [sp, #192]	; 0xc0
 800a2c4:	bf28      	it	cs
 800a2c6:	4613      	movcs	r3, r2
 800a2c8:	4411      	add	r1, r2
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	911b      	str	r1, [sp, #108]	; 0x6c
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d036      	beq.n	800a340 <forward_lite_conv2d_sssa8_ch+0xacc>
 800a2d2:	9933      	ldr	r1, [sp, #204]	; 0xcc
 800a2d4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a2d6:	fb04 1002 	mla	r0, r4, r2, r1
 800a2da:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800a2dc:	9033      	str	r0, [sp, #204]	; 0xcc
 800a2de:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a2e2:	9128      	str	r1, [sp, #160]	; 0xa0
 800a2e4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800a2e6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800a2ea:	9127      	str	r1, [sp, #156]	; 0x9c
 800a2ec:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800a2ee:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a2f2:	9123      	str	r1, [sp, #140]	; 0x8c
 800a2f4:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a2f6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800a2fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a2fc:	9221      	str	r2, [sp, #132]	; 0x84
 800a2fe:	bb09      	cbnz	r1, 800a344 <forward_lite_conv2d_sssa8_ch+0xad0>
 800a300:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a302:	9319      	str	r3, [sp, #100]	; 0x64
 800a304:	4622      	mov	r2, r4
 800a306:	f001 f9a3 	bl	800b650 <st_int8_to16_dual_interleaved>
 800a30a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800a30c:	3b01      	subs	r3, #1
 800a30e:	b29b      	uxth	r3, r3
 800a310:	461a      	mov	r2, r3
 800a312:	932f      	str	r3, [sp, #188]	; 0xbc
 800a314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a318:	429a      	cmp	r2, r3
 800a31a:	f47f ae47 	bne.w	8009fac <forward_lite_conv2d_sssa8_ch+0x738>
 800a31e:	46d3      	mov	fp, sl
 800a320:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800a322:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800a324:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 800a326:	4413      	add	r3, r2
 800a328:	b29b      	uxth	r3, r3
 800a32a:	3401      	adds	r4, #1
 800a32c:	9336      	str	r3, [sp, #216]	; 0xd8
 800a32e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a330:	b224      	sxth	r4, r4
 800a332:	429c      	cmp	r4, r3
 800a334:	4625      	mov	r5, r4
 800a336:	f6ff ae01 	blt.w	8009f3c <forward_lite_conv2d_sssa8_ch+0x6c8>
 800a33a:	b05b      	add	sp, #364	; 0x16c
 800a33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a340:	9319      	str	r3, [sp, #100]	; 0x64
 800a342:	e7e2      	b.n	800a30a <forward_lite_conv2d_sssa8_ch+0xa96>
 800a344:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a346:	9319      	str	r3, [sp, #100]	; 0x64
 800a348:	4622      	mov	r2, r4
 800a34a:	f001 f895 	bl	800b478 <st_int8_to16_dual>
 800a34e:	e7dc      	b.n	800a30a <forward_lite_conv2d_sssa8_ch+0xa96>
 800a350:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800a352:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a354:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a356:	9864      	ldr	r0, [sp, #400]	; 0x190
 800a358:	f001 f88e 	bl	800b478 <st_int8_to16_dual>
 800a35c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f47f ae07 	bne.w	8009f72 <forward_lite_conv2d_sssa8_ch+0x6fe>
 800a364:	b2a3      	uxth	r3, r4
 800a366:	9338      	str	r3, [sp, #224]	; 0xe0
 800a368:	e7da      	b.n	800a320 <forward_lite_conv2d_sssa8_ch+0xaac>
 800a36a:	460b      	mov	r3, r1
 800a36c:	9864      	ldr	r0, [sp, #400]	; 0x190
 800a36e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a370:	9734      	str	r7, [sp, #208]	; 0xd0
 800a372:	f001 f881 	bl	800b478 <st_int8_to16_dual>
 800a376:	f7ff bb37 	b.w	80099e8 <forward_lite_conv2d_sssa8_ch+0x174>
 800a37a:	bf00      	nop

0800a37c <forward_lite_node_convert_integer_iu8ou8>:
 800a37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a380:	4605      	mov	r5, r0
 800a382:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 800a386:	f89d 9020 	ldrb.w	r9, [sp, #32]
 800a38a:	461f      	mov	r7, r3
 800a38c:	4616      	mov	r6, r2
 800a38e:	460c      	mov	r4, r1
 800a390:	f7f5 ffb0 	bl	80002f4 <__aeabi_ui2f>
 800a394:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a398:	f7f5 fefc 	bl	8000194 <__addsf3>
 800a39c:	4680      	mov	r8, r0
 800a39e:	4648      	mov	r0, r9
 800a3a0:	f7f5 ffa8 	bl	80002f4 <__aeabi_ui2f>
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	f7f5 fffd 	bl	80003a4 <__aeabi_fmul>
 800a3aa:	4601      	mov	r1, r0
 800a3ac:	4640      	mov	r0, r8
 800a3ae:	f7f5 feef 	bl	8000190 <__aeabi_fsub>
 800a3b2:	19ab      	adds	r3, r5, r6
 800a3b4:	429d      	cmp	r5, r3
 800a3b6:	d214      	bcs.n	800a3e2 <forward_lite_node_convert_integer_iu8ou8+0x66>
 800a3b8:	4680      	mov	r8, r0
 800a3ba:	3d01      	subs	r5, #1
 800a3bc:	4426      	add	r6, r4
 800a3be:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800a3c2:	f7f5 ff9b 	bl	80002fc <__aeabi_i2f>
 800a3c6:	4639      	mov	r1, r7
 800a3c8:	f7f5 ffec 	bl	80003a4 <__aeabi_fmul>
 800a3cc:	4641      	mov	r1, r8
 800a3ce:	f7f5 fee1 	bl	8000194 <__addsf3>
 800a3d2:	f7f6 f9ad 	bl	8000730 <__aeabi_f2iz>
 800a3d6:	f380 0008 	usat	r0, #8, r0
 800a3da:	f804 0b01 	strb.w	r0, [r4], #1
 800a3de:	42b4      	cmp	r4, r6
 800a3e0:	d1ed      	bne.n	800a3be <forward_lite_node_convert_integer_iu8ou8+0x42>
 800a3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3e6:	bf00      	nop

0800a3e8 <forward_lite_node_convert_integer_iu8os8>:
 800a3e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ec:	4605      	mov	r5, r0
 800a3ee:	f99d 002c 	ldrsb.w	r0, [sp, #44]	; 0x2c
 800a3f2:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 800a3f6:	461f      	mov	r7, r3
 800a3f8:	4616      	mov	r6, r2
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	f7f5 ff7e 	bl	80002fc <__aeabi_i2f>
 800a400:	4680      	mov	r8, r0
 800a402:	4648      	mov	r0, r9
 800a404:	f7f5 ff76 	bl	80002f4 <__aeabi_ui2f>
 800a408:	4639      	mov	r1, r7
 800a40a:	f7f5 ffcb 	bl	80003a4 <__aeabi_fmul>
 800a40e:	4601      	mov	r1, r0
 800a410:	4640      	mov	r0, r8
 800a412:	f7f5 febd 	bl	8000190 <__aeabi_fsub>
 800a416:	19ab      	adds	r3, r5, r6
 800a418:	429d      	cmp	r5, r3
 800a41a:	d22f      	bcs.n	800a47c <forward_lite_node_convert_integer_iu8os8+0x94>
 800a41c:	4680      	mov	r8, r0
 800a41e:	3d01      	subs	r5, #1
 800a420:	4426      	add	r6, r4
 800a422:	f04f 0a00 	mov.w	sl, #0
 800a426:	f04f 597c 	mov.w	r9, #1056964608	; 0x3f000000
 800a42a:	e009      	b.n	800a440 <forward_lite_node_convert_integer_iu8os8+0x58>
 800a42c:	f7f5 feb2 	bl	8000194 <__addsf3>
 800a430:	f7f6 f97e 	bl	8000730 <__aeabi_f2iz>
 800a434:	f300 0007 	ssat	r0, #8, r0
 800a438:	f804 0b01 	strb.w	r0, [r4], #1
 800a43c:	42b4      	cmp	r4, r6
 800a43e:	d01d      	beq.n	800a47c <forward_lite_node_convert_integer_iu8os8+0x94>
 800a440:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800a444:	f7f5 ff5a 	bl	80002fc <__aeabi_i2f>
 800a448:	4639      	mov	r1, r7
 800a44a:	f7f5 ffab 	bl	80003a4 <__aeabi_fmul>
 800a44e:	4641      	mov	r1, r8
 800a450:	f7f5 fea0 	bl	8000194 <__addsf3>
 800a454:	4651      	mov	r1, sl
 800a456:	4683      	mov	fp, r0
 800a458:	f7f6 f960 	bl	800071c <__aeabi_fcmpgt>
 800a45c:	4602      	mov	r2, r0
 800a45e:	4649      	mov	r1, r9
 800a460:	4658      	mov	r0, fp
 800a462:	2a00      	cmp	r2, #0
 800a464:	d1e2      	bne.n	800a42c <forward_lite_node_convert_integer_iu8os8+0x44>
 800a466:	4906      	ldr	r1, [pc, #24]	; (800a480 <forward_lite_node_convert_integer_iu8os8+0x98>)
 800a468:	f7f5 fe92 	bl	8000190 <__aeabi_fsub>
 800a46c:	f7f6 f960 	bl	8000730 <__aeabi_f2iz>
 800a470:	f300 0007 	ssat	r0, #8, r0
 800a474:	f804 0b01 	strb.w	r0, [r4], #1
 800a478:	42b4      	cmp	r4, r6
 800a47a:	d1e1      	bne.n	800a440 <forward_lite_node_convert_integer_iu8os8+0x58>
 800a47c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a480:	3efffffc 	.word	0x3efffffc

0800a484 <forward_lite_node_convert_integer_iu8os8_fast>:
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	1095      	asrs	r5, r2, #2
 800a488:	2d00      	cmp	r5, #0
 800a48a:	dd31      	ble.n	800a4f0 <forward_lite_node_convert_integer_iu8os8_fast+0x6c>
 800a48c:	00ae      	lsls	r6, r5, #2
 800a48e:	460c      	mov	r4, r1
 800a490:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800a494:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 800a498:	f850 3b04 	ldr.w	r3, [r0], #4
 800a49c:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800a4a0:	fa3f fc8c 	uxtb16	ip, ip
 800a4a4:	fadc fc0e 	ssub16	ip, ip, lr
 800a4a8:	fa3f f383 	uxtb16	r3, r3
 800a4ac:	fad3 f30e 	ssub16	r3, r3, lr
 800a4b0:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 800a4b4:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 800a4b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800a4bc:	ea43 030c 	orr.w	r3, r3, ip
 800a4c0:	42a8      	cmp	r0, r5
 800a4c2:	f844 3b04 	str.w	r3, [r4], #4
 800a4c6:	d1e7      	bne.n	800a498 <forward_lite_node_convert_integer_iu8os8_fast+0x14>
 800a4c8:	4431      	add	r1, r6
 800a4ca:	f012 0203 	ands.w	r2, r2, #3
 800a4ce:	d00e      	beq.n	800a4ee <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800a4d0:	782b      	ldrb	r3, [r5, #0]
 800a4d2:	3a01      	subs	r2, #1
 800a4d4:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800a4d8:	700b      	strb	r3, [r1, #0]
 800a4da:	d008      	beq.n	800a4ee <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800a4dc:	786b      	ldrb	r3, [r5, #1]
 800a4de:	2a01      	cmp	r2, #1
 800a4e0:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800a4e4:	704b      	strb	r3, [r1, #1]
 800a4e6:	d002      	beq.n	800a4ee <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800a4e8:	78ab      	ldrb	r3, [r5, #2]
 800a4ea:	3b80      	subs	r3, #128	; 0x80
 800a4ec:	708b      	strb	r3, [r1, #2]
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}
 800a4f0:	4605      	mov	r5, r0
 800a4f2:	e7ea      	b.n	800a4ca <forward_lite_node_convert_integer_iu8os8_fast+0x46>

0800a4f4 <forward_lite_node_convert_integer_is8ou8>:
 800a4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 800a4fe:	f99d 9020 	ldrsb.w	r9, [sp, #32]
 800a502:	461f      	mov	r7, r3
 800a504:	4616      	mov	r6, r2
 800a506:	460c      	mov	r4, r1
 800a508:	f7f5 fef4 	bl	80002f4 <__aeabi_ui2f>
 800a50c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a510:	f7f5 fe40 	bl	8000194 <__addsf3>
 800a514:	4680      	mov	r8, r0
 800a516:	4648      	mov	r0, r9
 800a518:	f7f5 fef0 	bl	80002fc <__aeabi_i2f>
 800a51c:	4639      	mov	r1, r7
 800a51e:	f7f5 ff41 	bl	80003a4 <__aeabi_fmul>
 800a522:	4601      	mov	r1, r0
 800a524:	4640      	mov	r0, r8
 800a526:	f7f5 fe33 	bl	8000190 <__aeabi_fsub>
 800a52a:	19ab      	adds	r3, r5, r6
 800a52c:	429d      	cmp	r5, r3
 800a52e:	d214      	bcs.n	800a55a <forward_lite_node_convert_integer_is8ou8+0x66>
 800a530:	4680      	mov	r8, r0
 800a532:	3d01      	subs	r5, #1
 800a534:	4426      	add	r6, r4
 800a536:	f915 0f01 	ldrsb.w	r0, [r5, #1]!
 800a53a:	f7f5 fedf 	bl	80002fc <__aeabi_i2f>
 800a53e:	4639      	mov	r1, r7
 800a540:	f7f5 ff30 	bl	80003a4 <__aeabi_fmul>
 800a544:	4641      	mov	r1, r8
 800a546:	f7f5 fe25 	bl	8000194 <__addsf3>
 800a54a:	f7f6 f8f1 	bl	8000730 <__aeabi_f2iz>
 800a54e:	f380 0008 	usat	r0, #8, r0
 800a552:	f804 0b01 	strb.w	r0, [r4], #1
 800a556:	42b4      	cmp	r4, r6
 800a558:	d1ed      	bne.n	800a536 <forward_lite_node_convert_integer_is8ou8+0x42>
 800a55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a55e:	bf00      	nop

0800a560 <forward_lite_node_convert_integer_is8ou8_fast>:
 800a560:	b570      	push	{r4, r5, r6, lr}
 800a562:	1095      	asrs	r5, r2, #2
 800a564:	2d00      	cmp	r5, #0
 800a566:	dd2d      	ble.n	800a5c4 <forward_lite_node_convert_integer_is8ou8_fast+0x64>
 800a568:	00ae      	lsls	r6, r5, #2
 800a56a:	460c      	mov	r4, r1
 800a56c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800a570:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 800a574:	f850 3b04 	ldr.w	r3, [r0], #4
 800a578:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800a57c:	fa2f fc8c 	sxtb16	ip, ip
 800a580:	fa9c fc0e 	sadd16	ip, ip, lr
 800a584:	fa2f f383 	sxtb16	r3, r3
 800a588:	fa93 f30e 	sadd16	r3, r3, lr
 800a58c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800a590:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800a594:	42a8      	cmp	r0, r5
 800a596:	f844 3b04 	str.w	r3, [r4], #4
 800a59a:	d1eb      	bne.n	800a574 <forward_lite_node_convert_integer_is8ou8_fast+0x14>
 800a59c:	4431      	add	r1, r6
 800a59e:	f012 0203 	ands.w	r2, r2, #3
 800a5a2:	d00e      	beq.n	800a5c2 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800a5a4:	782b      	ldrb	r3, [r5, #0]
 800a5a6:	3a01      	subs	r2, #1
 800a5a8:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800a5ac:	700b      	strb	r3, [r1, #0]
 800a5ae:	d008      	beq.n	800a5c2 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800a5b0:	786b      	ldrb	r3, [r5, #1]
 800a5b2:	2a01      	cmp	r2, #1
 800a5b4:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800a5b8:	704b      	strb	r3, [r1, #1]
 800a5ba:	d002      	beq.n	800a5c2 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800a5bc:	78ab      	ldrb	r3, [r5, #2]
 800a5be:	3b80      	subs	r3, #128	; 0x80
 800a5c0:	708b      	strb	r3, [r1, #2]
 800a5c2:	bd70      	pop	{r4, r5, r6, pc}
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	e7ea      	b.n	800a59e <forward_lite_node_convert_integer_is8ou8_fast+0x3e>

0800a5c8 <forward_lite_maxpool_is8os8_scalepos>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	b097      	sub	sp, #92	; 0x5c
 800a5ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a5d2:	930e      	str	r3, [sp, #56]	; 0x38
 800a5d4:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 800a5d8:	9315      	str	r3, [sp, #84]	; 0x54
 800a5da:	4619      	mov	r1, r3
 800a5dc:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 800a5e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5e2:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800a5e6:	9310      	str	r3, [sp, #64]	; 0x40
 800a5e8:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800a5ec:	9311      	str	r3, [sp, #68]	; 0x44
 800a5ee:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 800a5f2:	9312      	str	r3, [sp, #72]	; 0x48
 800a5f4:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 800a5f8:	9313      	str	r3, [sp, #76]	; 0x4c
 800a5fa:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800a5fe:	9314      	str	r3, [sp, #80]	; 0x50
 800a600:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 800a604:	9309      	str	r3, [sp, #36]	; 0x24
 800a606:	4618      	mov	r0, r3
 800a608:	f99d 30a8 	ldrsb.w	r3, [sp, #168]	; 0xa8
 800a60c:	9302      	str	r3, [sp, #8]
 800a60e:	f99d 30ac 	ldrsb.w	r3, [sp, #172]	; 0xac
 800a612:	f8bd 9080 	ldrh.w	r9, [sp, #128]	; 0x80
 800a616:	9208      	str	r2, [sp, #32]
 800a618:	9303      	str	r3, [sp, #12]
 800a61a:	2900      	cmp	r1, #0
 800a61c:	f000 80b2 	beq.w	800a784 <forward_lite_maxpool_is8os8_scalepos+0x1bc>
 800a620:	2800      	cmp	r0, #0
 800a622:	f000 80af 	beq.w	800a784 <forward_lite_maxpool_is8os8_scalepos+0x1bc>
 800a626:	f1b9 0f00 	cmp.w	r9, #0
 800a62a:	f000 80ab 	beq.w	800a784 <forward_lite_maxpool_is8os8_scalepos+0x1bc>
 800a62e:	fb02 fa09 	mul.w	sl, r2, r9
 800a632:	2300      	movs	r3, #0
 800a634:	9306      	str	r3, [sp, #24]
 800a636:	46d3      	mov	fp, sl
 800a638:	9806      	ldr	r0, [sp, #24]
 800a63a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a63c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a63e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a640:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800a644:	fb00 f303 	mul.w	r3, r0, r3
 800a648:	1a99      	subs	r1, r3, r2
 800a64a:	2900      	cmp	r1, #0
 800a64c:	eba2 0303 	sub.w	r3, r2, r3
 800a650:	bfd8      	it	le
 800a652:	461a      	movle	r2, r3
 800a654:	4423      	add	r3, r4
 800a656:	bfc8      	it	gt
 800a658:	2200      	movgt	r2, #0
 800a65a:	459a      	cmp	sl, r3
 800a65c:	bfa8      	it	ge
 800a65e:	469a      	movge	sl, r3
 800a660:	9b08      	ldr	r3, [sp, #32]
 800a662:	9204      	str	r2, [sp, #16]
 800a664:	4411      	add	r1, r2
 800a666:	fb03 f301 	mul.w	r3, r3, r1
 800a66a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a66e:	fb00 f303 	mul.w	r3, r0, r3
 800a672:	930a      	str	r3, [sp, #40]	; 0x28
 800a674:	2300      	movs	r3, #0
 800a676:	9307      	str	r3, [sp, #28]
 800a678:	465b      	mov	r3, fp
 800a67a:	46d3      	mov	fp, sl
 800a67c:	469a      	mov	sl, r3
 800a67e:	9807      	ldr	r0, [sp, #28]
 800a680:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a682:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a684:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a686:	fb03 f100 	mul.w	r1, r3, r0
 800a68a:	1a8b      	subs	r3, r1, r2
 800a68c:	1a51      	subs	r1, r2, r1
 800a68e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a690:	2b00      	cmp	r3, #0
 800a692:	bfd8      	it	le
 800a694:	460e      	movle	r6, r1
 800a696:	eb03 0102 	add.w	r1, r3, r2
 800a69a:	9a08      	ldr	r2, [sp, #32]
 800a69c:	eba2 0303 	sub.w	r3, r2, r3
 800a6a0:	bfc8      	it	gt
 800a6a2:	2600      	movgt	r6, #0
 800a6a4:	429d      	cmp	r5, r3
 800a6a6:	bfa8      	it	ge
 800a6a8:	461d      	movge	r5, r3
 800a6aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6ac:	4431      	add	r1, r6
 800a6ae:	fb09 3301 	mla	r3, r9, r1, r3
 800a6b2:	9305      	str	r3, [sp, #20]
 800a6b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b6:	eb00 0803 	add.w	r8, r0, r3
 800a6ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6bc:	fb09 3808 	mla	r8, r9, r8, r3
 800a6c0:	f8cd 8004 	str.w	r8, [sp, #4]
 800a6c4:	46d0      	mov	r8, sl
 800a6c6:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 800a6ca:	2700      	movs	r7, #0
 800a6cc:	f8dd c010 	ldr.w	ip, [sp, #16]
 800a6d0:	45dc      	cmp	ip, fp
 800a6d2:	da5f      	bge.n	800a794 <forward_lite_maxpool_is8os8_scalepos+0x1cc>
 800a6d4:	9b05      	ldr	r3, [sp, #20]
 800a6d6:	f06f 047f 	mvn.w	r4, #127	; 0x7f
 800a6da:	eb03 0e07 	add.w	lr, r3, r7
 800a6de:	42ae      	cmp	r6, r5
 800a6e0:	da0a      	bge.n	800a6f8 <forward_lite_maxpool_is8os8_scalepos+0x130>
 800a6e2:	4672      	mov	r2, lr
 800a6e4:	4633      	mov	r3, r6
 800a6e6:	f992 1000 	ldrsb.w	r1, [r2]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	428c      	cmp	r4, r1
 800a6ee:	bfb8      	it	lt
 800a6f0:	460c      	movlt	r4, r1
 800a6f2:	429d      	cmp	r5, r3
 800a6f4:	444a      	add	r2, r9
 800a6f6:	d1f6      	bne.n	800a6e6 <forward_lite_maxpool_is8os8_scalepos+0x11e>
 800a6f8:	f10c 0c01 	add.w	ip, ip, #1
 800a6fc:	45e3      	cmp	fp, ip
 800a6fe:	44c6      	add	lr, r8
 800a700:	d1ed      	bne.n	800a6de <forward_lite_maxpool_is8os8_scalepos+0x116>
 800a702:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a706:	4650      	mov	r0, sl
 800a708:	f7f5 ffe0 	bl	80006cc <__aeabi_fcmpeq>
 800a70c:	b118      	cbz	r0, 800a716 <forward_lite_maxpool_is8os8_scalepos+0x14e>
 800a70e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a712:	4293      	cmp	r3, r2
 800a714:	d03b      	beq.n	800a78e <forward_lite_maxpool_is8os8_scalepos+0x1c6>
 800a716:	9b02      	ldr	r3, [sp, #8]
 800a718:	1ae0      	subs	r0, r4, r3
 800a71a:	f7f5 fdef 	bl	80002fc <__aeabi_i2f>
 800a71e:	4651      	mov	r1, sl
 800a720:	f7f5 fe40 	bl	80003a4 <__aeabi_fmul>
 800a724:	4604      	mov	r4, r0
 800a726:	9803      	ldr	r0, [sp, #12]
 800a728:	f7f5 fde8 	bl	80002fc <__aeabi_i2f>
 800a72c:	4601      	mov	r1, r0
 800a72e:	4620      	mov	r0, r4
 800a730:	f7f5 fd30 	bl	8000194 <__addsf3>
 800a734:	2100      	movs	r1, #0
 800a736:	4604      	mov	r4, r0
 800a738:	f7f5 ffe6 	bl	8000708 <__aeabi_fcmpge>
 800a73c:	b328      	cbz	r0, 800a78a <forward_lite_maxpool_is8os8_scalepos+0x1c2>
 800a73e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800a742:	4621      	mov	r1, r4
 800a744:	f7f5 fd26 	bl	8000194 <__addsf3>
 800a748:	f7f5 fff2 	bl	8000730 <__aeabi_f2iz>
 800a74c:	f300 0307 	ssat	r3, #8, r0
 800a750:	9a01      	ldr	r2, [sp, #4]
 800a752:	7013      	strb	r3, [r2, #0]
 800a754:	4613      	mov	r3, r2
 800a756:	3301      	adds	r3, #1
 800a758:	3701      	adds	r7, #1
 800a75a:	9301      	str	r3, [sp, #4]
 800a75c:	b2bb      	uxth	r3, r7
 800a75e:	4599      	cmp	r9, r3
 800a760:	d8b4      	bhi.n	800a6cc <forward_lite_maxpool_is8os8_scalepos+0x104>
 800a762:	9b07      	ldr	r3, [sp, #28]
 800a764:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a766:	3301      	adds	r3, #1
 800a768:	b29b      	uxth	r3, r3
 800a76a:	429a      	cmp	r2, r3
 800a76c:	46c2      	mov	sl, r8
 800a76e:	9307      	str	r3, [sp, #28]
 800a770:	d885      	bhi.n	800a67e <forward_lite_maxpool_is8os8_scalepos+0xb6>
 800a772:	9b06      	ldr	r3, [sp, #24]
 800a774:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a776:	3301      	adds	r3, #1
 800a778:	b29b      	uxth	r3, r3
 800a77a:	429a      	cmp	r2, r3
 800a77c:	46c3      	mov	fp, r8
 800a77e:	9306      	str	r3, [sp, #24]
 800a780:	f63f af5a 	bhi.w	800a638 <forward_lite_maxpool_is8os8_scalepos+0x70>
 800a784:	b017      	add	sp, #92	; 0x5c
 800a786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78a:	4804      	ldr	r0, [pc, #16]	; (800a79c <forward_lite_maxpool_is8os8_scalepos+0x1d4>)
 800a78c:	e7d9      	b.n	800a742 <forward_lite_maxpool_is8os8_scalepos+0x17a>
 800a78e:	9b01      	ldr	r3, [sp, #4]
 800a790:	701c      	strb	r4, [r3, #0]
 800a792:	e7e0      	b.n	800a756 <forward_lite_maxpool_is8os8_scalepos+0x18e>
 800a794:	f06f 047f 	mvn.w	r4, #127	; 0x7f
 800a798:	e7b3      	b.n	800a702 <forward_lite_maxpool_is8os8_scalepos+0x13a>
 800a79a:	bf00      	nop
 800a79c:	befffffc 	.word	0xbefffffc

0800a7a0 <forward_lite_maxpool_is8os8_scaleneg>:
 800a7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a4:	b097      	sub	sp, #92	; 0x5c
 800a7a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a7aa:	930e      	str	r3, [sp, #56]	; 0x38
 800a7ac:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 800a7b0:	9315      	str	r3, [sp, #84]	; 0x54
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 800a7b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7ba:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800a7be:	9310      	str	r3, [sp, #64]	; 0x40
 800a7c0:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800a7c4:	9311      	str	r3, [sp, #68]	; 0x44
 800a7c6:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 800a7ca:	9312      	str	r3, [sp, #72]	; 0x48
 800a7cc:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 800a7d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7d2:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800a7d6:	9314      	str	r3, [sp, #80]	; 0x50
 800a7d8:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 800a7dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f99d 30a8 	ldrsb.w	r3, [sp, #168]	; 0xa8
 800a7e4:	9302      	str	r3, [sp, #8]
 800a7e6:	f99d 30ac 	ldrsb.w	r3, [sp, #172]	; 0xac
 800a7ea:	f8bd 9080 	ldrh.w	r9, [sp, #128]	; 0x80
 800a7ee:	9208      	str	r2, [sp, #32]
 800a7f0:	9303      	str	r3, [sp, #12]
 800a7f2:	2900      	cmp	r1, #0
 800a7f4:	f000 80b1 	beq.w	800a95a <forward_lite_maxpool_is8os8_scaleneg+0x1ba>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	f000 80ae 	beq.w	800a95a <forward_lite_maxpool_is8os8_scaleneg+0x1ba>
 800a7fe:	f1b9 0f00 	cmp.w	r9, #0
 800a802:	f000 80aa 	beq.w	800a95a <forward_lite_maxpool_is8os8_scaleneg+0x1ba>
 800a806:	fb02 fa09 	mul.w	sl, r2, r9
 800a80a:	2300      	movs	r3, #0
 800a80c:	9306      	str	r3, [sp, #24]
 800a80e:	46d3      	mov	fp, sl
 800a810:	9806      	ldr	r0, [sp, #24]
 800a812:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a816:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a818:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800a81c:	fb00 f303 	mul.w	r3, r0, r3
 800a820:	1a99      	subs	r1, r3, r2
 800a822:	2900      	cmp	r1, #0
 800a824:	eba2 0303 	sub.w	r3, r2, r3
 800a828:	bfd8      	it	le
 800a82a:	461a      	movle	r2, r3
 800a82c:	4423      	add	r3, r4
 800a82e:	bfc8      	it	gt
 800a830:	2200      	movgt	r2, #0
 800a832:	459a      	cmp	sl, r3
 800a834:	bfa8      	it	ge
 800a836:	469a      	movge	sl, r3
 800a838:	9b08      	ldr	r3, [sp, #32]
 800a83a:	9204      	str	r2, [sp, #16]
 800a83c:	4411      	add	r1, r2
 800a83e:	fb03 f301 	mul.w	r3, r3, r1
 800a842:	930b      	str	r3, [sp, #44]	; 0x2c
 800a844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a846:	fb00 f303 	mul.w	r3, r0, r3
 800a84a:	930a      	str	r3, [sp, #40]	; 0x28
 800a84c:	2300      	movs	r3, #0
 800a84e:	9307      	str	r3, [sp, #28]
 800a850:	465b      	mov	r3, fp
 800a852:	46d3      	mov	fp, sl
 800a854:	469a      	mov	sl, r3
 800a856:	9807      	ldr	r0, [sp, #28]
 800a858:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a85a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a85c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a85e:	fb03 f100 	mul.w	r1, r3, r0
 800a862:	1a8b      	subs	r3, r1, r2
 800a864:	1a51      	subs	r1, r2, r1
 800a866:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a868:	2b00      	cmp	r3, #0
 800a86a:	bfd8      	it	le
 800a86c:	460e      	movle	r6, r1
 800a86e:	eb03 0102 	add.w	r1, r3, r2
 800a872:	9a08      	ldr	r2, [sp, #32]
 800a874:	eba2 0303 	sub.w	r3, r2, r3
 800a878:	bfc8      	it	gt
 800a87a:	2600      	movgt	r6, #0
 800a87c:	429d      	cmp	r5, r3
 800a87e:	bfa8      	it	ge
 800a880:	461d      	movge	r5, r3
 800a882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a884:	4431      	add	r1, r6
 800a886:	fb09 3301 	mla	r3, r9, r1, r3
 800a88a:	9305      	str	r3, [sp, #20]
 800a88c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a88e:	eb00 0803 	add.w	r8, r0, r3
 800a892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a894:	fb09 3808 	mla	r8, r9, r8, r3
 800a898:	f8cd 8004 	str.w	r8, [sp, #4]
 800a89c:	46d0      	mov	r8, sl
 800a89e:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 800a8a2:	2700      	movs	r7, #0
 800a8a4:	f8dd c010 	ldr.w	ip, [sp, #16]
 800a8a8:	45dc      	cmp	ip, fp
 800a8aa:	da5e      	bge.n	800a96a <forward_lite_maxpool_is8os8_scaleneg+0x1ca>
 800a8ac:	9b05      	ldr	r3, [sp, #20]
 800a8ae:	247f      	movs	r4, #127	; 0x7f
 800a8b0:	eb03 0e07 	add.w	lr, r3, r7
 800a8b4:	42ae      	cmp	r6, r5
 800a8b6:	da0a      	bge.n	800a8ce <forward_lite_maxpool_is8os8_scaleneg+0x12e>
 800a8b8:	4672      	mov	r2, lr
 800a8ba:	4633      	mov	r3, r6
 800a8bc:	f992 1000 	ldrsb.w	r1, [r2]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	428c      	cmp	r4, r1
 800a8c4:	bfa8      	it	ge
 800a8c6:	460c      	movge	r4, r1
 800a8c8:	429d      	cmp	r5, r3
 800a8ca:	444a      	add	r2, r9
 800a8cc:	d1f6      	bne.n	800a8bc <forward_lite_maxpool_is8os8_scaleneg+0x11c>
 800a8ce:	f10c 0c01 	add.w	ip, ip, #1
 800a8d2:	45e3      	cmp	fp, ip
 800a8d4:	44c6      	add	lr, r8
 800a8d6:	d1ed      	bne.n	800a8b4 <forward_lite_maxpool_is8os8_scaleneg+0x114>
 800a8d8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a8dc:	4650      	mov	r0, sl
 800a8de:	f7f5 fef5 	bl	80006cc <__aeabi_fcmpeq>
 800a8e2:	b118      	cbz	r0, 800a8ec <forward_lite_maxpool_is8os8_scaleneg+0x14c>
 800a8e4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d03b      	beq.n	800a964 <forward_lite_maxpool_is8os8_scaleneg+0x1c4>
 800a8ec:	9b02      	ldr	r3, [sp, #8]
 800a8ee:	1ae0      	subs	r0, r4, r3
 800a8f0:	f7f5 fd04 	bl	80002fc <__aeabi_i2f>
 800a8f4:	4651      	mov	r1, sl
 800a8f6:	f7f5 fd55 	bl	80003a4 <__aeabi_fmul>
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	9803      	ldr	r0, [sp, #12]
 800a8fe:	f7f5 fcfd 	bl	80002fc <__aeabi_i2f>
 800a902:	4601      	mov	r1, r0
 800a904:	4620      	mov	r0, r4
 800a906:	f7f5 fc45 	bl	8000194 <__addsf3>
 800a90a:	2100      	movs	r1, #0
 800a90c:	4604      	mov	r4, r0
 800a90e:	f7f5 fefb 	bl	8000708 <__aeabi_fcmpge>
 800a912:	b328      	cbz	r0, 800a960 <forward_lite_maxpool_is8os8_scaleneg+0x1c0>
 800a914:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800a918:	4621      	mov	r1, r4
 800a91a:	f7f5 fc3b 	bl	8000194 <__addsf3>
 800a91e:	f7f5 ff07 	bl	8000730 <__aeabi_f2iz>
 800a922:	f300 0307 	ssat	r3, #8, r0
 800a926:	9a01      	ldr	r2, [sp, #4]
 800a928:	7013      	strb	r3, [r2, #0]
 800a92a:	4613      	mov	r3, r2
 800a92c:	3301      	adds	r3, #1
 800a92e:	3701      	adds	r7, #1
 800a930:	9301      	str	r3, [sp, #4]
 800a932:	b2bb      	uxth	r3, r7
 800a934:	4599      	cmp	r9, r3
 800a936:	d8b5      	bhi.n	800a8a4 <forward_lite_maxpool_is8os8_scaleneg+0x104>
 800a938:	9b07      	ldr	r3, [sp, #28]
 800a93a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a93c:	3301      	adds	r3, #1
 800a93e:	b29b      	uxth	r3, r3
 800a940:	429a      	cmp	r2, r3
 800a942:	46c2      	mov	sl, r8
 800a944:	9307      	str	r3, [sp, #28]
 800a946:	d886      	bhi.n	800a856 <forward_lite_maxpool_is8os8_scaleneg+0xb6>
 800a948:	9b06      	ldr	r3, [sp, #24]
 800a94a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a94c:	3301      	adds	r3, #1
 800a94e:	b29b      	uxth	r3, r3
 800a950:	429a      	cmp	r2, r3
 800a952:	46c3      	mov	fp, r8
 800a954:	9306      	str	r3, [sp, #24]
 800a956:	f63f af5b 	bhi.w	800a810 <forward_lite_maxpool_is8os8_scaleneg+0x70>
 800a95a:	b017      	add	sp, #92	; 0x5c
 800a95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a960:	4803      	ldr	r0, [pc, #12]	; (800a970 <forward_lite_maxpool_is8os8_scaleneg+0x1d0>)
 800a962:	e7d9      	b.n	800a918 <forward_lite_maxpool_is8os8_scaleneg+0x178>
 800a964:	9b01      	ldr	r3, [sp, #4]
 800a966:	701c      	strb	r4, [r3, #0]
 800a968:	e7e0      	b.n	800a92c <forward_lite_maxpool_is8os8_scaleneg+0x18c>
 800a96a:	247f      	movs	r4, #127	; 0x7f
 800a96c:	e7b4      	b.n	800a8d8 <forward_lite_maxpool_is8os8_scaleneg+0x138>
 800a96e:	bf00      	nop
 800a970:	befffffc 	.word	0xbefffffc

0800a974 <align_factor>:
 800a974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a978:	2300      	movs	r3, #0
 800a97a:	460e      	mov	r6, r1
 800a97c:	800b      	strh	r3, [r1, #0]
 800a97e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a982:	4604      	mov	r4, r0
 800a984:	f7f5 feac 	bl	80006e0 <__aeabi_fcmplt>
 800a988:	bb48      	cbnz	r0, 800a9de <align_factor+0x6a>
 800a98a:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800a98e:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
 800a992:	f04f 577c 	mov.w	r7, #1056964608	; 0x3f000000
 800a996:	f64f 79e0 	movw	r9, #65504	; 0xffe0
 800a99a:	e007      	b.n	800a9ac <align_factor+0x38>
 800a99c:	f7f5 fd02 	bl	80003a4 <__aeabi_fmul>
 800a9a0:	1e6b      	subs	r3, r5, #1
 800a9a2:	8035      	strh	r5, [r6, #0]
 800a9a4:	b29d      	uxth	r5, r3
 800a9a6:	454d      	cmp	r5, r9
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	d034      	beq.n	800aa16 <align_factor+0xa2>
 800a9ac:	4641      	mov	r1, r8
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f7f5 feb4 	bl	800071c <__aeabi_fcmpgt>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1ee      	bne.n	800a99c <align_factor+0x28>
 800a9be:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f7f5 fcee 	bl	80003a4 <__aeabi_fmul>
 800a9c8:	f7f5 fef0 	bl	80007ac <__aeabi_f2lz>
 800a9cc:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800a9d0:	bf1c      	itt	ne
 800a9d2:	f06f 4000 	mvnne.w	r0, #2147483648	; 0x80000000
 800a9d6:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 800a9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9de:	2100      	movs	r1, #0
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f7f5 fe9b 	bl	800071c <__aeabi_fcmpgt>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	d0cf      	beq.n	800a98a <align_factor+0x16>
 800a9ea:	f04f 577c 	mov.w	r7, #1056964608	; 0x3f000000
 800a9ee:	2501      	movs	r5, #1
 800a9f0:	e007      	b.n	800aa02 <align_factor+0x8e>
 800a9f2:	f7f5 fbcf 	bl	8000194 <__addsf3>
 800a9f6:	1c6b      	adds	r3, r5, #1
 800a9f8:	8035      	strh	r5, [r6, #0]
 800a9fa:	b29d      	uxth	r5, r3
 800a9fc:	2d21      	cmp	r5, #33	; 0x21
 800a9fe:	4604      	mov	r4, r0
 800aa00:	d011      	beq.n	800aa26 <align_factor+0xb2>
 800aa02:	4639      	mov	r1, r7
 800aa04:	4620      	mov	r0, r4
 800aa06:	f7f5 fe6b 	bl	80006e0 <__aeabi_fcmplt>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	4620      	mov	r0, r4
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1ee      	bne.n	800a9f2 <align_factor+0x7e>
 800aa14:	e7d3      	b.n	800a9be <align_factor+0x4a>
 800aa16:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 800aa1a:	4601      	mov	r1, r0
 800aa1c:	8033      	strh	r3, [r6, #0]
 800aa1e:	f7f5 fbb9 	bl	8000194 <__addsf3>
 800aa22:	4604      	mov	r4, r0
 800aa24:	e7cb      	b.n	800a9be <align_factor+0x4a>
 800aa26:	2000      	movs	r0, #0
 800aa28:	8030      	strh	r0, [r6, #0]
 800aa2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa2e:	bf00      	nop

0800aa30 <align_factor_ch>:
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d03b      	beq.n	800aaac <align_factor_ch+0x7c>
 800aa34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa38:	4606      	mov	r6, r0
 800aa3a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800aa3e:	461d      	mov	r5, r3
 800aa40:	4614      	mov	r4, r2
 800aa42:	f7f5 fd63 	bl	800050c <__aeabi_fdiv>
 800aa46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa48:	f1a3 0a02 	sub.w	sl, r3, #2
 800aa4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa4e:	4607      	mov	r7, r0
 800aa50:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800aa54:	f1a3 0904 	sub.w	r9, r3, #4
 800aa58:	f04f 0800 	mov.w	r8, #0
 800aa5c:	f854 bb04 	ldr.w	fp, [r4], #4
 800aa60:	4631      	mov	r1, r6
 800aa62:	4638      	mov	r0, r7
 800aa64:	f7f5 fc9e 	bl	80003a4 <__aeabi_fmul>
 800aa68:	4659      	mov	r1, fp
 800aa6a:	f7f5 fc9b 	bl	80003a4 <__aeabi_fmul>
 800aa6e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800aa72:	f3c0 0316 	ubfx	r3, r0, #0, #23
 800aa76:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	f1c2 027e 	rsb	r2, r2, #126	; 0x7e
 800aa80:	bfb8      	it	lt
 800aa82:	425b      	neglt	r3, r3
 800aa84:	2a1f      	cmp	r2, #31
 800aa86:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 800aa8a:	dc07      	bgt.n	800aa9c <align_factor_ch+0x6c>
 800aa8c:	42a5      	cmp	r5, r4
 800aa8e:	f82a 2f02 	strh.w	r2, [sl, #2]!
 800aa92:	f849 3f04 	str.w	r3, [r9, #4]!
 800aa96:	d1e1      	bne.n	800aa5c <align_factor_ch+0x2c>
 800aa98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa9c:	42a5      	cmp	r5, r4
 800aa9e:	f82a 8f02 	strh.w	r8, [sl, #2]!
 800aaa2:	f849 8f04 	str.w	r8, [r9, #4]!
 800aaa6:	d1d9      	bne.n	800aa5c <align_factor_ch+0x2c>
 800aaa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop

0800aab0 <st_sssa8_ch_convolve_rank1upd>:
 800aab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab4:	b085      	sub	sp, #20
 800aab6:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800aaba:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 800aabe:	fb13 f304 	smulbb	r3, r3, r4
 800aac2:	fb13 f500 	smulbb	r5, r3, r0
 800aac6:	460c      	mov	r4, r1
 800aac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aaca:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aacc:	2a00      	cmp	r2, #0
 800aace:	d073      	beq.n	800abb8 <st_sssa8_ch_convolve_rank1upd+0x108>
 800aad0:	b2ad      	uxth	r5, r5
 800aad2:	ea4f 0895 	mov.w	r8, r5, lsr #2
 800aad6:	f1a3 0904 	sub.w	r9, r3, #4
 800aada:	f1a8 0381 	sub.w	r3, r8, #129	; 0x81
 800aade:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800aae2:	ebc3 2043 	rsb	r0, r3, r3, lsl #9
 800aae6:	f1a8 0780 	sub.w	r7, r8, #128	; 0x80
 800aaea:	eb07 17c0 	add.w	r7, r7, r0, lsl #7
 800aaee:	0258      	lsls	r0, r3, #9
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	025b      	lsls	r3, r3, #9
 800aaf4:	f005 0503 	and.w	r5, r5, #3
 800aaf8:	9301      	str	r3, [sp, #4]
 800aafa:	f500 6380 	add.w	r3, r0, #1024	; 0x400
 800aafe:	9303      	str	r3, [sp, #12]
 800ab00:	1e6b      	subs	r3, r5, #1
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 800ab0a:	b2bf      	uxth	r7, r7
 800ab0c:	eb01 0a82 	add.w	sl, r1, r2, lsl #2
 800ab10:	9302      	str	r3, [sp, #8]
 800ab12:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 800ab16:	d954      	bls.n	800abc2 <st_sssa8_ch_convolve_rank1upd+0x112>
 800ab18:	9b03      	ldr	r3, [sp, #12]
 800ab1a:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800ab1e:	eb04 0c03 	add.w	ip, r4, r3
 800ab22:	2600      	movs	r6, #0
 800ab24:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f851 3b04 	ldr.w	r3, [r1], #4
 800ab2e:	fa2f fe83 	sxtb16	lr, r3
 800ab32:	4281      	cmp	r1, r0
 800ab34:	ea4f 2333 	mov.w	r3, r3, ror #8
 800ab38:	fa92 f21e 	qadd16	r2, r2, lr
 800ab3c:	fa2f f383 	sxtb16	r3, r3
 800ab40:	fa92 f213 	qadd16	r2, r2, r3
 800ab44:	d1f1      	bne.n	800ab2a <st_sssa8_ch_convolve_rank1upd+0x7a>
 800ab46:	f501 7000 	add.w	r0, r1, #512	; 0x200
 800ab4a:	b213      	sxth	r3, r2
 800ab4c:	eb03 4222 	add.w	r2, r3, r2, asr #16
 800ab50:	4560      	cmp	r0, ip
 800ab52:	4416      	add	r6, r2
 800ab54:	d1e6      	bne.n	800ab24 <st_sssa8_ch_convolve_rank1upd+0x74>
 800ab56:	9b01      	ldr	r3, [sp, #4]
 800ab58:	18e1      	adds	r1, r4, r3
 800ab5a:	463c      	mov	r4, r7
 800ab5c:	b37c      	cbz	r4, 800abbe <st_sssa8_ch_convolve_rank1upd+0x10e>
 800ab5e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800ab62:	2200      	movs	r2, #0
 800ab64:	f851 3b04 	ldr.w	r3, [r1], #4
 800ab68:	fa2f f083 	sxtb16	r0, r3
 800ab6c:	428c      	cmp	r4, r1
 800ab6e:	ea4f 2333 	mov.w	r3, r3, ror #8
 800ab72:	fa92 f210 	qadd16	r2, r2, r0
 800ab76:	fa2f f383 	sxtb16	r3, r3
 800ab7a:	fa92 f213 	qadd16	r2, r2, r3
 800ab7e:	d1f1      	bne.n	800ab64 <st_sssa8_ch_convolve_rank1upd+0xb4>
 800ab80:	b213      	sxth	r3, r2
 800ab82:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800ab86:	441e      	add	r6, r3
 800ab88:	b16d      	cbz	r5, 800aba6 <st_sssa8_ch_convolve_rank1upd+0xf6>
 800ab8a:	f994 3000 	ldrsb.w	r3, [r4]
 800ab8e:	441e      	add	r6, r3
 800ab90:	9b00      	ldr	r3, [sp, #0]
 800ab92:	b13b      	cbz	r3, 800aba4 <st_sssa8_ch_convolve_rank1upd+0xf4>
 800ab94:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ab98:	2d02      	cmp	r5, #2
 800ab9a:	441e      	add	r6, r3
 800ab9c:	bf1c      	itt	ne
 800ab9e:	f994 3002 	ldrsbne.w	r3, [r4, #2]
 800aba2:	18f6      	addne	r6, r6, r3
 800aba4:	442c      	add	r4, r5
 800aba6:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800abaa:	fb0b 3616 	mls	r6, fp, r6, r3
 800abae:	f84a 6b04 	str.w	r6, [sl], #4
 800abb2:	9b02      	ldr	r3, [sp, #8]
 800abb4:	459a      	cmp	sl, r3
 800abb6:	d1ac      	bne.n	800ab12 <st_sssa8_ch_convolve_rank1upd+0x62>
 800abb8:	b005      	add	sp, #20
 800abba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abbe:	460c      	mov	r4, r1
 800abc0:	e7e2      	b.n	800ab88 <st_sssa8_ch_convolve_rank1upd+0xd8>
 800abc2:	4621      	mov	r1, r4
 800abc4:	2600      	movs	r6, #0
 800abc6:	4644      	mov	r4, r8
 800abc8:	e7c8      	b.n	800ab5c <st_sssa8_ch_convolve_rank1upd+0xac>
 800abca:	bf00      	nop

0800abcc <st_sssa8_fully_connected>:
 800abcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd0:	b097      	sub	sp, #92	; 0x5c
 800abd2:	460d      	mov	r5, r1
 800abd4:	9313      	str	r3, [sp, #76]	; 0x4c
 800abd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abd8:	9204      	str	r2, [sp, #16]
 800abda:	f9b3 1000 	ldrsh.w	r1, [r3]
 800abde:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800abe0:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 800abe4:	6824      	ldr	r4, [r4, #0]
 800abe6:	9408      	str	r4, [sp, #32]
 800abe8:	1e4b      	subs	r3, r1, #1
 800abea:	b29a      	uxth	r2, r3
 800abec:	2a14      	cmp	r2, #20
 800abee:	930d      	str	r3, [sp, #52]	; 0x34
 800abf0:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 800abf4:	9105      	str	r1, [sp, #20]
 800abf6:	bf9f      	itttt	ls
 800abf8:	2201      	movls	r2, #1
 800abfa:	408b      	lslls	r3, r1
 800abfc:	408a      	lslls	r2, r1
 800abfe:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
 800ac02:	9309      	str	r3, [sp, #36]	; 0x24
 800ac04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f000 81e4 	beq.w	800afd4 <st_sssa8_fully_connected+0x408>
 800ac0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ac0e:	9600      	str	r6, [sp, #0]
 800ac10:	b2b3      	uxth	r3, r6
 800ac12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800ac16:	9e04      	ldr	r6, [sp, #16]
 800ac18:	0851      	lsrs	r1, r2, #1
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	9115      	str	r1, [sp, #84]	; 0x54
 800ac1e:	4632      	mov	r2, r6
 800ac20:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ac22:	f000 fb51 	bl	800b2c8 <st_int8_reordered_no_shift_zero>
 800ac26:	4621      	mov	r1, r4
 800ac28:	2c00      	cmp	r4, #0
 800ac2a:	f000 8149 	beq.w	800aec0 <st_sssa8_fully_connected+0x2f4>
 800ac2e:	4634      	mov	r4, r6
 800ac30:	f1a6 0310 	sub.w	r3, r6, #16
 800ac34:	9e05      	ldr	r6, [sp, #20]
 800ac36:	1e4a      	subs	r2, r1, #1
 800ac38:	2001      	movs	r0, #1
 800ac3a:	1eb1      	subs	r1, r6, #2
 800ac3c:	fa00 f101 	lsl.w	r1, r0, r1
 800ac40:	9112      	str	r1, [sp, #72]	; 0x48
 800ac42:	9924      	ldr	r1, [sp, #144]	; 0x90
 800ac44:	b292      	uxth	r2, r2
 800ac46:	3110      	adds	r1, #16
 800ac48:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ac4c:	920e      	str	r2, [sp, #56]	; 0x38
 800ac4e:	1ee2      	subs	r2, r4, #3
 800ac50:	920f      	str	r2, [sp, #60]	; 0x3c
 800ac52:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ac54:	3208      	adds	r2, #8
 800ac56:	9206      	str	r2, [sp, #24]
 800ac58:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800ac5a:	091b      	lsrs	r3, r3, #4
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	3202      	adds	r2, #2
 800ac60:	9207      	str	r2, [sp, #28]
 800ac62:	011a      	lsls	r2, r3, #4
 800ac64:	920a      	str	r2, [sp, #40]	; 0x28
 800ac66:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ac68:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800ac6c:	9310      	str	r3, [sp, #64]	; 0x40
 800ac6e:	1f23      	subs	r3, r4, #4
 800ac70:	9311      	str	r3, [sp, #68]	; 0x44
 800ac72:	1b83      	subs	r3, r0, r6
 800ac74:	9314      	str	r3, [sp, #80]	; 0x50
 800ac76:	9a06      	ldr	r2, [sp, #24]
 800ac78:	e952 3102 	ldrd	r3, r1, [r2, #-8]
 800ac7c:	9a04      	ldr	r2, [sp, #16]
 800ac7e:	18ac      	adds	r4, r5, r2
 800ac80:	2a0f      	cmp	r2, #15
 800ac82:	9403      	str	r4, [sp, #12]
 800ac84:	f340 81a0 	ble.w	800afc8 <st_sssa8_fully_connected+0x3fc>
 800ac88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac8a:	18ae      	adds	r6, r5, r2
 800ac8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ac8e:	460f      	mov	r7, r1
 800ac90:	f8d4 e000 	ldr.w	lr, [r4]
 800ac94:	6828      	ldr	r0, [r5, #0]
 800ac96:	fa2f fc8e 	sxtb16	ip, lr
 800ac9a:	ea4f 2130 	mov.w	r1, r0, ror #8
 800ac9e:	ea4f 283e 	mov.w	r8, lr, ror #8
 800aca2:	fa2f f080 	sxtb16	r0, r0
 800aca6:	f8d2 e000 	ldr.w	lr, [r2]
 800acaa:	fa2f f181 	sxtb16	r1, r1
 800acae:	fa2f f888 	sxtb16	r8, r8
 800acb2:	fb2e 3300 	smlad	r3, lr, r0, r3
 800acb6:	fb2e 7e0c 	smlad	lr, lr, ip, r7
 800acba:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800acbe:	fb2c 3301 	smlad	r3, ip, r1, r3
 800acc2:	fb2c e808 	smlad	r8, ip, r8, lr
 800acc6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800acca:	686f      	ldr	r7, [r5, #4]
 800accc:	fa2f f08c 	sxtb16	r0, ip
 800acd0:	ea4f 2137 	mov.w	r1, r7, ror #8
 800acd4:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800acd8:	fa2f f787 	sxtb16	r7, r7
 800acdc:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800ace0:	fa2f f181 	sxtb16	r1, r1
 800ace4:	fa2f fe8e 	sxtb16	lr, lr
 800ace8:	fb2c 3707 	smlad	r7, ip, r7, r3
 800acec:	fb2c 8c00 	smlad	ip, ip, r0, r8
 800acf0:	68d0      	ldr	r0, [r2, #12]
 800acf2:	fb20 7701 	smlad	r7, r0, r1, r7
 800acf6:	fb20 ce0e 	smlad	lr, r0, lr, ip
 800acfa:	68a0      	ldr	r0, [r4, #8]
 800acfc:	68a9      	ldr	r1, [r5, #8]
 800acfe:	fa2f fc80 	sxtb16	ip, r0
 800ad02:	ea4f 2331 	mov.w	r3, r1, ror #8
 800ad06:	ea4f 2a30 	mov.w	sl, r0, ror #8
 800ad0a:	fa2f f181 	sxtb16	r1, r1
 800ad0e:	6910      	ldr	r0, [r2, #16]
 800ad10:	fa2f f383 	sxtb16	r3, r3
 800ad14:	fa2f fa8a 	sxtb16	sl, sl
 800ad18:	fb20 7101 	smlad	r1, r0, r1, r7
 800ad1c:	fb20 e00c 	smlad	r0, r0, ip, lr
 800ad20:	6957      	ldr	r7, [r2, #20]
 800ad22:	fb27 1103 	smlad	r1, r7, r3, r1
 800ad26:	fb27 0a0a 	smlad	sl, r7, sl, r0
 800ad2a:	68e7      	ldr	r7, [r4, #12]
 800ad2c:	68e8      	ldr	r0, [r5, #12]
 800ad2e:	fa2f fc87 	sxtb16	ip, r7
 800ad32:	ea4f 2930 	mov.w	r9, r0, ror #8
 800ad36:	ea4f 2837 	mov.w	r8, r7, ror #8
 800ad3a:	3510      	adds	r5, #16
 800ad3c:	6997      	ldr	r7, [r2, #24]
 800ad3e:	fa2f f380 	sxtb16	r3, r0
 800ad42:	3410      	adds	r4, #16
 800ad44:	fa2f f989 	sxtb16	r9, r9
 800ad48:	fa2f f888 	sxtb16	r8, r8
 800ad4c:	fb27 1303 	smlad	r3, r7, r3, r1
 800ad50:	fb27 a70c 	smlad	r7, r7, ip, sl
 800ad54:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 800ad58:	3220      	adds	r2, #32
 800ad5a:	fb2e 3309 	smlad	r3, lr, r9, r3
 800ad5e:	fb2e 7708 	smlad	r7, lr, r8, r7
 800ad62:	42b5      	cmp	r5, r6
 800ad64:	d194      	bne.n	800ac90 <st_sssa8_fully_connected+0xc4>
 800ad66:	9a03      	ldr	r2, [sp, #12]
 800ad68:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800ad6c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800ad70:	444a      	add	r2, r9
 800ad72:	4639      	mov	r1, r7
 800ad74:	9203      	str	r2, [sp, #12]
 800ad76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad78:	4591      	cmp	r9, r2
 800ad7a:	f280 8123 	bge.w	800afc4 <st_sssa8_fully_connected+0x3f8>
 800ad7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ad80:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ad84:	eba2 0a09 	sub.w	sl, r2, r9
 800ad88:	ea4f 029a 	mov.w	r2, sl, lsr #2
 800ad8c:	f102 0a01 	add.w	sl, r2, #1
 800ad90:	920c      	str	r2, [sp, #48]	; 0x30
 800ad92:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800ad96:	920b      	str	r2, [sp, #44]	; 0x2c
 800ad98:	eb06 048a 	add.w	r4, r6, sl, lsl #2
 800ad9c:	465f      	mov	r7, fp
 800ad9e:	f858 2b04 	ldr.w	r2, [r8], #4
 800ada2:	f856 eb04 	ldr.w	lr, [r6], #4
 800ada6:	fa2f f082 	sxtb16	r0, r2
 800adaa:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 800adae:	ea4f 2532 	mov.w	r5, r2, ror #8
 800adb2:	fa2f fe8e 	sxtb16	lr, lr
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	fa2f fc8c 	sxtb16	ip, ip
 800adbc:	fa2f f585 	sxtb16	r5, r5
 800adc0:	fb22 330e 	smlad	r3, r2, lr, r3
 800adc4:	fb22 1200 	smlad	r2, r2, r0, r1
 800adc8:	6879      	ldr	r1, [r7, #4]
 800adca:	3708      	adds	r7, #8
 800adcc:	fb21 330c 	smlad	r3, r1, ip, r3
 800add0:	fb21 2105 	smlad	r1, r1, r5, r2
 800add4:	42a6      	cmp	r6, r4
 800add6:	d1e2      	bne.n	800ad9e <st_sssa8_fully_connected+0x1d2>
 800add8:	9a03      	ldr	r2, [sp, #12]
 800adda:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800addc:	4402      	add	r2, r0
 800adde:	9203      	str	r2, [sp, #12]
 800ade0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ade2:	f109 0904 	add.w	r9, r9, #4
 800ade6:	eb0b 0bca 	add.w	fp, fp, sl, lsl #3
 800adea:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800adee:	9d04      	ldr	r5, [sp, #16]
 800adf0:	454d      	cmp	r5, r9
 800adf2:	dd38      	ble.n	800ae66 <st_sssa8_fully_connected+0x29a>
 800adf4:	f9bb 2000 	ldrsh.w	r2, [fp]
 800adf8:	f994 0000 	ldrsb.w	r0, [r4]
 800adfc:	9e03      	ldr	r6, [sp, #12]
 800adfe:	fb12 3300 	smlabb	r3, r2, r0, r3
 800ae02:	f996 0000 	ldrsb.w	r0, [r6]
 800ae06:	fb12 1100 	smlabb	r1, r2, r0, r1
 800ae0a:	f109 0201 	add.w	r2, r9, #1
 800ae0e:	42aa      	cmp	r2, r5
 800ae10:	da25      	bge.n	800ae5e <st_sssa8_fully_connected+0x292>
 800ae12:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 800ae16:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ae1a:	fb12 3300 	smlabb	r3, r2, r0, r3
 800ae1e:	f996 0001 	ldrsb.w	r0, [r6, #1]
 800ae22:	fb12 1100 	smlabb	r1, r2, r0, r1
 800ae26:	f109 0202 	add.w	r2, r9, #2
 800ae2a:	42aa      	cmp	r2, r5
 800ae2c:	da17      	bge.n	800ae5e <st_sssa8_fully_connected+0x292>
 800ae2e:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800ae32:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800ae36:	fb12 3300 	smlabb	r3, r2, r0, r3
 800ae3a:	f996 0002 	ldrsb.w	r0, [r6, #2]
 800ae3e:	fb12 1100 	smlabb	r1, r2, r0, r1
 800ae42:	f109 0203 	add.w	r2, r9, #3
 800ae46:	4295      	cmp	r5, r2
 800ae48:	dd09      	ble.n	800ae5e <st_sssa8_fully_connected+0x292>
 800ae4a:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 800ae4e:	f996 0003 	ldrsb.w	r0, [r6, #3]
 800ae52:	fb12 1100 	smlabb	r1, r2, r0, r1
 800ae56:	f994 0003 	ldrsb.w	r0, [r4, #3]
 800ae5a:	fb12 3300 	smlabb	r3, r2, r0, r3
 800ae5e:	9a04      	ldr	r2, [sp, #16]
 800ae60:	eba2 0909 	sub.w	r9, r2, r9
 800ae64:	444c      	add	r4, r9
 800ae66:	9a05      	ldr	r2, [sp, #20]
 800ae68:	2a15      	cmp	r2, #21
 800ae6a:	dd7b      	ble.n	800af64 <st_sssa8_fully_connected+0x398>
 800ae6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae6e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ae70:	9808      	ldr	r0, [sp, #32]
 800ae72:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800ae74:	fb53 5300 	smmla	r3, r3, r0, r5
 800ae78:	4113      	asrs	r3, r2
 800ae7a:	4433      	add	r3, r6
 800ae7c:	fb51 5100 	smmla	r1, r1, r0, r5
 800ae80:	f303 0307 	ssat	r3, #8, r3
 800ae84:	9807      	ldr	r0, [sp, #28]
 800ae86:	4111      	asrs	r1, r2
 800ae88:	f800 3c02 	strb.w	r3, [r0, #-2]
 800ae8c:	198b      	adds	r3, r1, r6
 800ae8e:	f303 0307 	ssat	r3, #8, r3
 800ae92:	f800 3c01 	strb.w	r3, [r0, #-1]
 800ae96:	9a04      	ldr	r2, [sp, #16]
 800ae98:	9b06      	ldr	r3, [sp, #24]
 800ae9a:	18a5      	adds	r5, r4, r2
 800ae9c:	9a07      	ldr	r2, [sp, #28]
 800ae9e:	3202      	adds	r2, #2
 800aea0:	9207      	str	r2, [sp, #28]
 800aea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aea4:	3308      	adds	r3, #8
 800aea6:	4293      	cmp	r3, r2
 800aea8:	9306      	str	r3, [sp, #24]
 800aeaa:	f47f aee4 	bne.w	800ac76 <st_sssa8_fully_connected+0xaa>
 800aeae:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800aeb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aeb2:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800aeb6:	9225      	str	r2, [sp, #148]	; 0x94
 800aeb8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aeba:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aebe:	9324      	str	r3, [sp, #144]	; 0x90
 800aec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aec2:	07db      	lsls	r3, r3, #31
 800aec4:	d54a      	bpl.n	800af5c <st_sssa8_fully_connected+0x390>
 800aec6:	9a04      	ldr	r2, [sp, #16]
 800aec8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aeca:	0897      	lsrs	r7, r2, #2
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f000 8172 	beq.w	800b1b6 <st_sssa8_fully_connected+0x5ea>
 800aed2:	9826      	ldr	r0, [sp, #152]	; 0x98
 800aed4:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 800aed8:	f855 2b04 	ldr.w	r2, [r5], #4
 800aedc:	6804      	ldr	r4, [r0, #0]
 800aede:	ea4f 2132 	mov.w	r1, r2, ror #8
 800aee2:	fa2f f282 	sxtb16	r2, r2
 800aee6:	fa2f f181 	sxtb16	r1, r1
 800aeea:	fb24 3202 	smlad	r2, r4, r2, r3
 800aeee:	6843      	ldr	r3, [r0, #4]
 800aef0:	3008      	adds	r0, #8
 800aef2:	fb23 2301 	smlad	r3, r3, r1, r2
 800aef6:	42b5      	cmp	r5, r6
 800aef8:	d1ee      	bne.n	800aed8 <st_sssa8_fully_connected+0x30c>
 800aefa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aefc:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800af00:	9226      	str	r2, [sp, #152]	; 0x98
 800af02:	9a04      	ldr	r2, [sp, #16]
 800af04:	f012 0203 	ands.w	r2, r2, #3
 800af08:	d016      	beq.n	800af38 <st_sssa8_fully_connected+0x36c>
 800af0a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800af0c:	f996 1000 	ldrsb.w	r1, [r6]
 800af10:	8800      	ldrh	r0, [r0, #0]
 800af12:	3a01      	subs	r2, #1
 800af14:	b292      	uxth	r2, r2
 800af16:	fb10 3301 	smlabb	r3, r0, r1, r3
 800af1a:	b16a      	cbz	r2, 800af38 <st_sssa8_fully_connected+0x36c>
 800af1c:	9826      	ldr	r0, [sp, #152]	; 0x98
 800af1e:	f996 1001 	ldrsb.w	r1, [r6, #1]
 800af22:	8840      	ldrh	r0, [r0, #2]
 800af24:	2a01      	cmp	r2, #1
 800af26:	fb10 3301 	smlabb	r3, r0, r1, r3
 800af2a:	d005      	beq.n	800af38 <st_sssa8_fully_connected+0x36c>
 800af2c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800af2e:	f996 2002 	ldrsb.w	r2, [r6, #2]
 800af32:	8889      	ldrh	r1, [r1, #4]
 800af34:	fb11 3302 	smlabb	r3, r1, r2, r3
 800af38:	9a05      	ldr	r2, [sp, #20]
 800af3a:	2a15      	cmp	r2, #21
 800af3c:	f340 8119 	ble.w	800b172 <st_sssa8_fully_connected+0x5a6>
 800af40:	1e91      	subs	r1, r2, #2
 800af42:	2201      	movs	r2, #1
 800af44:	408a      	lsls	r2, r1
 800af46:	9908      	ldr	r1, [sp, #32]
 800af48:	fb53 2301 	smmla	r3, r3, r1, r2
 800af4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af4e:	4113      	asrs	r3, r2
 800af50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af52:	4413      	add	r3, r2
 800af54:	f303 0307 	ssat	r3, #8, r3
 800af58:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800af5a:	7013      	strb	r3, [r2, #0]
 800af5c:	2000      	movs	r0, #0
 800af5e:	b017      	add	sp, #92	; 0x5c
 800af60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af64:	2a00      	cmp	r2, #0
 800af66:	dd13      	ble.n	800af90 <st_sssa8_fully_connected+0x3c4>
 800af68:	e9dd 0508 	ldrd	r0, r5, [sp, #32]
 800af6c:	005b      	lsls	r3, r3, #1
 800af6e:	0049      	lsls	r1, r1, #1
 800af70:	fb53 5300 	smmla	r3, r3, r0, r5
 800af74:	fb51 5100 	smmla	r1, r1, r0, r5
 800af78:	4113      	asrs	r3, r2
 800af7a:	f303 0307 	ssat	r3, #8, r3
 800af7e:	9807      	ldr	r0, [sp, #28]
 800af80:	4111      	asrs	r1, r2
 800af82:	f800 3c02 	strb.w	r3, [r0, #-2]
 800af86:	f301 0107 	ssat	r1, #8, r1
 800af8a:	f800 1c01 	strb.w	r1, [r0, #-1]
 800af8e:	e782      	b.n	800ae96 <st_sssa8_fully_connected+0x2ca>
 800af90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af92:	4093      	lsls	r3, r2
 800af94:	f303 031f 	ssat	r3, #32, r3
 800af98:	9808      	ldr	r0, [sp, #32]
 800af9a:	fb53 f310 	smmulr	r3, r3, r0
 800af9e:	fa01 f202 	lsl.w	r2, r1, r2
 800afa2:	f302 021f 	ssat	r2, #32, r2
 800afa6:	fb52 f210 	smmulr	r2, r2, r0
 800afaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afac:	440b      	add	r3, r1
 800afae:	f303 0307 	ssat	r3, #8, r3
 800afb2:	9807      	ldr	r0, [sp, #28]
 800afb4:	440a      	add	r2, r1
 800afb6:	f800 3c02 	strb.w	r3, [r0, #-2]
 800afba:	f302 0207 	ssat	r2, #8, r2
 800afbe:	f800 2c01 	strb.w	r2, [r0, #-1]
 800afc2:	e768      	b.n	800ae96 <st_sssa8_fully_connected+0x2ca>
 800afc4:	4634      	mov	r4, r6
 800afc6:	e712      	b.n	800adee <st_sssa8_fully_connected+0x222>
 800afc8:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 800afcc:	462e      	mov	r6, r5
 800afce:	f04f 0900 	mov.w	r9, #0
 800afd2:	e6d0      	b.n	800ad76 <st_sssa8_fully_connected+0x1aa>
 800afd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800afd6:	4274      	negs	r4, r6
 800afd8:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d0bd      	beq.n	800af5c <st_sssa8_fully_connected+0x390>
 800afe0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800afe2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800afe6:	9905      	ldr	r1, [sp, #20]
 800afe8:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 800afec:	9004      	str	r0, [sp, #16]
 800afee:	3301      	adds	r3, #1
 800aff0:	18d3      	adds	r3, r2, r3
 800aff2:	f1a9 0810 	sub.w	r8, r9, #16
 800aff6:	9303      	str	r3, [sp, #12]
 800aff8:	f102 0e01 	add.w	lr, r2, #1
 800affc:	f028 080f 	bic.w	r8, r8, #15
 800b000:	2201      	movs	r2, #1
 800b002:	1e8b      	subs	r3, r1, #2
 800b004:	fa02 f303 	lsl.w	r3, r2, r3
 800b008:	f108 0810 	add.w	r8, r8, #16
 800b00c:	9307      	str	r3, [sp, #28]
 800b00e:	eb00 0308 	add.w	r3, r0, r8
 800b012:	9306      	str	r3, [sp, #24]
 800b014:	f1b9 0f0f 	cmp.w	r9, #15
 800b018:	eba2 0301 	sub.w	r3, r2, r1
 800b01c:	930a      	str	r3, [sp, #40]	; 0x28
 800b01e:	b236      	sxth	r6, r6
 800b020:	f85a 3b04 	ldr.w	r3, [sl], #4
 800b024:	f340 8081 	ble.w	800b12a <st_sssa8_fully_connected+0x55e>
 800b028:	9804      	ldr	r0, [sp, #16]
 800b02a:	eb05 0c08 	add.w	ip, r5, r8
 800b02e:	462a      	mov	r2, r5
 800b030:	f8d2 b000 	ldr.w	fp, [r2]
 800b034:	6801      	ldr	r1, [r0, #0]
 800b036:	ea4f 273b 	mov.w	r7, fp, ror #8
 800b03a:	ea4f 2531 	mov.w	r5, r1, ror #8
 800b03e:	fa2f fb8b 	sxtb16	fp, fp
 800b042:	fa2f f787 	sxtb16	r7, r7
 800b046:	fa24 f181 	sxtab16	r1, r4, r1
 800b04a:	fa24 f585 	sxtab16	r5, r4, r5
 800b04e:	fb21 330b 	smlad	r3, r1, fp, r3
 800b052:	fb25 3107 	smlad	r1, r5, r7, r3
 800b056:	f8d2 b004 	ldr.w	fp, [r2, #4]
 800b05a:	6843      	ldr	r3, [r0, #4]
 800b05c:	ea4f 273b 	mov.w	r7, fp, ror #8
 800b060:	ea4f 2533 	mov.w	r5, r3, ror #8
 800b064:	fa2f fb8b 	sxtb16	fp, fp
 800b068:	fa2f f787 	sxtb16	r7, r7
 800b06c:	fa24 f383 	sxtab16	r3, r4, r3
 800b070:	fa24 f585 	sxtab16	r5, r4, r5
 800b074:	fb23 110b 	smlad	r1, r3, fp, r1
 800b078:	fb25 1307 	smlad	r3, r5, r7, r1
 800b07c:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800b080:	6885      	ldr	r5, [r0, #8]
 800b082:	ea4f 273b 	mov.w	r7, fp, ror #8
 800b086:	ea4f 2135 	mov.w	r1, r5, ror #8
 800b08a:	fa2f fb8b 	sxtb16	fp, fp
 800b08e:	fa2f f787 	sxtb16	r7, r7
 800b092:	fa24 f585 	sxtab16	r5, r4, r5
 800b096:	fa24 f181 	sxtab16	r1, r4, r1
 800b09a:	fb25 330b 	smlad	r3, r5, fp, r3
 800b09e:	fb21 3507 	smlad	r5, r1, r7, r3
 800b0a2:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800b0a6:	68c3      	ldr	r3, [r0, #12]
 800b0a8:	ea4f 273b 	mov.w	r7, fp, ror #8
 800b0ac:	ea4f 2133 	mov.w	r1, r3, ror #8
 800b0b0:	3210      	adds	r2, #16
 800b0b2:	3010      	adds	r0, #16
 800b0b4:	fa2f fb8b 	sxtb16	fp, fp
 800b0b8:	fa2f f787 	sxtb16	r7, r7
 800b0bc:	fa24 f383 	sxtab16	r3, r4, r3
 800b0c0:	fa24 f181 	sxtab16	r1, r4, r1
 800b0c4:	fb23 530b 	smlad	r3, r3, fp, r5
 800b0c8:	fb21 3307 	smlad	r3, r1, r7, r3
 800b0cc:	4594      	cmp	ip, r2
 800b0ce:	d1af      	bne.n	800b030 <st_sssa8_fully_connected+0x464>
 800b0d0:	4645      	mov	r5, r8
 800b0d2:	45a9      	cmp	r9, r5
 800b0d4:	9f06      	ldr	r7, [sp, #24]
 800b0d6:	dd2d      	ble.n	800b134 <st_sssa8_fully_connected+0x568>
 800b0d8:	eba9 0505 	sub.w	r5, r9, r5
 800b0dc:	4415      	add	r5, r2
 800b0de:	4611      	mov	r1, r2
 800b0e0:	f917 0b01 	ldrsb.w	r0, [r7], #1
 800b0e4:	7809      	ldrb	r1, [r1, #0]
 800b0e6:	3201      	adds	r2, #1
 800b0e8:	b249      	sxtb	r1, r1
 800b0ea:	1b80      	subs	r0, r0, r6
 800b0ec:	42aa      	cmp	r2, r5
 800b0ee:	fb10 3301 	smlabb	r3, r0, r1, r3
 800b0f2:	d1f4      	bne.n	800b0de <st_sssa8_fully_connected+0x512>
 800b0f4:	9a05      	ldr	r2, [sp, #20]
 800b0f6:	2a15      	cmp	r2, #21
 800b0f8:	dd20      	ble.n	800b13c <st_sssa8_fully_connected+0x570>
 800b0fa:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800b0fe:	fb53 1302 	smmla	r3, r3, r2, r1
 800b102:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b104:	4113      	asrs	r3, r2
 800b106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b108:	4413      	add	r3, r2
 800b10a:	f303 0307 	ssat	r3, #8, r3
 800b10e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800b112:	9b03      	ldr	r3, [sp, #12]
 800b114:	f10e 0e01 	add.w	lr, lr, #1
 800b118:	459e      	cmp	lr, r3
 800b11a:	f43f af1f 	beq.w	800af5c <st_sssa8_fully_connected+0x390>
 800b11e:	f1b9 0f0f 	cmp.w	r9, #15
 800b122:	f85a 3b04 	ldr.w	r3, [sl], #4
 800b126:	f73f af7f 	bgt.w	800b028 <st_sssa8_fully_connected+0x45c>
 800b12a:	462a      	mov	r2, r5
 800b12c:	2500      	movs	r5, #0
 800b12e:	45a9      	cmp	r9, r5
 800b130:	9f04      	ldr	r7, [sp, #16]
 800b132:	dcd1      	bgt.n	800b0d8 <st_sssa8_fully_connected+0x50c>
 800b134:	4615      	mov	r5, r2
 800b136:	9a05      	ldr	r2, [sp, #20]
 800b138:	2a15      	cmp	r2, #21
 800b13a:	dcde      	bgt.n	800b0fa <st_sssa8_fully_connected+0x52e>
 800b13c:	2a00      	cmp	r2, #0
 800b13e:	dd0a      	ble.n	800b156 <st_sssa8_fully_connected+0x58a>
 800b140:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 800b144:	005b      	lsls	r3, r3, #1
 800b146:	fb53 0301 	smmla	r3, r3, r1, r0
 800b14a:	4113      	asrs	r3, r2
 800b14c:	f303 0307 	ssat	r3, #8, r3
 800b150:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800b154:	e7dd      	b.n	800b112 <st_sssa8_fully_connected+0x546>
 800b156:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b158:	4093      	lsls	r3, r2
 800b15a:	f303 031f 	ssat	r3, #32, r3
 800b15e:	9a08      	ldr	r2, [sp, #32]
 800b160:	fb53 f312 	smmulr	r3, r3, r2
 800b164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b166:	4413      	add	r3, r2
 800b168:	f303 0307 	ssat	r3, #8, r3
 800b16c:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800b170:	e7cf      	b.n	800b112 <st_sssa8_fully_connected+0x546>
 800b172:	2a00      	cmp	r2, #0
 800b174:	dd0d      	ble.n	800b192 <st_sssa8_fully_connected+0x5c6>
 800b176:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 800b17a:	005b      	lsls	r3, r3, #1
 800b17c:	fb53 0301 	smmla	r3, r3, r1, r0
 800b180:	4113      	asrs	r3, r2
 800b182:	f303 0307 	ssat	r3, #8, r3
 800b186:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b188:	2000      	movs	r0, #0
 800b18a:	7013      	strb	r3, [r2, #0]
 800b18c:	b017      	add	sp, #92	; 0x5c
 800b18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b192:	f1c2 0201 	rsb	r2, r2, #1
 800b196:	4093      	lsls	r3, r2
 800b198:	f303 031f 	ssat	r3, #32, r3
 800b19c:	9a08      	ldr	r2, [sp, #32]
 800b19e:	fb53 f312 	smmulr	r3, r3, r2
 800b1a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1a4:	441a      	add	r2, r3
 800b1a6:	f302 0307 	ssat	r3, #8, r2
 800b1aa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	7013      	strb	r3, [r2, #0]
 800b1b0:	b017      	add	sp, #92	; 0x5c
 800b1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b6:	462e      	mov	r6, r5
 800b1b8:	e6a3      	b.n	800af02 <st_sssa8_fully_connected+0x336>
 800b1ba:	bf00      	nop

0800b1bc <st_int8_copy>:
 800b1bc:	4288      	cmp	r0, r1
 800b1be:	d057      	beq.n	800b270 <st_int8_copy+0xb4>
 800b1c0:	2a00      	cmp	r2, #0
 800b1c2:	d055      	beq.n	800b270 <st_int8_copy+0xb4>
 800b1c4:	4288      	cmp	r0, r1
 800b1c6:	d354      	bcc.n	800b272 <st_int8_copy+0xb6>
 800b1c8:	078b      	lsls	r3, r1, #30
 800b1ca:	d102      	bne.n	800b1d2 <st_int8_copy+0x16>
 800b1cc:	e009      	b.n	800b1e2 <st_int8_copy+0x26>
 800b1ce:	2a00      	cmp	r2, #0
 800b1d0:	d05c      	beq.n	800b28c <st_int8_copy+0xd0>
 800b1d2:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800b1d6:	f801 3b01 	strb.w	r3, [r1], #1
 800b1da:	078b      	lsls	r3, r1, #30
 800b1dc:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800b1e0:	d1f5      	bne.n	800b1ce <st_int8_copy+0x12>
 800b1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e6:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800b1ea:	d068      	beq.n	800b2be <st_int8_copy+0x102>
 800b1ec:	ea41 0300 	orr.w	r3, r1, r0
 800b1f0:	075b      	lsls	r3, r3, #29
 800b1f2:	d14c      	bne.n	800b28e <st_int8_copy+0xd2>
 800b1f4:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d948      	bls.n	800b28e <st_int8_copy+0xd2>
 800b1fc:	f100 0310 	add.w	r3, r0, #16
 800b200:	ea4f 160e 	mov.w	r6, lr, lsl #4
 800b204:	f101 0c10 	add.w	ip, r1, #16
 800b208:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800b20c:	e953 4504 	ldrd	r4, r5, [r3, #-16]
 800b210:	e953 7802 	ldrd	r7, r8, [r3, #-8]
 800b214:	3310      	adds	r3, #16
 800b216:	4573      	cmp	r3, lr
 800b218:	e94c 7802 	strd	r7, r8, [ip, #-8]
 800b21c:	e94c 4504 	strd	r4, r5, [ip, #-16]
 800b220:	f10c 0c10 	add.w	ip, ip, #16
 800b224:	d1f2      	bne.n	800b20c <st_int8_copy+0x50>
 800b226:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800b22a:	4431      	add	r1, r6
 800b22c:	4430      	add	r0, r6
 800b22e:	f002 0203 	and.w	r2, r2, #3
 800b232:	b16b      	cbz	r3, 800b250 <st_int8_copy+0x94>
 800b234:	6804      	ldr	r4, [r0, #0]
 800b236:	600c      	str	r4, [r1, #0]
 800b238:	1e5c      	subs	r4, r3, #1
 800b23a:	d005      	beq.n	800b248 <st_int8_copy+0x8c>
 800b23c:	6845      	ldr	r5, [r0, #4]
 800b23e:	604d      	str	r5, [r1, #4]
 800b240:	2c01      	cmp	r4, #1
 800b242:	bf1c      	itt	ne
 800b244:	6884      	ldrne	r4, [r0, #8]
 800b246:	608c      	strne	r4, [r1, #8]
 800b248:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800b24c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800b250:	b162      	cbz	r2, 800b26c <st_int8_copy+0xb0>
 800b252:	f990 3000 	ldrsb.w	r3, [r0]
 800b256:	700b      	strb	r3, [r1, #0]
 800b258:	3a01      	subs	r2, #1
 800b25a:	d007      	beq.n	800b26c <st_int8_copy+0xb0>
 800b25c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b260:	704b      	strb	r3, [r1, #1]
 800b262:	2a01      	cmp	r2, #1
 800b264:	bf1c      	itt	ne
 800b266:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800b26a:	708b      	strbne	r3, [r1, #2]
 800b26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b270:	4770      	bx	lr
 800b272:	1883      	adds	r3, r0, r2
 800b274:	428b      	cmp	r3, r1
 800b276:	d9a7      	bls.n	800b1c8 <st_int8_copy+0xc>
 800b278:	4283      	cmp	r3, r0
 800b27a:	440a      	add	r2, r1
 800b27c:	d9f8      	bls.n	800b270 <st_int8_copy+0xb4>
 800b27e:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800b282:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800b286:	4283      	cmp	r3, r0
 800b288:	d1f9      	bne.n	800b27e <st_int8_copy+0xc2>
 800b28a:	4770      	bx	lr
 800b28c:	4770      	bx	lr
 800b28e:	ea4f 160e 	mov.w	r6, lr, lsl #4
 800b292:	460b      	mov	r3, r1
 800b294:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800b298:	4604      	mov	r4, r0
 800b29a:	6827      	ldr	r7, [r4, #0]
 800b29c:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800b2a0:	68a5      	ldr	r5, [r4, #8]
 800b2a2:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800b2a6:	f8c3 800c 	str.w	r8, [r3, #12]
 800b2aa:	601f      	str	r7, [r3, #0]
 800b2ac:	f8c3 c004 	str.w	ip, [r3, #4]
 800b2b0:	609d      	str	r5, [r3, #8]
 800b2b2:	3310      	adds	r3, #16
 800b2b4:	459e      	cmp	lr, r3
 800b2b6:	f104 0410 	add.w	r4, r4, #16
 800b2ba:	d1ee      	bne.n	800b29a <st_int8_copy+0xde>
 800b2bc:	e7b3      	b.n	800b226 <st_int8_copy+0x6a>
 800b2be:	0893      	lsrs	r3, r2, #2
 800b2c0:	f002 0203 	and.w	r2, r2, #3
 800b2c4:	e7b5      	b.n	800b232 <st_int8_copy+0x76>
 800b2c6:	bf00      	nop

0800b2c8 <st_int8_reordered_no_shift_zero>:
 800b2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ca:	0897      	lsrs	r7, r2, #2
 800b2cc:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800b2d0:	d02e      	beq.n	800b330 <st_int8_reordered_no_shift_zero+0x68>
 800b2d2:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	f850 cb04 	ldr.w	ip, [r0], #4
 800b2dc:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800b2e0:	fa2f fe8e 	sxtb16	lr, lr
 800b2e4:	fade fe03 	ssub16	lr, lr, r3
 800b2e8:	fa2f fc8c 	sxtb16	ip, ip
 800b2ec:	fadc fc03 	ssub16	ip, ip, r3
 800b2f0:	42a8      	cmp	r0, r5
 800b2f2:	f8c4 c000 	str.w	ip, [r4]
 800b2f6:	f8c4 e004 	str.w	lr, [r4, #4]
 800b2fa:	f104 0408 	add.w	r4, r4, #8
 800b2fe:	d1eb      	bne.n	800b2d8 <st_int8_reordered_no_shift_zero+0x10>
 800b300:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800b304:	f012 0203 	ands.w	r2, r2, #3
 800b308:	d011      	beq.n	800b32e <st_int8_reordered_no_shift_zero+0x66>
 800b30a:	f995 3000 	ldrsb.w	r3, [r5]
 800b30e:	b276      	sxtb	r6, r6
 800b310:	1b9b      	subs	r3, r3, r6
 800b312:	3a01      	subs	r2, #1
 800b314:	800b      	strh	r3, [r1, #0]
 800b316:	d00a      	beq.n	800b32e <st_int8_reordered_no_shift_zero+0x66>
 800b318:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800b31c:	2a01      	cmp	r2, #1
 800b31e:	eba3 0306 	sub.w	r3, r3, r6
 800b322:	804b      	strh	r3, [r1, #2]
 800b324:	d003      	beq.n	800b32e <st_int8_reordered_no_shift_zero+0x66>
 800b326:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800b32a:	1b9e      	subs	r6, r3, r6
 800b32c:	808e      	strh	r6, [r1, #4]
 800b32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b330:	4605      	mov	r5, r0
 800b332:	e7e7      	b.n	800b304 <st_int8_reordered_no_shift_zero+0x3c>

0800b334 <st_int8_to16_no_shift>:
 800b334:	b570      	push	{r4, r5, r6, lr}
 800b336:	f1b2 0410 	subs.w	r4, r2, #16
 800b33a:	f04f 0e00 	mov.w	lr, #0
 800b33e:	d437      	bmi.n	800b3b0 <st_int8_to16_no_shift+0x7c>
 800b340:	f8d0 c000 	ldr.w	ip, [r0]
 800b344:	6843      	ldr	r3, [r0, #4]
 800b346:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800b34a:	fa2f fc8c 	sxtb16	ip, ip
 800b34e:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800b352:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800b356:	fa2f f593 	sxtb16	r5, r3, ror #8
 800b35a:	604e      	str	r6, [r1, #4]
 800b35c:	f8c1 c000 	str.w	ip, [r1]
 800b360:	fa2f f383 	sxtb16	r3, r3
 800b364:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800b368:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800b36c:	60ce      	str	r6, [r1, #12]
 800b36e:	608b      	str	r3, [r1, #8]
 800b370:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800b374:	68c3      	ldr	r3, [r0, #12]
 800b376:	3010      	adds	r0, #16
 800b378:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800b37c:	fa2f fc8c 	sxtb16	ip, ip
 800b380:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800b384:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800b388:	fa2f f593 	sxtb16	r5, r3, ror #8
 800b38c:	f8c1 c010 	str.w	ip, [r1, #16]
 800b390:	614e      	str	r6, [r1, #20]
 800b392:	f10e 0e10 	add.w	lr, lr, #16
 800b396:	3120      	adds	r1, #32
 800b398:	45a6      	cmp	lr, r4
 800b39a:	fa2f f383 	sxtb16	r3, r3
 800b39e:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 800b3a2:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800b3a6:	f841 cc04 	str.w	ip, [r1, #-4]
 800b3aa:	f841 3c08 	str.w	r3, [r1, #-8]
 800b3ae:	ddc7      	ble.n	800b340 <st_int8_to16_no_shift+0xc>
 800b3b0:	1f16      	subs	r6, r2, #4
 800b3b2:	4576      	cmp	r6, lr
 800b3b4:	db12      	blt.n	800b3dc <st_int8_to16_no_shift+0xa8>
 800b3b6:	f850 3b04 	ldr.w	r3, [r0], #4
 800b3ba:	fa2f f493 	sxtb16	r4, r3, ror #8
 800b3be:	3108      	adds	r1, #8
 800b3c0:	f10e 0e04 	add.w	lr, lr, #4
 800b3c4:	45b6      	cmp	lr, r6
 800b3c6:	fa2f f383 	sxtb16	r3, r3
 800b3ca:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 800b3ce:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 800b3d2:	f841 5c04 	str.w	r5, [r1, #-4]
 800b3d6:	f841 3c08 	str.w	r3, [r1, #-8]
 800b3da:	ddec      	ble.n	800b3b6 <st_int8_to16_no_shift+0x82>
 800b3dc:	4572      	cmp	r2, lr
 800b3de:	dd08      	ble.n	800b3f2 <st_int8_to16_no_shift+0xbe>
 800b3e0:	eba2 020e 	sub.w	r2, r2, lr
 800b3e4:	4402      	add	r2, r0
 800b3e6:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800b3ea:	f821 3b02 	strh.w	r3, [r1], #2
 800b3ee:	4290      	cmp	r0, r2
 800b3f0:	d1f9      	bne.n	800b3e6 <st_int8_to16_no_shift+0xb2>
 800b3f2:	bd70      	pop	{r4, r5, r6, pc}

0800b3f4 <st_int8_to16_no_shift_interleaved>:
 800b3f4:	b570      	push	{r4, r5, r6, lr}
 800b3f6:	f1b2 0510 	subs.w	r5, r2, #16
 800b3fa:	f04f 0e00 	mov.w	lr, #0
 800b3fe:	d426      	bmi.n	800b44e <st_int8_to16_no_shift_interleaved+0x5a>
 800b400:	f8d0 c000 	ldr.w	ip, [r0]
 800b404:	6843      	ldr	r3, [r0, #4]
 800b406:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800b40a:	fa2f fc8c 	sxtb16	ip, ip
 800b40e:	fa2f f493 	sxtb16	r4, r3, ror #8
 800b412:	600e      	str	r6, [r1, #0]
 800b414:	f8c1 c004 	str.w	ip, [r1, #4]
 800b418:	608c      	str	r4, [r1, #8]
 800b41a:	fa2f f383 	sxtb16	r3, r3
 800b41e:	60cb      	str	r3, [r1, #12]
 800b420:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800b424:	68c3      	ldr	r3, [r0, #12]
 800b426:	3010      	adds	r0, #16
 800b428:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800b42c:	fa2f fc8c 	sxtb16	ip, ip
 800b430:	fa2f f493 	sxtb16	r4, r3, ror #8
 800b434:	610e      	str	r6, [r1, #16]
 800b436:	f8c1 c014 	str.w	ip, [r1, #20]
 800b43a:	618c      	str	r4, [r1, #24]
 800b43c:	f10e 0e10 	add.w	lr, lr, #16
 800b440:	3120      	adds	r1, #32
 800b442:	45ae      	cmp	lr, r5
 800b444:	fa2f f383 	sxtb16	r3, r3
 800b448:	f841 3c04 	str.w	r3, [r1, #-4]
 800b44c:	ddd8      	ble.n	800b400 <st_int8_to16_no_shift_interleaved+0xc>
 800b44e:	1f14      	subs	r4, r2, #4
 800b450:	4574      	cmp	r4, lr
 800b452:	db10      	blt.n	800b476 <st_int8_to16_no_shift_interleaved+0x82>
 800b454:	ebae 0e00 	sub.w	lr, lr, r0
 800b458:	f850 3b04 	ldr.w	r3, [r0], #4
 800b45c:	fa2f fc93 	sxtb16	ip, r3, ror #8
 800b460:	f8c1 c000 	str.w	ip, [r1]
 800b464:	eb00 020e 	add.w	r2, r0, lr
 800b468:	3108      	adds	r1, #8
 800b46a:	4294      	cmp	r4, r2
 800b46c:	fa2f f383 	sxtb16	r3, r3
 800b470:	f841 3c04 	str.w	r3, [r1, #-4]
 800b474:	daf0      	bge.n	800b458 <st_int8_to16_no_shift_interleaved+0x64>
 800b476:	bd70      	pop	{r4, r5, r6, pc}

0800b478 <st_int8_to16_dual>:
 800b478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b47c:	085f      	lsrs	r7, r3, #1
 800b47e:	4616      	mov	r6, r2
 800b480:	4698      	mov	r8, r3
 800b482:	eb00 0c02 	add.w	ip, r0, r2
 800b486:	f000 80ba 	beq.w	800b5fe <st_int8_to16_dual+0x186>
 800b48a:	f1a2 0510 	sub.w	r5, r2, #16
 800b48e:	1f14      	subs	r4, r2, #4
 800b490:	2d00      	cmp	r5, #0
 800b492:	f04f 0200 	mov.w	r2, #0
 800b496:	db73      	blt.n	800b580 <st_int8_to16_dual+0x108>
 800b498:	f8d0 e000 	ldr.w	lr, [r0]
 800b49c:	f8dc 3000 	ldr.w	r3, [ip]
 800b4a0:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800b4a4:	fa2f fe8e 	sxtb16	lr, lr
 800b4a8:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800b4ac:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800b4b0:	fa2f f993 	sxtb16	r9, r3, ror #8
 800b4b4:	f8c1 e000 	str.w	lr, [r1]
 800b4b8:	f8c1 a008 	str.w	sl, [r1, #8]
 800b4bc:	fa2f f383 	sxtb16	r3, r3
 800b4c0:	eac9 4e23 	pkhtb	lr, r9, r3, asr #16
 800b4c4:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 800b4c8:	f8c1 e00c 	str.w	lr, [r1, #12]
 800b4cc:	604b      	str	r3, [r1, #4]
 800b4ce:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800b4d2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800b4d6:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800b4da:	fa2f fe8e 	sxtb16	lr, lr
 800b4de:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800b4e2:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800b4e6:	fa2f f993 	sxtb16	r9, r3, ror #8
 800b4ea:	f8c1 e010 	str.w	lr, [r1, #16]
 800b4ee:	f8c1 a018 	str.w	sl, [r1, #24]
 800b4f2:	fa2f f383 	sxtb16	r3, r3
 800b4f6:	eac9 4e23 	pkhtb	lr, r9, r3, asr #16
 800b4fa:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 800b4fe:	f8c1 e01c 	str.w	lr, [r1, #28]
 800b502:	614b      	str	r3, [r1, #20]
 800b504:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800b508:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800b50c:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800b510:	fa2f fe8e 	sxtb16	lr, lr
 800b514:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800b518:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800b51c:	fa2f f993 	sxtb16	r9, r3, ror #8
 800b520:	3010      	adds	r0, #16
 800b522:	f8c1 e020 	str.w	lr, [r1, #32]
 800b526:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 800b52a:	fa2f f383 	sxtb16	r3, r3
 800b52e:	eac9 4e23 	pkhtb	lr, r9, r3, asr #16
 800b532:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 800b536:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 800b53a:	624b      	str	r3, [r1, #36]	; 0x24
 800b53c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800b540:	f850 ec04 	ldr.w	lr, [r0, #-4]
 800b544:	f10c 0c10 	add.w	ip, ip, #16
 800b548:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800b54c:	fa2f fe8e 	sxtb16	lr, lr
 800b550:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800b554:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800b558:	fa2f f993 	sxtb16	r9, r3, ror #8
 800b55c:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 800b560:	f8c1 a038 	str.w	sl, [r1, #56]	; 0x38
 800b564:	3210      	adds	r2, #16
 800b566:	3140      	adds	r1, #64	; 0x40
 800b568:	42aa      	cmp	r2, r5
 800b56a:	fa2f f383 	sxtb16	r3, r3
 800b56e:	eac9 4e23 	pkhtb	lr, r9, r3, asr #16
 800b572:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 800b576:	f841 ec04 	str.w	lr, [r1, #-4]
 800b57a:	f841 3c0c 	str.w	r3, [r1, #-12]
 800b57e:	dd8b      	ble.n	800b498 <st_int8_to16_dual+0x20>
 800b580:	4294      	cmp	r4, r2
 800b582:	db1e      	blt.n	800b5c2 <st_int8_to16_dual+0x14a>
 800b584:	f850 3b04 	ldr.w	r3, [r0], #4
 800b588:	f85c eb04 	ldr.w	lr, [ip], #4
 800b58c:	fa2f f993 	sxtb16	r9, r3, ror #8
 800b590:	fa2f f383 	sxtb16	r3, r3
 800b594:	eac9 4a23 	pkhtb	sl, r9, r3, asr #16
 800b598:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
 800b59c:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800b5a0:	600b      	str	r3, [r1, #0]
 800b5a2:	f8c1 a008 	str.w	sl, [r1, #8]
 800b5a6:	3204      	adds	r2, #4
 800b5a8:	3110      	adds	r1, #16
 800b5aa:	42a2      	cmp	r2, r4
 800b5ac:	fa2f fe8e 	sxtb16	lr, lr
 800b5b0:	eac9 432e 	pkhtb	r3, r9, lr, asr #16
 800b5b4:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800b5b8:	f841 3c04 	str.w	r3, [r1, #-4]
 800b5bc:	f841 ec0c 	str.w	lr, [r1, #-12]
 800b5c0:	dde0      	ble.n	800b584 <st_int8_to16_dual+0x10c>
 800b5c2:	4296      	cmp	r6, r2
 800b5c4:	dd41      	ble.n	800b64a <st_int8_to16_dual+0x1d2>
 800b5c6:	1ab2      	subs	r2, r6, r2
 800b5c8:	1d0b      	adds	r3, r1, #4
 800b5ca:	eb00 0a02 	add.w	sl, r0, r2
 800b5ce:	46e6      	mov	lr, ip
 800b5d0:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800b5d4:	f823 9c04 	strh.w	r9, [r3, #-4]
 800b5d8:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 800b5dc:	f823 9c02 	strh.w	r9, [r3, #-2]
 800b5e0:	4550      	cmp	r0, sl
 800b5e2:	f103 0304 	add.w	r3, r3, #4
 800b5e6:	d1f3      	bne.n	800b5d0 <st_int8_to16_dual+0x158>
 800b5e8:	4494      	add	ip, r2
 800b5ea:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b5ee:	3f01      	subs	r7, #1
 800b5f0:	b2bf      	uxth	r7, r7
 800b5f2:	eb0a 0006 	add.w	r0, sl, r6
 800b5f6:	44b4      	add	ip, r6
 800b5f8:	2f00      	cmp	r7, #0
 800b5fa:	f47f af49 	bne.w	800b490 <st_int8_to16_dual+0x18>
 800b5fe:	f018 0f01 	tst.w	r8, #1
 800b602:	d020      	beq.n	800b646 <st_int8_to16_dual+0x1ce>
 800b604:	1f37      	subs	r7, r6, #4
 800b606:	f04f 0200 	mov.w	r2, #0
 800b60a:	d411      	bmi.n	800b630 <st_int8_to16_dual+0x1b8>
 800b60c:	f850 3b04 	ldr.w	r3, [r0], #4
 800b610:	fa2f f493 	sxtb16	r4, r3, ror #8
 800b614:	3108      	adds	r1, #8
 800b616:	3204      	adds	r2, #4
 800b618:	4297      	cmp	r7, r2
 800b61a:	fa2f f383 	sxtb16	r3, r3
 800b61e:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 800b622:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 800b626:	f841 5c04 	str.w	r5, [r1, #-4]
 800b62a:	f841 3c08 	str.w	r3, [r1, #-8]
 800b62e:	daed      	bge.n	800b60c <st_int8_to16_dual+0x194>
 800b630:	4296      	cmp	r6, r2
 800b632:	dd08      	ble.n	800b646 <st_int8_to16_dual+0x1ce>
 800b634:	1ab3      	subs	r3, r6, r2
 800b636:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b63a:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800b63e:	f821 2b02 	strh.w	r2, [r1], #2
 800b642:	428b      	cmp	r3, r1
 800b644:	d1f9      	bne.n	800b63a <st_int8_to16_dual+0x1c2>
 800b646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b64a:	4682      	mov	sl, r0
 800b64c:	e7cf      	b.n	800b5ee <st_int8_to16_dual+0x176>
 800b64e:	bf00      	nop

0800b650 <st_int8_to16_dual_interleaved>:
 800b650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b654:	085f      	lsrs	r7, r3, #1
 800b656:	4616      	mov	r6, r2
 800b658:	4698      	mov	r8, r3
 800b65a:	eb00 0c02 	add.w	ip, r0, r2
 800b65e:	f000 808d 	beq.w	800b77c <st_int8_to16_dual_interleaved+0x12c>
 800b662:	f1a2 0510 	sub.w	r5, r2, #16
 800b666:	1f14      	subs	r4, r2, #4
 800b668:	2d00      	cmp	r5, #0
 800b66a:	f04f 0e00 	mov.w	lr, #0
 800b66e:	db4c      	blt.n	800b70a <st_int8_to16_dual_interleaved+0xba>
 800b670:	6802      	ldr	r2, [r0, #0]
 800b672:	f8dc 3000 	ldr.w	r3, [ip]
 800b676:	fa2f fa92 	sxtb16	sl, r2, ror #8
 800b67a:	fa2f f282 	sxtb16	r2, r2
 800b67e:	fa2f f993 	sxtb16	r9, r3, ror #8
 800b682:	f8c1 a000 	str.w	sl, [r1]
 800b686:	f8c1 9004 	str.w	r9, [r1, #4]
 800b68a:	608a      	str	r2, [r1, #8]
 800b68c:	fa2f f383 	sxtb16	r3, r3
 800b690:	60cb      	str	r3, [r1, #12]
 800b692:	6842      	ldr	r2, [r0, #4]
 800b694:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800b698:	fa2f fa92 	sxtb16	sl, r2, ror #8
 800b69c:	fa2f f282 	sxtb16	r2, r2
 800b6a0:	fa2f f993 	sxtb16	r9, r3, ror #8
 800b6a4:	f8c1 a010 	str.w	sl, [r1, #16]
 800b6a8:	f8c1 9014 	str.w	r9, [r1, #20]
 800b6ac:	618a      	str	r2, [r1, #24]
 800b6ae:	fa2f f383 	sxtb16	r3, r3
 800b6b2:	61cb      	str	r3, [r1, #28]
 800b6b4:	6882      	ldr	r2, [r0, #8]
 800b6b6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800b6ba:	fa2f fa92 	sxtb16	sl, r2, ror #8
 800b6be:	fa2f f282 	sxtb16	r2, r2
 800b6c2:	fa2f f993 	sxtb16	r9, r3, ror #8
 800b6c6:	f8c1 a020 	str.w	sl, [r1, #32]
 800b6ca:	f8c1 9024 	str.w	r9, [r1, #36]	; 0x24
 800b6ce:	628a      	str	r2, [r1, #40]	; 0x28
 800b6d0:	fa2f f383 	sxtb16	r3, r3
 800b6d4:	62cb      	str	r3, [r1, #44]	; 0x2c
 800b6d6:	68c2      	ldr	r2, [r0, #12]
 800b6d8:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800b6dc:	3010      	adds	r0, #16
 800b6de:	f10c 0c10 	add.w	ip, ip, #16
 800b6e2:	fa2f fa92 	sxtb16	sl, r2, ror #8
 800b6e6:	fa2f f282 	sxtb16	r2, r2
 800b6ea:	fa2f f993 	sxtb16	r9, r3, ror #8
 800b6ee:	f8c1 a030 	str.w	sl, [r1, #48]	; 0x30
 800b6f2:	f8c1 9034 	str.w	r9, [r1, #52]	; 0x34
 800b6f6:	638a      	str	r2, [r1, #56]	; 0x38
 800b6f8:	f10e 0e10 	add.w	lr, lr, #16
 800b6fc:	3140      	adds	r1, #64	; 0x40
 800b6fe:	45ae      	cmp	lr, r5
 800b700:	fa2f f383 	sxtb16	r3, r3
 800b704:	f841 3c04 	str.w	r3, [r1, #-4]
 800b708:	ddb2      	ble.n	800b670 <st_int8_to16_dual_interleaved+0x20>
 800b70a:	4574      	cmp	r4, lr
 800b70c:	db17      	blt.n	800b73e <st_int8_to16_dual_interleaved+0xee>
 800b70e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b712:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b716:	fa2f fa92 	sxtb16	sl, r2, ror #8
 800b71a:	fa2f f282 	sxtb16	r2, r2
 800b71e:	fa2f f993 	sxtb16	r9, r3, ror #8
 800b722:	f8c1 a000 	str.w	sl, [r1]
 800b726:	f8c1 9004 	str.w	r9, [r1, #4]
 800b72a:	608a      	str	r2, [r1, #8]
 800b72c:	f10e 0e04 	add.w	lr, lr, #4
 800b730:	3110      	adds	r1, #16
 800b732:	45a6      	cmp	lr, r4
 800b734:	fa2f f383 	sxtb16	r3, r3
 800b738:	f841 3c04 	str.w	r3, [r1, #-4]
 800b73c:	dde7      	ble.n	800b70e <st_int8_to16_dual_interleaved+0xbe>
 800b73e:	4576      	cmp	r6, lr
 800b740:	dd3d      	ble.n	800b7be <st_int8_to16_dual_interleaved+0x16e>
 800b742:	eba6 0e0e 	sub.w	lr, r6, lr
 800b746:	1d0b      	adds	r3, r1, #4
 800b748:	eb00 0a0e 	add.w	sl, r0, lr
 800b74c:	4662      	mov	r2, ip
 800b74e:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800b752:	f823 9c04 	strh.w	r9, [r3, #-4]
 800b756:	f912 9b01 	ldrsb.w	r9, [r2], #1
 800b75a:	f823 9c02 	strh.w	r9, [r3, #-2]
 800b75e:	4550      	cmp	r0, sl
 800b760:	f103 0304 	add.w	r3, r3, #4
 800b764:	d1f3      	bne.n	800b74e <st_int8_to16_dual_interleaved+0xfe>
 800b766:	44f4      	add	ip, lr
 800b768:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800b76c:	3f01      	subs	r7, #1
 800b76e:	b2bf      	uxth	r7, r7
 800b770:	eb0a 0006 	add.w	r0, sl, r6
 800b774:	44b4      	add	ip, r6
 800b776:	2f00      	cmp	r7, #0
 800b778:	f47f af76 	bne.w	800b668 <st_int8_to16_dual_interleaved+0x18>
 800b77c:	f018 0f01 	tst.w	r8, #1
 800b780:	d01b      	beq.n	800b7ba <st_int8_to16_dual_interleaved+0x16a>
 800b782:	1f35      	subs	r5, r6, #4
 800b784:	f04f 0200 	mov.w	r2, #0
 800b788:	d40c      	bmi.n	800b7a4 <st_int8_to16_dual_interleaved+0x154>
 800b78a:	f850 3b04 	ldr.w	r3, [r0], #4
 800b78e:	fa2f f493 	sxtb16	r4, r3, ror #8
 800b792:	600c      	str	r4, [r1, #0]
 800b794:	3204      	adds	r2, #4
 800b796:	3108      	adds	r1, #8
 800b798:	4295      	cmp	r5, r2
 800b79a:	fa2f f383 	sxtb16	r3, r3
 800b79e:	f841 3c04 	str.w	r3, [r1, #-4]
 800b7a2:	daf2      	bge.n	800b78a <st_int8_to16_dual_interleaved+0x13a>
 800b7a4:	4296      	cmp	r6, r2
 800b7a6:	dd08      	ble.n	800b7ba <st_int8_to16_dual_interleaved+0x16a>
 800b7a8:	1ab3      	subs	r3, r6, r2
 800b7aa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b7ae:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800b7b2:	f821 2b02 	strh.w	r2, [r1], #2
 800b7b6:	428b      	cmp	r3, r1
 800b7b8:	d1f9      	bne.n	800b7ae <st_int8_to16_dual_interleaved+0x15e>
 800b7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7be:	4682      	mov	sl, r0
 800b7c0:	e7d4      	b.n	800b76c <st_int8_to16_dual_interleaved+0x11c>
 800b7c2:	bf00      	nop

0800b7c4 <ai_padding_opt_init>:
 800b7c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7c8:	2700      	movs	r7, #0
 800b7ca:	e9c0 7700 	strd	r7, r7, [r0]
 800b7ce:	6087      	str	r7, [r0, #8]
 800b7d0:	690d      	ldr	r5, [r1, #16]
 800b7d2:	9c07      	ldr	r4, [sp, #28]
 800b7d4:	f1c5 0c00 	rsb	ip, r5, #0
 800b7d8:	689d      	ldr	r5, [r3, #8]
 800b7da:	42bd      	cmp	r5, r7
 800b7dc:	463d      	mov	r5, r7
 800b7de:	dd1d      	ble.n	800b81c <ai_padding_opt_init+0x58>
 800b7e0:	463e      	mov	r6, r7
 800b7e2:	46be      	mov	lr, r7
 800b7e4:	e014      	b.n	800b810 <ai_padding_opt_init+0x4c>
 800b7e6:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800b7ea:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800b7ee:	eba8 080c 	sub.w	r8, r8, ip
 800b7f2:	45c8      	cmp	r8, r9
 800b7f4:	bfb5      	itete	lt
 800b7f6:	3501      	addlt	r5, #1
 800b7f8:	3701      	addge	r7, #1
 800b7fa:	6085      	strlt	r5, [r0, #8]
 800b7fc:	6047      	strge	r7, [r0, #4]
 800b7fe:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800b802:	44c4      	add	ip, r8
 800b804:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800b808:	f10e 0e01 	add.w	lr, lr, #1
 800b80c:	45f0      	cmp	r8, lr
 800b80e:	dd06      	ble.n	800b81e <ai_padding_opt_init+0x5a>
 800b810:	f1bc 0f00 	cmp.w	ip, #0
 800b814:	dae7      	bge.n	800b7e6 <ai_padding_opt_init+0x22>
 800b816:	3601      	adds	r6, #1
 800b818:	6006      	str	r6, [r0, #0]
 800b81a:	e7f0      	b.n	800b7fe <ai_padding_opt_init+0x3a>
 800b81c:	463e      	mov	r6, r7
 800b81e:	6145      	str	r5, [r0, #20]
 800b820:	2500      	movs	r5, #0
 800b822:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800b826:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800b82a:	6205      	str	r5, [r0, #32]
 800b82c:	694e      	ldr	r6, [r1, #20]
 800b82e:	f1c6 0c00 	rsb	ip, r6, #0
 800b832:	685e      	ldr	r6, [r3, #4]
 800b834:	42ae      	cmp	r6, r5
 800b836:	dd1c      	ble.n	800b872 <ai_padding_opt_init+0xae>
 800b838:	46ae      	mov	lr, r5
 800b83a:	e00f      	b.n	800b85c <ai_padding_opt_init+0x98>
 800b83c:	6855      	ldr	r5, [r2, #4]
 800b83e:	6866      	ldr	r6, [r4, #4]
 800b840:	eba5 050c 	sub.w	r5, r5, ip
 800b844:	42b5      	cmp	r5, r6
 800b846:	da10      	bge.n	800b86a <ai_padding_opt_init+0xa6>
 800b848:	6a05      	ldr	r5, [r0, #32]
 800b84a:	3501      	adds	r5, #1
 800b84c:	6205      	str	r5, [r0, #32]
 800b84e:	68cd      	ldr	r5, [r1, #12]
 800b850:	44ac      	add	ip, r5
 800b852:	685d      	ldr	r5, [r3, #4]
 800b854:	f10e 0e01 	add.w	lr, lr, #1
 800b858:	4575      	cmp	r5, lr
 800b85a:	dd0a      	ble.n	800b872 <ai_padding_opt_init+0xae>
 800b85c:	f1bc 0f00 	cmp.w	ip, #0
 800b860:	daec      	bge.n	800b83c <ai_padding_opt_init+0x78>
 800b862:	6985      	ldr	r5, [r0, #24]
 800b864:	3501      	adds	r5, #1
 800b866:	6185      	str	r5, [r0, #24]
 800b868:	e7f1      	b.n	800b84e <ai_padding_opt_init+0x8a>
 800b86a:	69c5      	ldr	r5, [r0, #28]
 800b86c:	3501      	adds	r5, #1
 800b86e:	61c5      	str	r5, [r0, #28]
 800b870:	e7ed      	b.n	800b84e <ai_padding_opt_init+0x8a>
 800b872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b876:	bf00      	nop

0800b878 <ai_padding_opt_phase1>:
 800b878:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800b87c:	b923      	cbnz	r3, 800b888 <ai_padding_opt_phase1+0x10>
 800b87e:	b17a      	cbz	r2, 800b8a0 <ai_padding_opt_phase1+0x28>
 800b880:	3a01      	subs	r2, #1
 800b882:	8483      	strh	r3, [r0, #36]	; 0x24
 800b884:	61c2      	str	r2, [r0, #28]
 800b886:	e004      	b.n	800b892 <ai_padding_opt_phase1+0x1a>
 800b888:	b152      	cbz	r2, 800b8a0 <ai_padding_opt_phase1+0x28>
 800b88a:	2201      	movs	r2, #1
 800b88c:	3b01      	subs	r3, #1
 800b88e:	8482      	strh	r2, [r0, #36]	; 0x24
 800b890:	6183      	str	r3, [r0, #24]
 800b892:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800b896:	68c1      	ldr	r1, [r0, #12]
 800b898:	6083      	str	r3, [r0, #8]
 800b89a:	e9c0 1200 	strd	r1, r2, [r0]
 800b89e:	4770      	bx	lr
 800b8a0:	6a03      	ldr	r3, [r0, #32]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	8482      	strh	r2, [r0, #36]	; 0x24
 800b8a8:	6203      	str	r3, [r0, #32]
 800b8aa:	e7f2      	b.n	800b892 <ai_padding_opt_phase1+0x1a>

0800b8ac <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 800b8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b0:	b09b      	sub	sp, #108	; 0x6c
 800b8b2:	4683      	mov	fp, r0
 800b8b4:	f89d 00ac 	ldrb.w	r0, [sp, #172]	; 0xac
 800b8b8:	910c      	str	r1, [sp, #48]	; 0x30
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	460d      	mov	r5, r1
 800b8be:	9925      	ldr	r1, [sp, #148]	; 0x94
 800b8c0:	9317      	str	r3, [sp, #92]	; 0x5c
 800b8c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b8c4:	bf18      	it	ne
 800b8c6:	2301      	movne	r3, #1
 800b8c8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800b8ca:	f8bd 409c 	ldrh.w	r4, [sp, #156]	; 0x9c
 800b8ce:	9203      	str	r2, [sp, #12]
 800b8d0:	fb01 3303 	mla	r3, r1, r3, r3
 800b8d4:	18c3      	adds	r3, r0, r3
 800b8d6:	9302      	str	r3, [sp, #8]
 800b8d8:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800b8dc:	9314      	str	r3, [sp, #80]	; 0x50
 800b8de:	0859      	lsrs	r1, r3, #1
 800b8e0:	9406      	str	r4, [sp, #24]
 800b8e2:	9115      	str	r1, [sp, #84]	; 0x54
 800b8e4:	f000 81c2 	beq.w	800bc6c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c0>
 800b8e8:	1ee0      	subs	r0, r4, #3
 800b8ea:	900d      	str	r0, [sp, #52]	; 0x34
 800b8ec:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800b8ee:	3004      	adds	r0, #4
 800b8f0:	f1a4 0310 	sub.w	r3, r4, #16
 800b8f4:	9001      	str	r0, [sp, #4]
 800b8f6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800b8f8:	091b      	lsrs	r3, r3, #4
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	eb05 0644 	add.w	r6, r5, r4, lsl #1
 800b900:	3008      	adds	r0, #8
 800b902:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b906:	9005      	str	r0, [sp, #20]
 800b908:	920e      	str	r2, [sp, #56]	; 0x38
 800b90a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800b90c:	960f      	str	r6, [sp, #60]	; 0x3c
 800b90e:	eb06 1243 	add.w	r2, r6, r3, lsl #5
 800b912:	9207      	str	r2, [sp, #28]
 800b914:	011a      	lsls	r2, r3, #4
 800b916:	3008      	adds	r0, #8
 800b918:	9212      	str	r2, [sp, #72]	; 0x48
 800b91a:	019a      	lsls	r2, r3, #6
 800b91c:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 800b920:	9004      	str	r0, [sp, #16]
 800b922:	9311      	str	r3, [sp, #68]	; 0x44
 800b924:	00c8      	lsls	r0, r1, #3
 800b926:	1f23      	subs	r3, r4, #4
 800b928:	9016      	str	r0, [sp, #88]	; 0x58
 800b92a:	9210      	str	r2, [sp, #64]	; 0x40
 800b92c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b92e:	46d9      	mov	r9, fp
 800b930:	9903      	ldr	r1, [sp, #12]
 800b932:	9c06      	ldr	r4, [sp, #24]
 800b934:	680b      	ldr	r3, [r1, #0]
 800b936:	9319      	str	r3, [sp, #100]	; 0x64
 800b938:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b93a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b93c:	684a      	ldr	r2, [r1, #4]
 800b93e:	9219      	str	r2, [sp, #100]	; 0x64
 800b940:	3108      	adds	r1, #8
 800b942:	2c0f      	cmp	r4, #15
 800b944:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b946:	9103      	str	r1, [sp, #12]
 800b948:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b94a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b94c:	f340 82cc 	ble.w	800bee8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x63c>
 800b950:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800b952:	9e07      	ldr	r6, [sp, #28]
 800b954:	464c      	mov	r4, r9
 800b956:	f8d7 e000 	ldr.w	lr, [r7]
 800b95a:	f8d5 a000 	ldr.w	sl, [r5]
 800b95e:	f8d4 c000 	ldr.w	ip, [r4]
 800b962:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b966:	fb2c 330e 	smlad	r3, ip, lr, r3
 800b96a:	fb2c 000a 	smlad	r0, ip, sl, r0
 800b96e:	fb28 2e0e 	smlad	lr, r8, lr, r2
 800b972:	fb28 110a 	smlad	r1, r8, sl, r1
 800b976:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800b97a:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800b97e:	68a2      	ldr	r2, [r4, #8]
 800b980:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800b984:	fb22 330c 	smlad	r3, r2, ip, r3
 800b988:	fb22 0008 	smlad	r0, r2, r8, r0
 800b98c:	fb2b ee0c 	smlad	lr, fp, ip, lr
 800b990:	fb2b 1808 	smlad	r8, fp, r8, r1
 800b994:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800b998:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800b99c:	6922      	ldr	r2, [r4, #16]
 800b99e:	f8d4 a014 	ldr.w	sl, [r4, #20]
 800b9a2:	fb22 330c 	smlad	r3, r2, ip, r3
 800b9a6:	fb22 000b 	smlad	r0, r2, fp, r0
 800b9aa:	fb2a ee0c 	smlad	lr, sl, ip, lr
 800b9ae:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 800b9b2:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800b9b6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800b9ba:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800b9be:	69e1      	ldr	r1, [r4, #28]
 800b9c0:	fb28 330c 	smlad	r3, r8, ip, r3
 800b9c4:	fb28 000a 	smlad	r0, r8, sl, r0
 800b9c8:	fb21 ec0c 	smlad	ip, r1, ip, lr
 800b9cc:	fb21 ba0a 	smlad	sl, r1, sl, fp
 800b9d0:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800b9d4:	6929      	ldr	r1, [r5, #16]
 800b9d6:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800b9da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b9dc:	fb28 330e 	smlad	r3, r8, lr, r3
 800b9e0:	fb28 0001 	smlad	r0, r8, r1, r0
 800b9e4:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800b9e8:	fb22 a101 	smlad	r1, r2, r1, sl
 800b9ec:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800b9f0:	f8d5 a014 	ldr.w	sl, [r5, #20]
 800b9f4:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 800b9f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b9fa:	fb28 330e 	smlad	r3, r8, lr, r3
 800b9fe:	fb28 000a 	smlad	r0, r8, sl, r0
 800ba02:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800ba06:	fb22 120a 	smlad	r2, r2, sl, r1
 800ba0a:	f8d7 e018 	ldr.w	lr, [r7, #24]
 800ba0e:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800ba12:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800ba16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba18:	fb28 330e 	smlad	r3, r8, lr, r3
 800ba1c:	fb28 080b 	smlad	r8, r8, fp, r0
 800ba20:	fb21 ce0e 	smlad	lr, r1, lr, ip
 800ba24:	fb21 210b 	smlad	r1, r1, fp, r2
 800ba28:	69fa      	ldr	r2, [r7, #28]
 800ba2a:	f8d5 b01c 	ldr.w	fp, [r5, #28]
 800ba2e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ba30:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 800ba34:	3720      	adds	r7, #32
 800ba36:	3520      	adds	r5, #32
 800ba38:	3440      	adds	r4, #64	; 0x40
 800ba3a:	fb20 3302 	smlad	r3, r0, r2, r3
 800ba3e:	fb20 800b 	smlad	r0, r0, fp, r8
 800ba42:	fb2c e202 	smlad	r2, ip, r2, lr
 800ba46:	fb2c 110b 	smlad	r1, ip, fp, r1
 800ba4a:	42b5      	cmp	r5, r6
 800ba4c:	d183      	bne.n	800b956 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xaa>
 800ba4e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800ba50:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800ba54:	9d07      	ldr	r5, [sp, #28]
 800ba56:	44a1      	add	r9, r4
 800ba58:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ba5a:	9400      	str	r4, [sp, #0]
 800ba5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ba5e:	45a3      	cmp	fp, r4
 800ba60:	f280 824a 	bge.w	800bef8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x64c>
 800ba64:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ba66:	f8dd c000 	ldr.w	ip, [sp]
 800ba6a:	eba4 040b 	sub.w	r4, r4, fp
 800ba6e:	08a4      	lsrs	r4, r4, #2
 800ba70:	940a      	str	r4, [sp, #40]	; 0x28
 800ba72:	3401      	adds	r4, #1
 800ba74:	00e6      	lsls	r6, r4, #3
 800ba76:	9409      	str	r4, [sp, #36]	; 0x24
 800ba78:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 800ba7c:	9608      	str	r6, [sp, #32]
 800ba7e:	464c      	mov	r4, r9
 800ba80:	f8dc e000 	ldr.w	lr, [ip]
 800ba84:	682f      	ldr	r7, [r5, #0]
 800ba86:	f8d4 a000 	ldr.w	sl, [r4]
 800ba8a:	6866      	ldr	r6, [r4, #4]
 800ba8c:	fb2a 330e 	smlad	r3, sl, lr, r3
 800ba90:	fb2a 0007 	smlad	r0, sl, r7, r0
 800ba94:	fb26 220e 	smlad	r2, r6, lr, r2
 800ba98:	fb26 1107 	smlad	r1, r6, r7, r1
 800ba9c:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800baa0:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800baa4:	68a6      	ldr	r6, [r4, #8]
 800baa6:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800baaa:	f10c 0c08 	add.w	ip, ip, #8
 800baae:	3508      	adds	r5, #8
 800bab0:	3410      	adds	r4, #16
 800bab2:	fb26 3307 	smlad	r3, r6, r7, r3
 800bab6:	fb26 000a 	smlad	r0, r6, sl, r0
 800baba:	fb2e 2207 	smlad	r2, lr, r7, r2
 800babe:	fb2e 110a 	smlad	r1, lr, sl, r1
 800bac2:	4545      	cmp	r5, r8
 800bac4:	d1dc      	bne.n	800ba80 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1d4>
 800bac6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bac8:	9d08      	ldr	r5, [sp, #32]
 800baca:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 800bace:	9c00      	ldr	r4, [sp, #0]
 800bad0:	442c      	add	r4, r5
 800bad2:	9400      	str	r4, [sp, #0]
 800bad4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bad6:	f10b 0b04 	add.w	fp, fp, #4
 800bada:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 800bade:	9f06      	ldr	r7, [sp, #24]
 800bae0:	455f      	cmp	r7, fp
 800bae2:	dd52      	ble.n	800bb8a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 800bae4:	f8dd c000 	ldr.w	ip, [sp]
 800bae8:	f9b9 6000 	ldrsh.w	r6, [r9]
 800baec:	f9bc 4000 	ldrsh.w	r4, [ip]
 800baf0:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 800baf4:	fb04 3306 	mla	r3, r4, r6, r3
 800baf8:	fb05 2204 	mla	r2, r5, r4, r2
 800bafc:	f9b8 4000 	ldrsh.w	r4, [r8]
 800bb00:	fb04 0006 	mla	r0, r4, r6, r0
 800bb04:	fb05 1104 	mla	r1, r5, r4, r1
 800bb08:	f10b 0401 	add.w	r4, fp, #1
 800bb0c:	42bc      	cmp	r4, r7
 800bb0e:	da37      	bge.n	800bb80 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d4>
 800bb10:	f9bc 5002 	ldrsh.w	r5, [ip, #2]
 800bb14:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 800bb18:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 800bb1c:	fb05 2204 	mla	r2, r5, r4, r2
 800bb20:	fb05 3306 	mla	r3, r5, r6, r3
 800bb24:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800bb28:	fb05 1104 	mla	r1, r5, r4, r1
 800bb2c:	f10b 0402 	add.w	r4, fp, #2
 800bb30:	42a7      	cmp	r7, r4
 800bb32:	fb06 0005 	mla	r0, r6, r5, r0
 800bb36:	dd23      	ble.n	800bb80 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d4>
 800bb38:	f9bc 5004 	ldrsh.w	r5, [ip, #4]
 800bb3c:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 800bb40:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 800bb44:	fb05 2204 	mla	r2, r5, r4, r2
 800bb48:	fb06 3305 	mla	r3, r6, r5, r3
 800bb4c:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 800bb50:	fb05 1104 	mla	r1, r5, r4, r1
 800bb54:	f10b 0403 	add.w	r4, fp, #3
 800bb58:	42a7      	cmp	r7, r4
 800bb5a:	fb06 0005 	mla	r0, r6, r5, r0
 800bb5e:	dd0f      	ble.n	800bb80 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d4>
 800bb60:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 800bb64:	f9bc 5006 	ldrsh.w	r5, [ip, #6]
 800bb68:	f9b8 6006 	ldrsh.w	r6, [r8, #6]
 800bb6c:	fb04 3305 	mla	r3, r4, r5, r3
 800bb70:	fb04 0006 	mla	r0, r4, r6, r0
 800bb74:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 800bb78:	fb05 2204 	mla	r2, r5, r4, r2
 800bb7c:	fb06 1104 	mla	r1, r6, r4, r1
 800bb80:	9c06      	ldr	r4, [sp, #24]
 800bb82:	eba4 0b0b 	sub.w	fp, r4, fp
 800bb86:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 800bb8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bb8c:	2c00      	cmp	r4, #0
 800bb8e:	f000 80f3 	beq.w	800bd78 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4cc>
 800bb92:	9c01      	ldr	r4, [sp, #4]
 800bb94:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 800bb98:	2c15      	cmp	r4, #21
 800bb9a:	f340 814e 	ble.w	800be3a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x58e>
 800bb9e:	f8dd c010 	ldr.w	ip, [sp, #16]
 800bba2:	f8dd e014 	ldr.w	lr, [sp, #20]
 800bba6:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800bbaa:	1ea7      	subs	r7, r4, #2
 800bbac:	2501      	movs	r5, #1
 800bbae:	3c01      	subs	r4, #1
 800bbb0:	fa05 f707 	lsl.w	r7, r5, r7
 800bbb4:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 800bbb8:	fb53 7305 	smmla	r3, r3, r5, r7
 800bbbc:	4123      	asrs	r3, r4
 800bbbe:	fb50 7005 	smmla	r0, r0, r5, r7
 800bbc2:	4433      	add	r3, r6
 800bbc4:	f1ae 0504 	sub.w	r5, lr, #4
 800bbc8:	f1ac 0704 	sub.w	r7, ip, #4
 800bbcc:	f303 0307 	ssat	r3, #8, r3
 800bbd0:	4120      	asrs	r0, r4
 800bbd2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800bbd4:	4430      	add	r0, r6
 800bbd6:	7023      	strb	r3, [r4, #0]
 800bbd8:	f300 0007 	ssat	r0, #8, r0
 800bbdc:	9b02      	ldr	r3, [sp, #8]
 800bbde:	7018      	strb	r0, [r3, #0]
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	9b01      	ldr	r3, [sp, #4]
 800bbe4:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800bbe6:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800bbea:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800bbec:	1904      	adds	r4, r0, r4
 800bbee:	9802      	ldr	r0, [sp, #8]
 800bbf0:	2b15      	cmp	r3, #21
 800bbf2:	4430      	add	r0, r6
 800bbf4:	f340 810d 	ble.w	800be12 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x566>
 800bbf8:	682e      	ldr	r6, [r5, #0]
 800bbfa:	683f      	ldr	r7, [r7, #0]
 800bbfc:	1e9d      	subs	r5, r3, #2
 800bbfe:	f04f 0c01 	mov.w	ip, #1
 800bc02:	3b01      	subs	r3, #1
 800bc04:	fa0c f505 	lsl.w	r5, ip, r5
 800bc08:	fb52 5206 	smmla	r2, r2, r6, r5
 800bc0c:	411a      	asrs	r2, r3
 800bc0e:	fb51 5106 	smmla	r1, r1, r6, r5
 800bc12:	443a      	add	r2, r7
 800bc14:	f302 0207 	ssat	r2, #8, r2
 800bc18:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 800bc1a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800bc1c:	4119      	asrs	r1, r3
 800bc1e:	55aa      	strb	r2, [r5, r6]
 800bc20:	4439      	add	r1, r7
 800bc22:	f301 0107 	ssat	r1, #8, r1
 800bc26:	9b02      	ldr	r3, [sp, #8]
 800bc28:	5599      	strb	r1, [r3, r6]
 800bc2a:	4633      	mov	r3, r6
 800bc2c:	18e3      	adds	r3, r4, r3
 800bc2e:	932c      	str	r3, [sp, #176]	; 0xb0
 800bc30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bc32:	18c3      	adds	r3, r0, r3
 800bc34:	9302      	str	r3, [sp, #8]
 800bc36:	9b01      	ldr	r3, [sp, #4]
 800bc38:	9a03      	ldr	r2, [sp, #12]
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	9301      	str	r3, [sp, #4]
 800bc3e:	9b05      	ldr	r3, [sp, #20]
 800bc40:	3308      	adds	r3, #8
 800bc42:	9305      	str	r3, [sp, #20]
 800bc44:	9b04      	ldr	r3, [sp, #16]
 800bc46:	3308      	adds	r3, #8
 800bc48:	9304      	str	r3, [sp, #16]
 800bc4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	f47f ae6f 	bne.w	800b930 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x84>
 800bc52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bc54:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bc56:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800bc5a:	9328      	str	r3, [sp, #160]	; 0xa0
 800bc5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bc5e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bc60:	4413      	add	r3, r2
 800bc62:	9329      	str	r3, [sp, #164]	; 0xa4
 800bc64:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800bc66:	4413      	add	r3, r2
 800bc68:	46cb      	mov	fp, r9
 800bc6a:	932a      	str	r3, [sp, #168]	; 0xa8
 800bc6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc6e:	07db      	lsls	r3, r3, #31
 800bc70:	f140 81c4 	bpl.w	800bffc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x750>
 800bc74:	9a06      	ldr	r2, [sp, #24]
 800bc76:	9b03      	ldr	r3, [sp, #12]
 800bc78:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	0896      	lsrs	r6, r2, #2
 800bc7e:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 800bc82:	f000 8209 	beq.w	800c098 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x7ec>
 800bc86:	00f7      	lsls	r7, r6, #3
 800bc88:	4674      	mov	r4, lr
 800bc8a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800bc8e:	4658      	mov	r0, fp
 800bc90:	461a      	mov	r2, r3
 800bc92:	f8d0 c000 	ldr.w	ip, [r0]
 800bc96:	6845      	ldr	r5, [r0, #4]
 800bc98:	f8d1 8000 	ldr.w	r8, [r1]
 800bc9c:	3008      	adds	r0, #8
 800bc9e:	fb2c 3308 	smlad	r3, ip, r8, r3
 800bca2:	f8d4 8000 	ldr.w	r8, [r4]
 800bca6:	fb2c 2208 	smlad	r2, ip, r8, r2
 800bcaa:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800bcae:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800bcb2:	3108      	adds	r1, #8
 800bcb4:	3408      	adds	r4, #8
 800bcb6:	fb25 3308 	smlad	r3, r5, r8, r3
 800bcba:	fb25 220c 	smlad	r2, r5, ip, r2
 800bcbe:	42b1      	cmp	r1, r6
 800bcc0:	d1e7      	bne.n	800bc92 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e6>
 800bcc2:	44bb      	add	fp, r7
 800bcc4:	44be      	add	lr, r7
 800bcc6:	9906      	ldr	r1, [sp, #24]
 800bcc8:	f011 0103 	ands.w	r1, r1, #3
 800bccc:	d01f      	beq.n	800bd0e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x462>
 800bcce:	f9bb 0000 	ldrsh.w	r0, [fp]
 800bcd2:	8834      	ldrh	r4, [r6, #0]
 800bcd4:	3901      	subs	r1, #1
 800bcd6:	fb14 3300 	smlabb	r3, r4, r0, r3
 800bcda:	f8be 4000 	ldrh.w	r4, [lr]
 800bcde:	b289      	uxth	r1, r1
 800bce0:	fb14 2200 	smlabb	r2, r4, r0, r2
 800bce4:	b199      	cbz	r1, 800bd0e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x462>
 800bce6:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 800bcea:	8874      	ldrh	r4, [r6, #2]
 800bcec:	fb14 3300 	smlabb	r3, r4, r0, r3
 800bcf0:	f8be 4002 	ldrh.w	r4, [lr, #2]
 800bcf4:	2901      	cmp	r1, #1
 800bcf6:	fb14 2200 	smlabb	r2, r4, r0, r2
 800bcfa:	d008      	beq.n	800bd0e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x462>
 800bcfc:	f9bb 1004 	ldrsh.w	r1, [fp, #4]
 800bd00:	88b0      	ldrh	r0, [r6, #4]
 800bd02:	fb11 3300 	smlabb	r3, r1, r0, r3
 800bd06:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800bd0a:	fb11 2200 	smlabb	r2, r1, r0, r2
 800bd0e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800bd10:	f9b1 0000 	ldrsh.w	r0, [r1]
 800bd14:	2815      	cmp	r0, #21
 800bd16:	f340 8180 	ble.w	800c01a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x76e>
 800bd1a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800bd1c:	680c      	ldr	r4, [r1, #0]
 800bd1e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800bd20:	1e85      	subs	r5, r0, #2
 800bd22:	2601      	movs	r6, #1
 800bd24:	3801      	subs	r0, #1
 800bd26:	6809      	ldr	r1, [r1, #0]
 800bd28:	40ae      	lsls	r6, r5
 800bd2a:	fb53 6501 	smmla	r5, r3, r1, r6
 800bd2e:	fb52 6301 	smmla	r3, r2, r1, r6
 800bd32:	fa45 f200 	asr.w	r2, r5, r0
 800bd36:	4422      	add	r2, r4
 800bd38:	f302 0207 	ssat	r2, #8, r2
 800bd3c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800bd3e:	4103      	asrs	r3, r0
 800bd40:	4423      	add	r3, r4
 800bd42:	f801 2b01 	strb.w	r2, [r1], #1
 800bd46:	f303 0307 	ssat	r3, #8, r3
 800bd4a:	9a02      	ldr	r2, [sp, #8]
 800bd4c:	912c      	str	r1, [sp, #176]	; 0xb0
 800bd4e:	7013      	strb	r3, [r2, #0]
 800bd50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f000 8156 	beq.w	800c004 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x758>
 800bd58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bd5a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	441a      	add	r2, r3
 800bd60:	922c      	str	r2, [sp, #176]	; 0xb0
 800bd62:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800bd64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bd66:	1c98      	adds	r0, r3, #2
 800bd68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd6a:	fb02 0013 	mls	r0, r2, r3, r0
 800bd6e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800bd70:	4418      	add	r0, r3
 800bd72:	b01b      	add	sp, #108	; 0x6c
 800bd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd78:	9c01      	ldr	r4, [sp, #4]
 800bd7a:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 800bd7e:	2c15      	cmp	r4, #21
 800bd80:	f340 8094 	ble.w	800beac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x600>
 800bd84:	f8dd e010 	ldr.w	lr, [sp, #16]
 800bd88:	f8dd c014 	ldr.w	ip, [sp, #20]
 800bd8c:	f85e 6c08 	ldr.w	r6, [lr, #-8]
 800bd90:	1ea7      	subs	r7, r4, #2
 800bd92:	2501      	movs	r5, #1
 800bd94:	3c01      	subs	r4, #1
 800bd96:	fa05 f707 	lsl.w	r7, r5, r7
 800bd9a:	f85c 5c08 	ldr.w	r5, [ip, #-8]
 800bd9e:	fb53 7305 	smmla	r3, r3, r5, r7
 800bda2:	4123      	asrs	r3, r4
 800bda4:	fb50 7005 	smmla	r0, r0, r5, r7
 800bda8:	4433      	add	r3, r6
 800bdaa:	f1ac 0c04 	sub.w	ip, ip, #4
 800bdae:	f1ae 0804 	sub.w	r8, lr, #4
 800bdb2:	f303 0307 	ssat	r3, #8, r3
 800bdb6:	4120      	asrs	r0, r4
 800bdb8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800bdba:	4430      	add	r0, r6
 800bdbc:	7023      	strb	r3, [r4, #0]
 800bdbe:	f300 0007 	ssat	r0, #8, r0
 800bdc2:	9b02      	ldr	r3, [sp, #8]
 800bdc4:	7018      	strb	r0, [r3, #0]
 800bdc6:	9b01      	ldr	r3, [sp, #4]
 800bdc8:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800bdcc:	2b15      	cmp	r3, #21
 800bdce:	dd53      	ble.n	800be78 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5cc>
 800bdd0:	f8d8 4000 	ldr.w	r4, [r8]
 800bdd4:	f8dc 5000 	ldr.w	r5, [ip]
 800bdd8:	1e98      	subs	r0, r3, #2
 800bdda:	2601      	movs	r6, #1
 800bddc:	3b01      	subs	r3, #1
 800bdde:	fa06 f000 	lsl.w	r0, r6, r0
 800bde2:	fb52 0205 	smmla	r2, r2, r5, r0
 800bde6:	411a      	asrs	r2, r3
 800bde8:	fb51 0105 	smmla	r1, r1, r5, r0
 800bdec:	4422      	add	r2, r4
 800bdee:	f302 0207 	ssat	r2, #8, r2
 800bdf2:	fa41 f303 	asr.w	r3, r1, r3
 800bdf6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800bdf8:	4423      	add	r3, r4
 800bdfa:	704a      	strb	r2, [r1, #1]
 800bdfc:	f303 0307 	ssat	r3, #8, r3
 800be00:	9a02      	ldr	r2, [sp, #8]
 800be02:	7053      	strb	r3, [r2, #1]
 800be04:	460b      	mov	r3, r1
 800be06:	3302      	adds	r3, #2
 800be08:	932c      	str	r3, [sp, #176]	; 0xb0
 800be0a:	9b02      	ldr	r3, [sp, #8]
 800be0c:	3302      	adds	r3, #2
 800be0e:	9302      	str	r3, [sp, #8]
 800be10:	e711      	b.n	800bc36 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x38a>
 800be12:	2b00      	cmp	r3, #0
 800be14:	dd72      	ble.n	800befc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x650>
 800be16:	682d      	ldr	r5, [r5, #0]
 800be18:	683f      	ldr	r7, [r7, #0]
 800be1a:	0052      	lsls	r2, r2, #1
 800be1c:	0049      	lsls	r1, r1, #1
 800be1e:	fb52 7205 	smmla	r2, r2, r5, r7
 800be22:	fb51 7105 	smmla	r1, r1, r5, r7
 800be26:	411a      	asrs	r2, r3
 800be28:	f302 0207 	ssat	r2, #8, r2
 800be2c:	7022      	strb	r2, [r4, #0]
 800be2e:	4119      	asrs	r1, r3
 800be30:	f301 0107 	ssat	r1, #8, r1
 800be34:	7001      	strb	r1, [r0, #0]
 800be36:	4633      	mov	r3, r6
 800be38:	e6f8      	b.n	800bc2c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x380>
 800be3a:	2c00      	cmp	r4, #0
 800be3c:	f340 809c 	ble.w	800bf78 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x6cc>
 800be40:	9f05      	ldr	r7, [sp, #20]
 800be42:	f8dd c010 	ldr.w	ip, [sp, #16]
 800be46:	f857 5c08 	ldr.w	r5, [r7, #-8]
 800be4a:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800be4e:	005b      	lsls	r3, r3, #1
 800be50:	0040      	lsls	r0, r0, #1
 800be52:	fb53 6305 	smmla	r3, r3, r5, r6
 800be56:	fb50 6005 	smmla	r0, r0, r5, r6
 800be5a:	4123      	asrs	r3, r4
 800be5c:	1f3d      	subs	r5, r7, #4
 800be5e:	f1ac 0704 	sub.w	r7, ip, #4
 800be62:	f303 0307 	ssat	r3, #8, r3
 800be66:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800be68:	4120      	asrs	r0, r4
 800be6a:	7033      	strb	r3, [r6, #0]
 800be6c:	f300 0007 	ssat	r0, #8, r0
 800be70:	9b02      	ldr	r3, [sp, #8]
 800be72:	7018      	strb	r0, [r3, #0]
 800be74:	4630      	mov	r0, r6
 800be76:	e6b4      	b.n	800bbe2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x336>
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f340 80a0 	ble.w	800bfbe <st_sssa8_ch_nn_mat_mult_kernel_opt+0x712>
 800be7e:	f8dc 0000 	ldr.w	r0, [ip]
 800be82:	f8d8 4000 	ldr.w	r4, [r8]
 800be86:	0052      	lsls	r2, r2, #1
 800be88:	0049      	lsls	r1, r1, #1
 800be8a:	fb52 4200 	smmla	r2, r2, r0, r4
 800be8e:	fb51 4100 	smmla	r1, r1, r0, r4
 800be92:	411a      	asrs	r2, r3
 800be94:	f302 0207 	ssat	r2, #8, r2
 800be98:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800be9a:	fa41 f303 	asr.w	r3, r1, r3
 800be9e:	7042      	strb	r2, [r0, #1]
 800bea0:	f303 0307 	ssat	r3, #8, r3
 800bea4:	9a02      	ldr	r2, [sp, #8]
 800bea6:	7053      	strb	r3, [r2, #1]
 800bea8:	4603      	mov	r3, r0
 800beaa:	e7ac      	b.n	800be06 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x55a>
 800beac:	2c00      	cmp	r4, #0
 800beae:	dd3f      	ble.n	800bf30 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x684>
 800beb0:	9f05      	ldr	r7, [sp, #20]
 800beb2:	f8dd e010 	ldr.w	lr, [sp, #16]
 800beb6:	f857 5c08 	ldr.w	r5, [r7, #-8]
 800beba:	f85e 6c08 	ldr.w	r6, [lr, #-8]
 800bebe:	005b      	lsls	r3, r3, #1
 800bec0:	0040      	lsls	r0, r0, #1
 800bec2:	fb53 6305 	smmla	r3, r3, r5, r6
 800bec6:	f1a7 0c04 	sub.w	ip, r7, #4
 800beca:	4123      	asrs	r3, r4
 800becc:	f1ae 0804 	sub.w	r8, lr, #4
 800bed0:	fb50 6005 	smmla	r0, r0, r5, r6
 800bed4:	f303 0307 	ssat	r3, #8, r3
 800bed8:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 800beda:	4120      	asrs	r0, r4
 800bedc:	702b      	strb	r3, [r5, #0]
 800bede:	f300 0007 	ssat	r0, #8, r0
 800bee2:	9b02      	ldr	r3, [sp, #8]
 800bee4:	7018      	strb	r0, [r3, #0]
 800bee6:	e76e      	b.n	800bdc6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51a>
 800bee8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800beea:	9400      	str	r4, [sp, #0]
 800beec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800beee:	f04f 0b00 	mov.w	fp, #0
 800bef2:	45a3      	cmp	fp, r4
 800bef4:	f6ff adb6 	blt.w	800ba64 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1b8>
 800bef8:	46a8      	mov	r8, r5
 800befa:	e5f0      	b.n	800bade <st_sssa8_ch_nn_mat_mult_kernel_opt+0x232>
 800befc:	f1c3 0301 	rsb	r3, r3, #1
 800bf00:	409a      	lsls	r2, r3
 800bf02:	f302 021f 	ssat	r2, #32, r2
 800bf06:	682d      	ldr	r5, [r5, #0]
 800bf08:	fb52 f215 	smmulr	r2, r2, r5
 800bf0c:	fa01 f303 	lsl.w	r3, r1, r3
 800bf10:	f303 031f 	ssat	r3, #32, r3
 800bf14:	fb53 f515 	smmulr	r5, r3, r5
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	4413      	add	r3, r2
 800bf1c:	f303 0307 	ssat	r3, #8, r3
 800bf20:	7023      	strb	r3, [r4, #0]
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	442b      	add	r3, r5
 800bf26:	f303 0307 	ssat	r3, #8, r3
 800bf2a:	7003      	strb	r3, [r0, #0]
 800bf2c:	4633      	mov	r3, r6
 800bf2e:	e67d      	b.n	800bc2c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x380>
 800bf30:	f1c4 0401 	rsb	r4, r4, #1
 800bf34:	fa03 f504 	lsl.w	r5, r3, r4
 800bf38:	f305 051f 	ssat	r5, #32, r5
 800bf3c:	9e05      	ldr	r6, [sp, #20]
 800bf3e:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800bf42:	fb55 f513 	smmulr	r5, r5, r3
 800bf46:	40a0      	lsls	r0, r4
 800bf48:	f300 001f 	ssat	r0, #32, r0
 800bf4c:	f1a6 0c04 	sub.w	ip, r6, #4
 800bf50:	fb50 f013 	smmulr	r0, r0, r3
 800bf54:	9c04      	ldr	r4, [sp, #16]
 800bf56:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800bf5a:	442b      	add	r3, r5
 800bf5c:	f303 0307 	ssat	r3, #8, r3
 800bf60:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 800bf62:	702b      	strb	r3, [r5, #0]
 800bf64:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800bf68:	f1a4 0804 	sub.w	r8, r4, #4
 800bf6c:	4403      	add	r3, r0
 800bf6e:	f303 0307 	ssat	r3, #8, r3
 800bf72:	9802      	ldr	r0, [sp, #8]
 800bf74:	7003      	strb	r3, [r0, #0]
 800bf76:	e726      	b.n	800bdc6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51a>
 800bf78:	f1c4 0401 	rsb	r4, r4, #1
 800bf7c:	fa03 f604 	lsl.w	r6, r3, r4
 800bf80:	f306 061f 	ssat	r6, #32, r6
 800bf84:	9d05      	ldr	r5, [sp, #20]
 800bf86:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800bf8a:	fb56 f613 	smmulr	r6, r6, r3
 800bf8e:	40a0      	lsls	r0, r4
 800bf90:	f300 001f 	ssat	r0, #32, r0
 800bf94:	3d04      	subs	r5, #4
 800bf96:	fb50 f013 	smmulr	r0, r0, r3
 800bf9a:	9c04      	ldr	r4, [sp, #16]
 800bf9c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800bfa0:	4433      	add	r3, r6
 800bfa2:	f303 0307 	ssat	r3, #8, r3
 800bfa6:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800bfa8:	7033      	strb	r3, [r6, #0]
 800bfaa:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800bfae:	1f27      	subs	r7, r4, #4
 800bfb0:	4403      	add	r3, r0
 800bfb2:	f303 0307 	ssat	r3, #8, r3
 800bfb6:	9802      	ldr	r0, [sp, #8]
 800bfb8:	7003      	strb	r3, [r0, #0]
 800bfba:	4630      	mov	r0, r6
 800bfbc:	e611      	b.n	800bbe2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x336>
 800bfbe:	f1c3 0301 	rsb	r3, r3, #1
 800bfc2:	409a      	lsls	r2, r3
 800bfc4:	f302 021f 	ssat	r2, #32, r2
 800bfc8:	f8dc 0000 	ldr.w	r0, [ip]
 800bfcc:	fb52 f210 	smmulr	r2, r2, r0
 800bfd0:	fa01 f303 	lsl.w	r3, r1, r3
 800bfd4:	f303 031f 	ssat	r3, #32, r3
 800bfd8:	fb53 f010 	smmulr	r0, r3, r0
 800bfdc:	f8d8 3000 	ldr.w	r3, [r8]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	f303 0307 	ssat	r3, #8, r3
 800bfe6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800bfe8:	7053      	strb	r3, [r2, #1]
 800bfea:	f8d8 3000 	ldr.w	r3, [r8]
 800bfee:	4403      	add	r3, r0
 800bff0:	f303 0307 	ssat	r3, #8, r3
 800bff4:	9a02      	ldr	r2, [sp, #8]
 800bff6:	7053      	strb	r3, [r2, #1]
 800bff8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800bffa:	e704      	b.n	800be06 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x55a>
 800bffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bffe:	2b00      	cmp	r3, #0
 800c000:	f47f aeaf 	bne.w	800bd62 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b6>
 800c004:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800c006:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c008:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c00a:	1a50      	subs	r0, r2, r1
 800c00c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c00e:	3302      	adds	r3, #2
 800c010:	fb02 0003 	mla	r0, r2, r3, r0
 800c014:	b01b      	add	sp, #108	; 0x6c
 800c016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c01a:	2800      	cmp	r0, #0
 800c01c:	dd1b      	ble.n	800c056 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x7aa>
 800c01e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800c020:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800c022:	6809      	ldr	r1, [r1, #0]
 800c024:	6824      	ldr	r4, [r4, #0]
 800c026:	0052      	lsls	r2, r2, #1
 800c028:	005b      	lsls	r3, r3, #1
 800c02a:	fb53 4301 	smmla	r3, r3, r1, r4
 800c02e:	fb52 4101 	smmla	r1, r2, r1, r4
 800c032:	fa43 f000 	asr.w	r0, r3, r0
 800c036:	f300 0307 	ssat	r3, #8, r0
 800c03a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800c03c:	f802 3b01 	strb.w	r3, [r2], #1
 800c040:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c042:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c046:	fa41 f303 	asr.w	r3, r1, r3
 800c04a:	f303 0307 	ssat	r3, #8, r3
 800c04e:	9902      	ldr	r1, [sp, #8]
 800c050:	922c      	str	r2, [sp, #176]	; 0xb0
 800c052:	700b      	strb	r3, [r1, #0]
 800c054:	e67c      	b.n	800bd50 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a4>
 800c056:	f1c0 0001 	rsb	r0, r0, #1
 800c05a:	fa03 f100 	lsl.w	r1, r3, r0
 800c05e:	f301 011f 	ssat	r1, #32, r1
 800c062:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c064:	681c      	ldr	r4, [r3, #0]
 800c066:	fb51 f114 	smmulr	r1, r1, r4
 800c06a:	fa02 f300 	lsl.w	r3, r2, r0
 800c06e:	f303 031f 	ssat	r3, #32, r3
 800c072:	fb53 f414 	smmulr	r4, r3, r4
 800c076:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	440b      	add	r3, r1
 800c07c:	f303 0307 	ssat	r3, #8, r3
 800c080:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800c082:	f802 3b01 	strb.w	r3, [r2], #1
 800c086:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4423      	add	r3, r4
 800c08c:	f303 0307 	ssat	r3, #8, r3
 800c090:	9902      	ldr	r1, [sp, #8]
 800c092:	922c      	str	r2, [sp, #176]	; 0xb0
 800c094:	700b      	strb	r3, [r1, #0]
 800c096:	e65b      	b.n	800bd50 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a4>
 800c098:	460e      	mov	r6, r1
 800c09a:	461a      	mov	r2, r3
 800c09c:	e613      	b.n	800bcc6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x41a>
 800c09e:	bf00      	nop

0800c0a0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 800c0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a4:	b095      	sub	sp, #84	; 0x54
 800c0a6:	4605      	mov	r5, r0
 800c0a8:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 800c0ac:	920d      	str	r2, [sp, #52]	; 0x34
 800c0ae:	9311      	str	r3, [sp, #68]	; 0x44
 800c0b0:	f89d 2090 	ldrb.w	r2, [sp, #144]	; 0x90
 800c0b4:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800c0b8:	9304      	str	r3, [sp, #16]
 800c0ba:	0863      	lsrs	r3, r4, #1
 800c0bc:	940f      	str	r4, [sp, #60]	; 0x3c
 800c0be:	9106      	str	r1, [sp, #24]
 800c0c0:	9210      	str	r2, [sp, #64]	; 0x40
 800c0c2:	930e      	str	r3, [sp, #56]	; 0x38
 800c0c4:	2a00      	cmp	r2, #0
 800c0c6:	f000 81f8 	beq.w	800c4ba <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x41a>
 800c0ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c0cc:	b298      	uxth	r0, r3
 800c0ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0d0:	2a00      	cmp	r2, #0
 800c0d2:	f000 8141 	beq.w	800c358 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2b8>
 800c0d6:	1c41      	adds	r1, r0, #1
 800c0d8:	0040      	lsls	r0, r0, #1
 800c0da:	9007      	str	r0, [sp, #28]
 800c0dc:	9825      	ldr	r0, [sp, #148]	; 0x94
 800c0de:	9c04      	ldr	r4, [sp, #16]
 800c0e0:	1841      	adds	r1, r0, r1
 800c0e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c0e4:	9102      	str	r1, [sp, #8]
 800c0e6:	3a01      	subs	r2, #1
 800c0e8:	b292      	uxth	r2, r2
 800c0ea:	f100 0110 	add.w	r1, r0, #16
 800c0ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c0f2:	9209      	str	r2, [sp, #36]	; 0x24
 800c0f4:	1ee2      	subs	r2, r4, #3
 800c0f6:	9208      	str	r2, [sp, #32]
 800c0f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c0fa:	3204      	adds	r2, #4
 800c0fc:	9200      	str	r2, [sp, #0]
 800c0fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c100:	3208      	adds	r2, #8
 800c102:	9201      	str	r2, [sp, #4]
 800c104:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c106:	f102 0b08 	add.w	fp, r2, #8
 800c10a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800c10c:	f1a4 0310 	sub.w	r3, r4, #16
 800c110:	3201      	adds	r2, #1
 800c112:	091b      	lsrs	r3, r3, #4
 800c114:	9203      	str	r2, [sp, #12]
 800c116:	9a06      	ldr	r2, [sp, #24]
 800c118:	3301      	adds	r3, #1
 800c11a:	eb02 1743 	add.w	r7, r2, r3, lsl #5
 800c11e:	011a      	lsls	r2, r3, #4
 800c120:	019b      	lsls	r3, r3, #6
 800c122:	930a      	str	r3, [sp, #40]	; 0x28
 800c124:	1f23      	subs	r3, r4, #4
 800c126:	f100 0908 	add.w	r9, r0, #8
 800c12a:	920b      	str	r2, [sp, #44]	; 0x2c
 800c12c:	930c      	str	r3, [sp, #48]	; 0x30
 800c12e:	f859 3c08 	ldr.w	r3, [r9, #-8]
 800c132:	9904      	ldr	r1, [sp, #16]
 800c134:	9313      	str	r3, [sp, #76]	; 0x4c
 800c136:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800c13a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c13c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c13e:	290f      	cmp	r1, #15
 800c140:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c142:	9806      	ldr	r0, [sp, #24]
 800c144:	f340 81b6 	ble.w	800c4b4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x414>
 800c148:	4629      	mov	r1, r5
 800c14a:	f8d0 c000 	ldr.w	ip, [r0]
 800c14e:	680e      	ldr	r6, [r1, #0]
 800c150:	fb26 220c 	smlad	r2, r6, ip, r2
 800c154:	684c      	ldr	r4, [r1, #4]
 800c156:	fb24 330c 	smlad	r3, r4, ip, r3
 800c15a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c15e:	688e      	ldr	r6, [r1, #8]
 800c160:	fb26 260c 	smlad	r6, r6, ip, r2
 800c164:	68cc      	ldr	r4, [r1, #12]
 800c166:	fb24 340c 	smlad	r4, r4, ip, r3
 800c16a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800c16e:	690a      	ldr	r2, [r1, #16]
 800c170:	fb22 660c 	smlad	r6, r2, ip, r6
 800c174:	694b      	ldr	r3, [r1, #20]
 800c176:	fb23 440c 	smlad	r4, r3, ip, r4
 800c17a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800c17e:	698a      	ldr	r2, [r1, #24]
 800c180:	fb22 620c 	smlad	r2, r2, ip, r6
 800c184:	69cb      	ldr	r3, [r1, #28]
 800c186:	fb23 430c 	smlad	r3, r3, ip, r4
 800c18a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800c18e:	6a0e      	ldr	r6, [r1, #32]
 800c190:	fb26 220c 	smlad	r2, r6, ip, r2
 800c194:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800c196:	fb24 330c 	smlad	r3, r4, ip, r3
 800c19a:	f8d0 c014 	ldr.w	ip, [r0, #20]
 800c19e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800c1a0:	fb26 260c 	smlad	r6, r6, ip, r2
 800c1a4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800c1a6:	fb24 340c 	smlad	r4, r4, ip, r3
 800c1aa:	f8d0 c018 	ldr.w	ip, [r0, #24]
 800c1ae:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800c1b0:	fb22 660c 	smlad	r6, r2, ip, r6
 800c1b4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c1b6:	fb23 440c 	smlad	r4, r3, ip, r4
 800c1ba:	f8d0 c01c 	ldr.w	ip, [r0, #28]
 800c1be:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 800c1c0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800c1c2:	3020      	adds	r0, #32
 800c1c4:	3140      	adds	r1, #64	; 0x40
 800c1c6:	fb22 620c 	smlad	r2, r2, ip, r6
 800c1ca:	fb23 430c 	smlad	r3, r3, ip, r4
 800c1ce:	42b8      	cmp	r0, r7
 800c1d0:	d1bb      	bne.n	800c14a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xaa>
 800c1d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c1d4:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 800c1d8:	440d      	add	r5, r1
 800c1da:	4638      	mov	r0, r7
 800c1dc:	9908      	ldr	r1, [sp, #32]
 800c1de:	458e      	cmp	lr, r1
 800c1e0:	da24      	bge.n	800c22c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x18c>
 800c1e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c1e4:	eba1 0a0e 	sub.w	sl, r1, lr
 800c1e8:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 800c1ec:	f10a 0101 	add.w	r1, sl, #1
 800c1f0:	9105      	str	r1, [sp, #20]
 800c1f2:	eb00 08c1 	add.w	r8, r0, r1, lsl #3
 800c1f6:	4629      	mov	r1, r5
 800c1f8:	6804      	ldr	r4, [r0, #0]
 800c1fa:	680e      	ldr	r6, [r1, #0]
 800c1fc:	fb26 2204 	smlad	r2, r6, r4, r2
 800c200:	684e      	ldr	r6, [r1, #4]
 800c202:	fb26 3404 	smlad	r4, r6, r4, r3
 800c206:	6846      	ldr	r6, [r0, #4]
 800c208:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800c20c:	68cb      	ldr	r3, [r1, #12]
 800c20e:	3008      	adds	r0, #8
 800c210:	3110      	adds	r1, #16
 800c212:	fb2c 2206 	smlad	r2, ip, r6, r2
 800c216:	fb23 4306 	smlad	r3, r3, r6, r4
 800c21a:	4580      	cmp	r8, r0
 800c21c:	d1ec      	bne.n	800c1f8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x158>
 800c21e:	9905      	ldr	r1, [sp, #20]
 800c220:	f10e 0e04 	add.w	lr, lr, #4
 800c224:	eb05 1501 	add.w	r5, r5, r1, lsl #4
 800c228:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 800c22c:	9e04      	ldr	r6, [sp, #16]
 800c22e:	4576      	cmp	r6, lr
 800c230:	dd30      	ble.n	800c294 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1f4>
 800c232:	f9b0 1000 	ldrsh.w	r1, [r0]
 800c236:	882c      	ldrh	r4, [r5, #0]
 800c238:	fb14 2201 	smlabb	r2, r4, r1, r2
 800c23c:	886c      	ldrh	r4, [r5, #2]
 800c23e:	fb11 3304 	smlabb	r3, r1, r4, r3
 800c242:	f10e 0101 	add.w	r1, lr, #1
 800c246:	428e      	cmp	r6, r1
 800c248:	dd1f      	ble.n	800c28a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ea>
 800c24a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800c24e:	88ac      	ldrh	r4, [r5, #4]
 800c250:	fb14 2201 	smlabb	r2, r4, r1, r2
 800c254:	88ec      	ldrh	r4, [r5, #6]
 800c256:	fb11 3304 	smlabb	r3, r1, r4, r3
 800c25a:	f10e 0102 	add.w	r1, lr, #2
 800c25e:	428e      	cmp	r6, r1
 800c260:	dd13      	ble.n	800c28a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ea>
 800c262:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800c266:	892c      	ldrh	r4, [r5, #8]
 800c268:	fb14 2201 	smlabb	r2, r4, r1, r2
 800c26c:	896c      	ldrh	r4, [r5, #10]
 800c26e:	fb11 3304 	smlabb	r3, r1, r4, r3
 800c272:	f10e 0103 	add.w	r1, lr, #3
 800c276:	428e      	cmp	r6, r1
 800c278:	dd07      	ble.n	800c28a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ea>
 800c27a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c27e:	89a8      	ldrh	r0, [r5, #12]
 800c280:	fb10 2201 	smlabb	r2, r0, r1, r2
 800c284:	89e8      	ldrh	r0, [r5, #14]
 800c286:	fb11 3300 	smlabb	r3, r1, r0, r3
 800c28a:	9904      	ldr	r1, [sp, #16]
 800c28c:	eba1 0e0e 	sub.w	lr, r1, lr
 800c290:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800c294:	f8dd c000 	ldr.w	ip, [sp]
 800c298:	f93c 4c04 	ldrsh.w	r4, [ip, #-4]
 800c29c:	2c15      	cmp	r4, #21
 800c29e:	f340 80b2 	ble.w	800c406 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x366>
 800c2a2:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c2a6:	f85b 6c08 	ldr.w	r6, [fp, #-8]
 800c2aa:	1ea0      	subs	r0, r4, #2
 800c2ac:	2101      	movs	r1, #1
 800c2ae:	3c01      	subs	r4, #1
 800c2b0:	fa01 f000 	lsl.w	r0, r1, r0
 800c2b4:	f85e 1c08 	ldr.w	r1, [lr, #-8]
 800c2b8:	fb52 0201 	smmla	r2, r2, r1, r0
 800c2bc:	4122      	asrs	r2, r4
 800c2be:	4432      	add	r2, r6
 800c2c0:	f1ae 0e04 	sub.w	lr, lr, #4
 800c2c4:	f1ac 0c02 	sub.w	ip, ip, #2
 800c2c8:	f1ab 0604 	sub.w	r6, fp, #4
 800c2cc:	f302 0207 	ssat	r2, #8, r2
 800c2d0:	9903      	ldr	r1, [sp, #12]
 800c2d2:	f801 2c01 	strb.w	r2, [r1, #-1]
 800c2d6:	f9bc 2000 	ldrsh.w	r2, [ip]
 800c2da:	2a15      	cmp	r2, #21
 800c2dc:	f340 80b0 	ble.w	800c440 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3a0>
 800c2e0:	6830      	ldr	r0, [r6, #0]
 800c2e2:	f8de 1000 	ldr.w	r1, [lr]
 800c2e6:	1e94      	subs	r4, r2, #2
 800c2e8:	2601      	movs	r6, #1
 800c2ea:	3a01      	subs	r2, #1
 800c2ec:	fa06 f404 	lsl.w	r4, r6, r4
 800c2f0:	fb53 4401 	smmla	r4, r3, r1, r4
 800c2f4:	4114      	asrs	r4, r2
 800c2f6:	4404      	add	r4, r0
 800c2f8:	f304 0407 	ssat	r4, #8, r4
 800c2fc:	9b02      	ldr	r3, [sp, #8]
 800c2fe:	f803 4c01 	strb.w	r4, [r3, #-1]
 800c302:	9b00      	ldr	r3, [sp, #0]
 800c304:	9a07      	ldr	r2, [sp, #28]
 800c306:	3304      	adds	r3, #4
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	9b01      	ldr	r3, [sp, #4]
 800c30c:	3308      	adds	r3, #8
 800c30e:	9301      	str	r3, [sp, #4]
 800c310:	9b02      	ldr	r3, [sp, #8]
 800c312:	4413      	add	r3, r2
 800c314:	9302      	str	r3, [sp, #8]
 800c316:	9b03      	ldr	r3, [sp, #12]
 800c318:	4413      	add	r3, r2
 800c31a:	9303      	str	r3, [sp, #12]
 800c31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c31e:	f109 0908 	add.w	r9, r9, #8
 800c322:	4599      	cmp	r9, r3
 800c324:	f10b 0b08 	add.w	fp, fp, #8
 800c328:	f47f af01 	bne.w	800c12e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8e>
 800c32c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c32e:	4611      	mov	r1, r2
 800c330:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800c332:	fb03 2201 	mla	r2, r3, r1, r2
 800c336:	9225      	str	r2, [sp, #148]	; 0x94
 800c338:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c33a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c33e:	920d      	str	r2, [sp, #52]	; 0x34
 800c340:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c342:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c346:	9221      	str	r2, [sp, #132]	; 0x84
 800c348:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c34a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c34e:	9222      	str	r2, [sp, #136]	; 0x88
 800c350:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c352:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c356:	9323      	str	r3, [sp, #140]	; 0x8c
 800c358:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c35a:	07db      	lsls	r3, r3, #31
 800c35c:	d545      	bpl.n	800c3ea <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34a>
 800c35e:	9a04      	ldr	r2, [sp, #16]
 800c360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c362:	0896      	lsrs	r6, r2, #2
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	d012      	beq.n	800c38e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ee>
 800c368:	9906      	ldr	r1, [sp, #24]
 800c36a:	00f7      	lsls	r7, r6, #3
 800c36c:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800c370:	6828      	ldr	r0, [r5, #0]
 800c372:	686a      	ldr	r2, [r5, #4]
 800c374:	680c      	ldr	r4, [r1, #0]
 800c376:	3508      	adds	r5, #8
 800c378:	fb20 3304 	smlad	r3, r0, r4, r3
 800c37c:	6848      	ldr	r0, [r1, #4]
 800c37e:	3108      	adds	r1, #8
 800c380:	fb22 3300 	smlad	r3, r2, r0, r3
 800c384:	42ae      	cmp	r6, r5
 800c386:	d1f3      	bne.n	800c370 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2d0>
 800c388:	9a06      	ldr	r2, [sp, #24]
 800c38a:	443a      	add	r2, r7
 800c38c:	9206      	str	r2, [sp, #24]
 800c38e:	9a04      	ldr	r2, [sp, #16]
 800c390:	f012 0203 	ands.w	r2, r2, #3
 800c394:	d011      	beq.n	800c3ba <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31a>
 800c396:	9c06      	ldr	r4, [sp, #24]
 800c398:	8829      	ldrh	r1, [r5, #0]
 800c39a:	8820      	ldrh	r0, [r4, #0]
 800c39c:	3a01      	subs	r2, #1
 800c39e:	b292      	uxth	r2, r2
 800c3a0:	fb10 3301 	smlabb	r3, r0, r1, r3
 800c3a4:	b14a      	cbz	r2, 800c3ba <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31a>
 800c3a6:	8860      	ldrh	r0, [r4, #2]
 800c3a8:	8869      	ldrh	r1, [r5, #2]
 800c3aa:	2a01      	cmp	r2, #1
 800c3ac:	fb10 3301 	smlabb	r3, r0, r1, r3
 800c3b0:	d003      	beq.n	800c3ba <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31a>
 800c3b2:	88a9      	ldrh	r1, [r5, #4]
 800c3b4:	88a2      	ldrh	r2, [r4, #4]
 800c3b6:	fb11 3302 	smlabb	r3, r1, r2, r3
 800c3ba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 800c3c0:	2a15      	cmp	r2, #21
 800c3c2:	f340 8084 	ble.w	800c4ce <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x42e>
 800c3c6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800c3c8:	680c      	ldr	r4, [r1, #0]
 800c3ca:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c3cc:	1e95      	subs	r5, r2, #2
 800c3ce:	2001      	movs	r0, #1
 800c3d0:	3a01      	subs	r2, #1
 800c3d2:	6809      	ldr	r1, [r1, #0]
 800c3d4:	40a8      	lsls	r0, r5
 800c3d6:	fb53 0301 	smmla	r3, r3, r1, r0
 800c3da:	4113      	asrs	r3, r2
 800c3dc:	4423      	add	r3, r4
 800c3de:	f303 0307 	ssat	r3, #8, r3
 800c3e2:	9825      	ldr	r0, [sp, #148]	; 0x94
 800c3e4:	f800 3b01 	strb.w	r3, [r0], #1
 800c3e8:	9025      	str	r0, [sp, #148]	; 0x94
 800c3ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d066      	beq.n	800c4be <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x41e>
 800c3f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c3f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c3f4:	fb03 f000 	mul.w	r0, r3, r0
 800c3f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c3fa:	f1c0 0001 	rsb	r0, r0, #1
 800c3fe:	4418      	add	r0, r3
 800c400:	b015      	add	sp, #84	; 0x54
 800c402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c406:	2c00      	cmp	r4, #0
 800c408:	dd29      	ble.n	800c45e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3be>
 800c40a:	9e01      	ldr	r6, [sp, #4]
 800c40c:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 800c410:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800c414:	0052      	lsls	r2, r2, #1
 800c416:	fb52 0201 	smmla	r2, r2, r1, r0
 800c41a:	fa42 f404 	asr.w	r4, r2, r4
 800c41e:	9a00      	ldr	r2, [sp, #0]
 800c420:	f1a6 0e04 	sub.w	lr, r6, #4
 800c424:	f1a2 0c02 	sub.w	ip, r2, #2
 800c428:	f1ab 0604 	sub.w	r6, fp, #4
 800c42c:	f304 0407 	ssat	r4, #8, r4
 800c430:	9a03      	ldr	r2, [sp, #12]
 800c432:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c436:	f9bc 2000 	ldrsh.w	r2, [ip]
 800c43a:	2a15      	cmp	r2, #21
 800c43c:	f73f af50 	bgt.w	800c2e0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 800c440:	2a00      	cmp	r2, #0
 800c442:	dd25      	ble.n	800c490 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3f0>
 800c444:	f8de 1000 	ldr.w	r1, [lr]
 800c448:	6830      	ldr	r0, [r6, #0]
 800c44a:	005b      	lsls	r3, r3, #1
 800c44c:	fb53 0301 	smmla	r3, r3, r1, r0
 800c450:	4113      	asrs	r3, r2
 800c452:	f303 0307 	ssat	r3, #8, r3
 800c456:	9a02      	ldr	r2, [sp, #8]
 800c458:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c45c:	e751      	b.n	800c302 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x262>
 800c45e:	f1c4 0401 	rsb	r4, r4, #1
 800c462:	40a2      	lsls	r2, r4
 800c464:	f1ac 0c02 	sub.w	ip, ip, #2
 800c468:	f302 021f 	ssat	r2, #32, r2
 800c46c:	9901      	ldr	r1, [sp, #4]
 800c46e:	f1a1 0e04 	sub.w	lr, r1, #4
 800c472:	f851 1c08 	ldr.w	r1, [r1, #-8]
 800c476:	fb52 f111 	smmulr	r1, r2, r1
 800c47a:	f85b 2c08 	ldr.w	r2, [fp, #-8]
 800c47e:	f1ab 0604 	sub.w	r6, fp, #4
 800c482:	440a      	add	r2, r1
 800c484:	f302 0207 	ssat	r2, #8, r2
 800c488:	9903      	ldr	r1, [sp, #12]
 800c48a:	f801 2c01 	strb.w	r2, [r1, #-1]
 800c48e:	e722      	b.n	800c2d6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x236>
 800c490:	f1c2 0201 	rsb	r2, r2, #1
 800c494:	fa03 f202 	lsl.w	r2, r3, r2
 800c498:	f302 021f 	ssat	r2, #32, r2
 800c49c:	f8de 3000 	ldr.w	r3, [lr]
 800c4a0:	fb52 f313 	smmulr	r3, r2, r3
 800c4a4:	6832      	ldr	r2, [r6, #0]
 800c4a6:	4413      	add	r3, r2
 800c4a8:	f303 0307 	ssat	r3, #8, r3
 800c4ac:	9a02      	ldr	r2, [sp, #8]
 800c4ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c4b2:	e726      	b.n	800c302 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x262>
 800c4b4:	f04f 0e00 	mov.w	lr, #0
 800c4b8:	e690      	b.n	800c1dc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x13c>
 800c4ba:	2001      	movs	r0, #1
 800c4bc:	e607      	b.n	800c0ce <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e>
 800c4be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4c2:	1a98      	subs	r0, r3, r2
 800c4c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c4c6:	4418      	add	r0, r3
 800c4c8:	b015      	add	sp, #84	; 0x54
 800c4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ce:	2a00      	cmp	r2, #0
 800c4d0:	dd0e      	ble.n	800c4f0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x450>
 800c4d2:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c4d4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800c4d6:	6809      	ldr	r1, [r1, #0]
 800c4d8:	6800      	ldr	r0, [r0, #0]
 800c4da:	005b      	lsls	r3, r3, #1
 800c4dc:	fb53 0301 	smmla	r3, r3, r1, r0
 800c4e0:	4113      	asrs	r3, r2
 800c4e2:	f303 0307 	ssat	r3, #8, r3
 800c4e6:	9825      	ldr	r0, [sp, #148]	; 0x94
 800c4e8:	f800 3b01 	strb.w	r3, [r0], #1
 800c4ec:	9025      	str	r0, [sp, #148]	; 0x94
 800c4ee:	e77c      	b.n	800c3ea <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34a>
 800c4f0:	f1c2 0201 	rsb	r2, r2, #1
 800c4f4:	4093      	lsls	r3, r2
 800c4f6:	f303 031f 	ssat	r3, #32, r3
 800c4fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c4fc:	6812      	ldr	r2, [r2, #0]
 800c4fe:	fb53 f312 	smmulr	r3, r3, r2
 800c502:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c504:	6812      	ldr	r2, [r2, #0]
 800c506:	4413      	add	r3, r2
 800c508:	f303 0307 	ssat	r3, #8, r3
 800c50c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800c50e:	f802 3b01 	strb.w	r3, [r2], #1
 800c512:	9225      	str	r2, [sp, #148]	; 0x94
 800c514:	e769      	b.n	800c3ea <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34a>
 800c516:	bf00      	nop

0800c518 <arm_fill_q15>:
 800c518:	b510      	push	{r4, lr}
 800c51a:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 800c51e:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800c522:	d013      	beq.n	800c54c <arm_fill_q15+0x34>
 800c524:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 800c528:	2b09      	cmp	r3, #9
 800c52a:	460b      	mov	r3, r1
 800c52c:	d919      	bls.n	800c562 <arm_fill_q15+0x4a>
 800c52e:	f011 0f07 	tst.w	r1, #7
 800c532:	d116      	bne.n	800c562 <arm_fill_q15+0x4a>
 800c534:	f04f 0c00 	mov.w	ip, #0
 800c538:	f10c 0c01 	add.w	ip, ip, #1
 800c53c:	45e6      	cmp	lr, ip
 800c53e:	e9c3 4400 	strd	r4, r4, [r3]
 800c542:	f103 0308 	add.w	r3, r3, #8
 800c546:	d1f7      	bne.n	800c538 <arm_fill_q15+0x20>
 800c548:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800c54c:	f012 0203 	ands.w	r2, r2, #3
 800c550:	d006      	beq.n	800c560 <arm_fill_q15+0x48>
 800c552:	3a01      	subs	r2, #1
 800c554:	8008      	strh	r0, [r1, #0]
 800c556:	d003      	beq.n	800c560 <arm_fill_q15+0x48>
 800c558:	2a01      	cmp	r2, #1
 800c55a:	8048      	strh	r0, [r1, #2]
 800c55c:	bf18      	it	ne
 800c55e:	8088      	strhne	r0, [r1, #4]
 800c560:	bd10      	pop	{r4, pc}
 800c562:	46f4      	mov	ip, lr
 800c564:	f1bc 0c01 	subs.w	ip, ip, #1
 800c568:	601c      	str	r4, [r3, #0]
 800c56a:	605c      	str	r4, [r3, #4]
 800c56c:	f103 0308 	add.w	r3, r3, #8
 800c570:	d1f8      	bne.n	800c564 <arm_fill_q15+0x4c>
 800c572:	e7e9      	b.n	800c548 <arm_fill_q15+0x30>

0800c574 <ai_array_to_buffer_fmt>:
 800c574:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800c578:	2b02      	cmp	r3, #2
 800c57a:	d050      	beq.n	800c61e <ai_array_to_buffer_fmt+0xaa>
 800c57c:	4b2a      	ldr	r3, [pc, #168]	; (800c628 <ai_array_to_buffer_fmt+0xb4>)
 800c57e:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800c582:	429a      	cmp	r2, r3
 800c584:	d00b      	beq.n	800c59e <ai_array_to_buffer_fmt+0x2a>
 800c586:	dc1c      	bgt.n	800c5c2 <ai_array_to_buffer_fmt+0x4e>
 800c588:	4b28      	ldr	r3, [pc, #160]	; (800c62c <ai_array_to_buffer_fmt+0xb8>)
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d007      	beq.n	800c59e <ai_array_to_buffer_fmt+0x2a>
 800c58e:	dd0b      	ble.n	800c5a8 <ai_array_to_buffer_fmt+0x34>
 800c590:	4b27      	ldr	r3, [pc, #156]	; (800c630 <ai_array_to_buffer_fmt+0xbc>)
 800c592:	429a      	cmp	r2, r3
 800c594:	d003      	beq.n	800c59e <ai_array_to_buffer_fmt+0x2a>
 800c596:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d131      	bne.n	800c602 <ai_array_to_buffer_fmt+0x8e>
 800c59e:	4613      	mov	r3, r2
 800c5a0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800c5a4:	4318      	orrs	r0, r3
 800c5a6:	4770      	bx	lr
 800c5a8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d0f6      	beq.n	800c59e <ai_array_to_buffer_fmt+0x2a>
 800c5b0:	dd2c      	ble.n	800c60c <ai_array_to_buffer_fmt+0x98>
 800c5b2:	4b20      	ldr	r3, [pc, #128]	; (800c634 <ai_array_to_buffer_fmt+0xc0>)
 800c5b4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	bf18      	it	ne
 800c5bc:	2340      	movne	r3, #64	; 0x40
 800c5be:	4318      	orrs	r0, r3
 800c5c0:	4770      	bx	lr
 800c5c2:	4b1d      	ldr	r3, [pc, #116]	; (800c638 <ai_array_to_buffer_fmt+0xc4>)
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d0ea      	beq.n	800c59e <ai_array_to_buffer_fmt+0x2a>
 800c5c8:	dd0e      	ble.n	800c5e8 <ai_array_to_buffer_fmt+0x74>
 800c5ca:	4b1c      	ldr	r3, [pc, #112]	; (800c63c <ai_array_to_buffer_fmt+0xc8>)
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d0e6      	beq.n	800c59e <ai_array_to_buffer_fmt+0x2a>
 800c5d0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d0e2      	beq.n	800c59e <ai_array_to_buffer_fmt+0x2a>
 800c5d8:	4b19      	ldr	r3, [pc, #100]	; (800c640 <ai_array_to_buffer_fmt+0xcc>)
 800c5da:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	bf18      	it	ne
 800c5e2:	2340      	movne	r3, #64	; 0x40
 800c5e4:	4318      	orrs	r0, r3
 800c5e6:	4770      	bx	lr
 800c5e8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d0d6      	beq.n	800c59e <ai_array_to_buffer_fmt+0x2a>
 800c5f0:	3307      	adds	r3, #7
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d0d3      	beq.n	800c59e <ai_array_to_buffer_fmt+0x2a>
 800c5f6:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	bf18      	it	ne
 800c5fe:	2340      	movne	r3, #64	; 0x40
 800c600:	e7ce      	b.n	800c5a0 <ai_array_to_buffer_fmt+0x2c>
 800c602:	4b10      	ldr	r3, [pc, #64]	; (800c644 <ai_array_to_buffer_fmt+0xd0>)
 800c604:	429a      	cmp	r2, r3
 800c606:	bf18      	it	ne
 800c608:	2340      	movne	r3, #64	; 0x40
 800c60a:	e7c9      	b.n	800c5a0 <ai_array_to_buffer_fmt+0x2c>
 800c60c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800c610:	429a      	cmp	r2, r3
 800c612:	d0c4      	beq.n	800c59e <ai_array_to_buffer_fmt+0x2a>
 800c614:	3380      	adds	r3, #128	; 0x80
 800c616:	429a      	cmp	r2, r3
 800c618:	bf18      	it	ne
 800c61a:	2340      	movne	r3, #64	; 0x40
 800c61c:	e7c0      	b.n	800c5a0 <ai_array_to_buffer_fmt+0x2c>
 800c61e:	4b0a      	ldr	r3, [pc, #40]	; (800c648 <ai_array_to_buffer_fmt+0xd4>)
 800c620:	4003      	ands	r3, r0
 800c622:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c626:	e7bb      	b.n	800c5a0 <ai_array_to_buffer_fmt+0x2c>
 800c628:	00840040 	.word	0x00840040
 800c62c:	00040840 	.word	0x00040840
 800c630:	00041040 	.word	0x00041040
 800c634:	00040447 	.word	0x00040447
 800c638:	00840840 	.word	0x00840840
 800c63c:	00841040 	.word	0x00841040
 800c640:	0084084f 	.word	0x0084084f
 800c644:	0004084f 	.word	0x0004084f
 800c648:	00803fff 	.word	0x00803fff

0800c64c <ai_array_get_byte_size>:
 800c64c:	b319      	cbz	r1, 800c696 <ai_array_get_byte_size+0x4a>
 800c64e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800c652:	fb03 f101 	mul.w	r1, r3, r1
 800c656:	3107      	adds	r1, #7
 800c658:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800c65c:	f021 0307 	bic.w	r3, r1, #7
 800c660:	2a04      	cmp	r2, #4
 800c662:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800c666:	fa23 f101 	lsr.w	r1, r3, r1
 800c66a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800c66e:	d00b      	beq.n	800c688 <ai_array_get_byte_size+0x3c>
 800c670:	2a08      	cmp	r2, #8
 800c672:	d002      	beq.n	800c67a <ai_array_get_byte_size+0x2e>
 800c674:	3107      	adds	r1, #7
 800c676:	08c8      	lsrs	r0, r1, #3
 800c678:	4770      	bx	lr
 800c67a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c67e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800c682:	3107      	adds	r1, #7
 800c684:	08c8      	lsrs	r0, r1, #3
 800c686:	4770      	bx	lr
 800c688:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c68c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800c690:	3107      	adds	r1, #7
 800c692:	08c8      	lsrs	r0, r1, #3
 800c694:	4770      	bx	lr
 800c696:	4608      	mov	r0, r1
 800c698:	4770      	bx	lr
 800c69a:	bf00      	nop

0800c69c <ai_array_get_data_byte_size>:
 800c69c:	b169      	cbz	r1, 800c6ba <ai_array_get_data_byte_size+0x1e>
 800c69e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800c6a2:	fb01 f303 	mul.w	r3, r1, r3
 800c6a6:	3307      	adds	r3, #7
 800c6a8:	f023 0307 	bic.w	r3, r3, #7
 800c6ac:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800c6b0:	fa23 f000 	lsr.w	r0, r3, r0
 800c6b4:	3007      	adds	r0, #7
 800c6b6:	08c0      	lsrs	r0, r0, #3
 800c6b8:	4770      	bx	lr
 800c6ba:	4608      	mov	r0, r1
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop

0800c6c0 <ai_version_get>:
 800c6c0:	0212      	lsls	r2, r2, #8
 800c6c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c6c6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800c6ca:	4770      	bx	lr

0800c6cc <get_tensor_byte_size>:
 800c6cc:	b410      	push	{r4}
 800c6ce:	6983      	ldr	r3, [r0, #24]
 800c6d0:	68c4      	ldr	r4, [r0, #12]
 800c6d2:	6941      	ldr	r1, [r0, #20]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	68e0      	ldr	r0, [r4, #12]
 800c6d8:	4a06      	ldr	r2, [pc, #24]	; (800c6f4 <get_tensor_byte_size+0x28>)
 800c6da:	68c9      	ldr	r1, [r1, #12]
 800c6dc:	bc10      	pop	{r4}
 800c6de:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800c6e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c6e6:	fb01 f000 	mul.w	r0, r1, r0
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	bf04      	itt	eq
 800c6ee:	3007      	addeq	r0, #7
 800c6f0:	08c0      	lsreq	r0, r0, #3
 800c6f2:	4770      	bx	lr
 800c6f4:	000400c0 	.word	0x000400c0

0800c6f8 <memset>:
 800c6f8:	4402      	add	r2, r0
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d100      	bne.n	800c702 <memset+0xa>
 800c700:	4770      	bx	lr
 800c702:	f803 1b01 	strb.w	r1, [r3], #1
 800c706:	e7f9      	b.n	800c6fc <memset+0x4>

0800c708 <__libc_init_array>:
 800c708:	b570      	push	{r4, r5, r6, lr}
 800c70a:	4d0d      	ldr	r5, [pc, #52]	; (800c740 <__libc_init_array+0x38>)
 800c70c:	4c0d      	ldr	r4, [pc, #52]	; (800c744 <__libc_init_array+0x3c>)
 800c70e:	1b64      	subs	r4, r4, r5
 800c710:	10a4      	asrs	r4, r4, #2
 800c712:	2600      	movs	r6, #0
 800c714:	42a6      	cmp	r6, r4
 800c716:	d109      	bne.n	800c72c <__libc_init_array+0x24>
 800c718:	4d0b      	ldr	r5, [pc, #44]	; (800c748 <__libc_init_array+0x40>)
 800c71a:	4c0c      	ldr	r4, [pc, #48]	; (800c74c <__libc_init_array+0x44>)
 800c71c:	f000 f818 	bl	800c750 <_init>
 800c720:	1b64      	subs	r4, r4, r5
 800c722:	10a4      	asrs	r4, r4, #2
 800c724:	2600      	movs	r6, #0
 800c726:	42a6      	cmp	r6, r4
 800c728:	d105      	bne.n	800c736 <__libc_init_array+0x2e>
 800c72a:	bd70      	pop	{r4, r5, r6, pc}
 800c72c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c730:	4798      	blx	r3
 800c732:	3601      	adds	r6, #1
 800c734:	e7ee      	b.n	800c714 <__libc_init_array+0xc>
 800c736:	f855 3b04 	ldr.w	r3, [r5], #4
 800c73a:	4798      	blx	r3
 800c73c:	3601      	adds	r6, #1
 800c73e:	e7f2      	b.n	800c726 <__libc_init_array+0x1e>
 800c740:	0801f518 	.word	0x0801f518
 800c744:	0801f518 	.word	0x0801f518
 800c748:	0801f518 	.word	0x0801f518
 800c74c:	0801f51c 	.word	0x0801f51c

0800c750 <_init>:
 800c750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c752:	bf00      	nop
 800c754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c756:	bc08      	pop	{r3}
 800c758:	469e      	mov	lr, r3
 800c75a:	4770      	bx	lr

0800c75c <_fini>:
 800c75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75e:	bf00      	nop
 800c760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c762:	bc08      	pop	{r3}
 800c764:	469e      	mov	lr, r3
 800c766:	4770      	bx	lr
